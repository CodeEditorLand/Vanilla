{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/resources.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { toSlashes } from '../../common/extpath.js';\nimport { posix, win32 } from '../../common/path.js';\nimport { isWindows } from '../../common/platform.js';\nimport { addTrailingPathSeparator, basename, dirname, distinctParents, extUri, extUriIgnorePathCase, hasTrailingPathSeparator, isAbsolutePath, joinPath, normalizePath, relativePath, removeTrailingPathSeparator, resolvePath } from '../../common/resources.js';\nimport { URI } from '../../common/uri.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\n\nsuite('Resources', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('distinctParents', () => {\n\n\t\t// Basic\n\t\tlet resources = [\n\t\t\tURI.file('/some/folderA/file.txt'),\n\t\t\tURI.file('/some/folderB/file.txt'),\n\t\t\tURI.file('/some/folderC/file.txt')\n\t\t];\n\n\t\tlet distinct = distinctParents(resources, r => r);\n\t\tassert.strictEqual(distinct.length, 3);\n\t\tassert.strictEqual(distinct[0].toString(), resources[0].toString());\n\t\tassert.strictEqual(distinct[1].toString(), resources[1].toString());\n\t\tassert.strictEqual(distinct[2].toString(), resources[2].toString());\n\n\t\t// Parent / Child\n\t\tresources = [\n\t\t\tURI.file('/some/folderA'),\n\t\t\tURI.file('/some/folderA/file.txt'),\n\t\t\tURI.file('/some/folderA/child/file.txt'),\n\t\t\tURI.file('/some/folderA2/file.txt'),\n\t\t\tURI.file('/some/file.txt')\n\t\t];\n\n\t\tdistinct = distinctParents(resources, r => r);\n\t\tassert.strictEqual(distinct.length, 3);\n\t\tassert.strictEqual(distinct[0].toString(), resources[0].toString());\n\t\tassert.strictEqual(distinct[1].toString(), resources[3].toString());\n\t\tassert.strictEqual(distinct[2].toString(), resources[4].toString());\n\t});\n\n\ttest('dirname', () => {\n\t\tif (isWindows) {\n\t\t\tassert.strictEqual(dirname(URI.file('c:\\\\some\\\\file\\\\test.txt')).toString(), 'file:///c%3A/some/file');\n\t\t\tassert.strictEqual(dirname(URI.file('c:\\\\some\\\\file')).toString(), 'file:///c%3A/some');\n\t\t\tassert.strictEqual(dirname(URI.file('c:\\\\some\\\\file\\\\')).toString(), 'file:///c%3A/some');\n\t\t\tassert.strictEqual(dirname(URI.file('c:\\\\some')).toString(), 'file:///c%3A/');\n\t\t\tassert.strictEqual(dirname(URI.file('C:\\\\some')).toString(), 'file:///c%3A/');\n\t\t\tassert.strictEqual(dirname(URI.file('c:\\\\')).toString(), 'file:///c%3A/');\n\t\t} else {\n\t\t\tassert.strictEqual(dirname(URI.file('/some/file/test.txt')).toString(), 'file:///some/file');\n\t\t\tassert.strictEqual(dirname(URI.file('/some/file/')).toString(), 'file:///some');\n\t\t\tassert.strictEqual(dirname(URI.file('/some/file')).toString(), 'file:///some');\n\t\t}\n\t\tassert.strictEqual(dirname(URI.parse('foo://a/some/file/test.txt')).toString(), 'foo://a/some/file');\n\t\tassert.strictEqual(dirname(URI.parse('foo://a/some/file/')).toString(), 'foo://a/some');\n\t\tassert.strictEqual(dirname(URI.parse('foo://a/some/file')).toString(), 'foo://a/some');\n\t\tassert.strictEqual(dirname(URI.parse('foo://a/some')).toString(), 'foo://a/');\n\t\tassert.strictEqual(dirname(URI.parse('foo://a/')).toString(), 'foo://a/');\n\t\tassert.strictEqual(dirname(URI.parse('foo://a')).toString(), 'foo://a');\n\n\t\t// does not explode (https://github.com/microsoft/vscode/issues/41987)\n\t\tdirname(URI.from({ scheme: 'file', authority: '/users/someone/portal.h' }));\n\n\t\tassert.strictEqual(dirname(URI.parse('foo://a/b/c?q')).toString(), 'foo://a/b?q');\n\t});\n\n\ttest('basename', () => {\n\t\tif (isWindows) {\n\t\t\tassert.strictEqual(basename(URI.file('c:\\\\some\\\\file\\\\test.txt')), 'test.txt');\n\t\t\tassert.strictEqual(basename(URI.file('c:\\\\some\\\\file')), 'file');\n\t\t\tassert.strictEqual(basename(URI.file('c:\\\\some\\\\file\\\\')), 'file');\n\t\t\tassert.strictEqual(basename(URI.file('C:\\\\some\\\\file\\\\')), 'file');\n\t\t} else {\n\t\t\tassert.strictEqual(basename(URI.file('/some/file/test.txt')), 'test.txt');\n\t\t\tassert.strictEqual(basename(URI.file('/some/file/')), 'file');\n\t\t\tassert.strictEqual(basename(URI.file('/some/file')), 'file');\n\t\t\tassert.strictEqual(basename(URI.file('/some')), 'some');\n\t\t}\n\t\tassert.strictEqual(basename(URI.parse('foo://a/some/file/test.txt')), 'test.txt');\n\t\tassert.strictEqual(basename(URI.parse('foo://a/some/file/')), 'file');\n\t\tassert.strictEqual(basename(URI.parse('foo://a/some/file')), 'file');\n\t\tassert.strictEqual(basename(URI.parse('foo://a/some')), 'some');\n\t\tassert.strictEqual(basename(URI.parse('foo://a/')), '');\n\t\tassert.strictEqual(basename(URI.parse('foo://a')), '');\n\t});\n\n\ttest('joinPath', () => {\n\t\tif (isWindows) {\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\foo\\\\bar'), '/file.js').toString(), 'file:///c%3A/foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\foo\\\\bar\\\\'), 'file.js').toString(), 'file:///c%3A/foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\foo\\\\bar\\\\'), '/file.js').toString(), 'file:///c%3A/foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\'), '/file.js').toString(), 'file:///c%3A/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\'), 'bar/file.js').toString(), 'file:///c%3A/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\foo'), './file.js').toString(), 'file:///c%3A/foo/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('c:\\\\foo'), '/./file.js').toString(), 'file:///c%3A/foo/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('C:\\\\foo'), '../file.js').toString(), 'file:///c%3A/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('C:\\\\foo\\\\.'), '../file.js').toString(), 'file:///c%3A/file.js');\n\t\t} else {\n\t\t\tassert.strictEqual(joinPath(URI.file('/foo/bar'), '/file.js').toString(), 'file:///foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('/foo/bar'), 'file.js').toString(), 'file:///foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('/foo/bar/'), '/file.js').toString(), 'file:///foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('/'), '/file.js').toString(), 'file:///file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('/foo/bar'), './file.js').toString(), 'file:///foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('/foo/bar'), '/./file.js').toString(), 'file:///foo/bar/file.js');\n\t\t\tassert.strictEqual(joinPath(URI.file('/foo/bar'), '../file.js').toString(), 'file:///foo/file.js');\n\t\t}\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar')).toString(), 'foo://a/foo/bar');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar'), '/file.js').toString(), 'foo://a/foo/bar/file.js');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar'), 'file.js').toString(), 'foo://a/foo/bar/file.js');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar/'), '/file.js').toString(), 'foo://a/foo/bar/file.js');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/'), '/file.js').toString(), 'foo://a/file.js');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar/'), './file.js').toString(), 'foo://a/foo/bar/file.js');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar/'), '/./file.js').toString(), 'foo://a/foo/bar/file.js');\n\t\tassert.strictEqual(joinPath(URI.parse('foo://a/foo/bar/'), '../file.js').toString(), 'foo://a/foo/file.js');\n\n\t\tassert.strictEqual(\n\t\t\tjoinPath(URI.from({ scheme: 'myScheme', authority: 'authority', path: '/path', query: 'query', fragment: 'fragment' }), '/file.js').toString(),\n\t\t\t'myScheme://authority/path/file.js?query#fragment');\n\t});\n\n\ttest('normalizePath', () => {\n\t\tif (isWindows) {\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\.\\\\bar')).toString(), 'file:///c%3A/foo/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\.')).toString(), 'file:///c%3A/foo');\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\.\\\\')).toString(), 'file:///c%3A/foo/');\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\..')).toString(), 'file:///c%3A/');\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\..\\\\bar')).toString(), 'file:///c%3A/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\..\\\\..\\\\bar')).toString(), 'file:///c%3A/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('c:\\\\foo\\\\foo\\\\..\\\\..\\\\bar')).toString(), 'file:///c%3A/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('C:\\\\foo\\\\foo\\\\.\\\\..\\\\..\\\\bar')).toString(), 'file:///c%3A/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('C:\\\\foo\\\\foo\\\\.\\\\..\\\\some\\\\..\\\\bar')).toString(), 'file:///c%3A/foo/bar');\n\t\t} else {\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/./bar')).toString(), 'file:///foo/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/.')).toString(), 'file:///foo');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/./')).toString(), 'file:///foo/');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/..')).toString(), 'file:///');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/../bar')).toString(), 'file:///bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/../../bar')).toString(), 'file:///bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/foo/../../bar')).toString(), 'file:///bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/foo/./../../bar')).toString(), 'file:///bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/foo/foo/./../some/../bar')).toString(), 'file:///foo/bar');\n\t\t\tassert.strictEqual(normalizePath(URI.file('/f')).toString(), 'file:///f');\n\t\t}\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/./bar')).toString(), 'foo://a/foo/bar');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/.')).toString(), 'foo://a/foo');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/./')).toString(), 'foo://a/foo/');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/..')).toString(), 'foo://a/');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/../bar')).toString(), 'foo://a/bar');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/../../bar')).toString(), 'foo://a/bar');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/foo/../../bar')).toString(), 'foo://a/bar');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/foo/./../../bar')).toString(), 'foo://a/bar');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/foo/./../some/../bar')).toString(), 'foo://a/foo/bar');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a')).toString(), 'foo://a');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/')).toString(), 'foo://a/');\n\t\tassert.strictEqual(normalizePath(URI.parse('foo://a/foo/./bar?q=1')).toString(), URI.parse('foo://a/foo/bar?q%3D1').toString());\n\t});\n\n\ttest('isAbsolute', () => {\n\t\tif (isWindows) {\n\t\t\tassert.strictEqual(isAbsolutePath(URI.file('c:\\\\foo\\\\')), true);\n\t\t\tassert.strictEqual(isAbsolutePath(URI.file('C:\\\\foo\\\\')), true);\n\t\t\tassert.strictEqual(isAbsolutePath(URI.file('bar')), true); // URI normalizes all file URIs to be absolute\n\t\t} else {\n\t\t\tassert.strictEqual(isAbsolutePath(URI.file('/foo/bar')), true);\n\t\t\tassert.strictEqual(isAbsolutePath(URI.file('bar')), true); // URI normalizes all file URIs to be absolute\n\t\t}\n\t\tassert.strictEqual(isAbsolutePath(URI.parse('foo:foo')), false);\n\t\tassert.strictEqual(isAbsolutePath(URI.parse('foo://a/foo/.')), true);\n\t});\n\n\tfunction assertTrailingSeparator(u1: URI, expected: boolean) {\n\t\tassert.strictEqual(hasTrailingPathSeparator(u1), expected, u1.toString());\n\t}\n\n\tfunction assertRemoveTrailingSeparator(u1: URI, expected: URI) {\n\t\tassertEqualURI(removeTrailingPathSeparator(u1), expected, u1.toString());\n\t}\n\n\tfunction assertAddTrailingSeparator(u1: URI, expected: URI) {\n\t\tassertEqualURI(addTrailingPathSeparator(u1), expected, u1.toString());\n\t}\n\n\ttest('trailingPathSeparator', () => {\n\t\tassertTrailingSeparator(URI.parse('foo://a/foo'), false);\n\t\tassertTrailingSeparator(URI.parse('foo://a/foo/'), true);\n\t\tassertTrailingSeparator(URI.parse('foo://a/'), false);\n\t\tassertTrailingSeparator(URI.parse('foo://a'), false);\n\n\t\tassertRemoveTrailingSeparator(URI.parse('foo://a/foo'), URI.parse('foo://a/foo'));\n\t\tassertRemoveTrailingSeparator(URI.parse('foo://a/foo/'), URI.parse('foo://a/foo'));\n\t\tassertRemoveTrailingSeparator(URI.parse('foo://a/'), URI.parse('foo://a/'));\n\t\tassertRemoveTrailingSeparator(URI.parse('foo://a'), URI.parse('foo://a'));\n\n\t\tassertAddTrailingSeparator(URI.parse('foo://a/foo'), URI.parse('foo://a/foo/'));\n\t\tassertAddTrailingSeparator(URI.parse('foo://a/foo/'), URI.parse('foo://a/foo/'));\n\t\tassertAddTrailingSeparator(URI.parse('foo://a/'), URI.parse('foo://a/'));\n\t\tassertAddTrailingSeparator(URI.parse('foo://a'), URI.parse('foo://a/'));\n\n\t\tif (isWindows) {\n\t\t\tassertTrailingSeparator(URI.file('c:\\\\a\\\\foo'), false);\n\t\t\tassertTrailingSeparator(URI.file('c:\\\\a\\\\foo\\\\'), true);\n\t\t\tassertTrailingSeparator(URI.file('c:\\\\'), false);\n\t\t\tassertTrailingSeparator(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), true);\n\t\t\tassertTrailingSeparator(URI.file('\\\\\\\\server\\\\share\\\\'), false);\n\n\t\t\tassertRemoveTrailingSeparator(URI.file('c:\\\\a\\\\foo'), URI.file('c:\\\\a\\\\foo'));\n\t\t\tassertRemoveTrailingSeparator(URI.file('c:\\\\a\\\\foo\\\\'), URI.file('c:\\\\a\\\\foo'));\n\t\t\tassertRemoveTrailingSeparator(URI.file('c:\\\\'), URI.file('c:\\\\'));\n\t\t\tassertRemoveTrailingSeparator(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), URI.file('\\\\\\\\server\\\\share\\\\some'));\n\t\t\tassertRemoveTrailingSeparator(URI.file('\\\\\\\\server\\\\share\\\\'), URI.file('\\\\\\\\server\\\\share\\\\'));\n\n\t\t\tassertAddTrailingSeparator(URI.file('c:\\\\a\\\\foo'), URI.file('c:\\\\a\\\\foo\\\\'));\n\t\t\tassertAddTrailingSeparator(URI.file('c:\\\\a\\\\foo\\\\'), URI.file('c:\\\\a\\\\foo\\\\'));\n\t\t\tassertAddTrailingSeparator(URI.file('c:\\\\'), URI.file('c:\\\\'));\n\t\t\tassertAddTrailingSeparator(URI.file('\\\\\\\\server\\\\share\\\\some'), URI.file('\\\\\\\\server\\\\share\\\\some\\\\'));\n\t\t\tassertAddTrailingSeparator(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), URI.file('\\\\\\\\server\\\\share\\\\some\\\\'));\n\t\t} else {\n\t\t\tassertTrailingSeparator(URI.file('/foo/bar'), false);\n\t\t\tassertTrailingSeparator(URI.file('/foo/bar/'), true);\n\t\t\tassertTrailingSeparator(URI.file('/'), false);\n\n\t\t\tassertRemoveTrailingSeparator(URI.file('/foo/bar'), URI.file('/foo/bar'));\n\t\t\tassertRemoveTrailingSeparator(URI.file('/foo/bar/'), URI.file('/foo/bar'));\n\t\t\tassertRemoveTrailingSeparator(URI.file('/'), URI.file('/'));\n\n\t\t\tassertAddTrailingSeparator(URI.file('/foo/bar'), URI.file('/foo/bar/'));\n\t\t\tassertAddTrailingSeparator(URI.file('/foo/bar/'), URI.file('/foo/bar/'));\n\t\t\tassertAddTrailingSeparator(URI.file('/'), URI.file('/'));\n\t\t}\n\t});\n\n\tfunction assertEqualURI(actual: URI, expected: URI, message?: string, ignoreCase?: boolean) {\n\t\tconst util = ignoreCase ? extUriIgnorePathCase : extUri;\n\t\tif (!util.isEqual(expected, actual)) {\n\t\t\tassert.strictEqual(actual.toString(), expected.toString(), message);\n\t\t}\n\t}\n\n\tfunction assertRelativePath(u1: URI, u2: URI, expectedPath: string | undefined, ignoreJoin?: boolean, ignoreCase?: boolean) {\n\t\tconst util = ignoreCase ? extUriIgnorePathCase : extUri;\n\n\t\tassert.strictEqual(util.relativePath(u1, u2), expectedPath, `from ${u1.toString()} to ${u2.toString()}`);\n\t\tif (expectedPath !== undefined && !ignoreJoin) {\n\t\t\tassertEqualURI(removeTrailingPathSeparator(joinPath(u1, expectedPath)), removeTrailingPathSeparator(u2), 'joinPath on relativePath should be equal', ignoreCase);\n\t\t}\n\t}\n\n\ttest('relativePath', () => {\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://a/foo/bar'), 'bar');\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://a/foo/bar/'), 'bar');\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://a/foo/bar/goo'), 'bar/goo');\n\t\tassertRelativePath(URI.parse('foo://a/'), URI.parse('foo://a/foo/bar/goo'), 'foo/bar/goo');\n\t\tassertRelativePath(URI.parse('foo://a/foo/xoo'), URI.parse('foo://a/foo/bar'), '../bar');\n\t\tassertRelativePath(URI.parse('foo://a/foo/xoo/yoo'), URI.parse('foo://a'), '../../..', true);\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://a/foo/'), '');\n\t\tassertRelativePath(URI.parse('foo://a/foo/'), URI.parse('foo://a/foo'), '');\n\t\tassertRelativePath(URI.parse('foo://a/foo/'), URI.parse('foo://a/foo/'), '');\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://a/foo'), '');\n\t\tassertRelativePath(URI.parse('foo://a'), URI.parse('foo://a'), '', true);\n\t\tassertRelativePath(URI.parse('foo://a/'), URI.parse('foo://a/'), '');\n\t\tassertRelativePath(URI.parse('foo://a/'), URI.parse('foo://a'), '', true);\n\t\tassertRelativePath(URI.parse('foo://a/foo?q'), URI.parse('foo://a/foo/bar#h'), 'bar', true);\n\t\tassertRelativePath(URI.parse('foo://'), URI.parse('foo://a/b'), undefined);\n\t\tassertRelativePath(URI.parse('foo://a2/b'), URI.parse('foo://a/b'), undefined);\n\t\tassertRelativePath(URI.parse('goo://a/b'), URI.parse('foo://a/b'), undefined);\n\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://A/FOO/bar/goo'), 'bar/goo', false, true);\n\t\tassertRelativePath(URI.parse('foo://a/foo'), URI.parse('foo://A/FOO/BAR/GOO'), 'BAR/GOO', false, true);\n\t\tassertRelativePath(URI.parse('foo://a/foo/xoo'), URI.parse('foo://A/FOO/BAR/GOO'), '../BAR/GOO', false, true);\n\t\tassertRelativePath(URI.parse('foo:///c:/a/foo'), URI.parse('foo:///C:/a/foo/xoo/'), 'xoo', false, true);\n\n\t\tif (isWindows) {\n\t\t\tassertRelativePath(URI.file('c:\\\\foo\\\\bar'), URI.file('c:\\\\foo\\\\bar'), '');\n\t\t\tassertRelativePath(URI.file('c:\\\\foo\\\\bar\\\\huu'), URI.file('c:\\\\foo\\\\bar'), '..');\n\t\t\tassertRelativePath(URI.file('c:\\\\foo\\\\bar\\\\a1\\\\a2'), URI.file('c:\\\\foo\\\\bar'), '../..');\n\t\t\tassertRelativePath(URI.file('c:\\\\foo\\\\bar\\\\'), URI.file('c:\\\\foo\\\\bar\\\\a1\\\\a2'), 'a1/a2');\n\t\t\tassertRelativePath(URI.file('c:\\\\foo\\\\bar\\\\'), URI.file('c:\\\\foo\\\\bar\\\\a1\\\\a2\\\\'), 'a1/a2');\n\t\t\tassertRelativePath(URI.file('c:\\\\'), URI.file('c:\\\\foo\\\\bar'), 'foo/bar');\n\t\t\tassertRelativePath(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), URI.file('\\\\\\\\server\\\\share\\\\some\\\\path'), 'path');\n\t\t\tassertRelativePath(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), URI.file('\\\\\\\\server\\\\share2\\\\some\\\\path'), '../../share2/some/path', true); // ignore joinPath assert: path.join is not root aware\n\t\t} else {\n\t\t\tassertRelativePath(URI.file('/a/foo'), URI.file('/a/foo/bar'), 'bar');\n\t\t\tassertRelativePath(URI.file('/a/foo'), URI.file('/a/foo/bar/'), 'bar');\n\t\t\tassertRelativePath(URI.file('/a/foo'), URI.file('/a/foo/bar/goo'), 'bar/goo');\n\t\t\tassertRelativePath(URI.file('/a/'), URI.file('/a/foo/bar/goo'), 'foo/bar/goo');\n\t\t\tassertRelativePath(URI.file('/'), URI.file('/a/foo/bar/goo'), 'a/foo/bar/goo');\n\t\t\tassertRelativePath(URI.file('/a/foo/xoo'), URI.file('/a/foo/bar'), '../bar');\n\t\t\tassertRelativePath(URI.file('/a/foo/xoo/yoo'), URI.file('/a'), '../../..');\n\t\t\tassertRelativePath(URI.file('/a/foo'), URI.file('/a/foo/'), '');\n\t\t\tassertRelativePath(URI.file('/a/foo'), URI.file('/b/foo/'), '../../b/foo');\n\t\t}\n\t});\n\n\tfunction assertResolve(u1: URI, path: string, expected: URI) {\n\t\tconst actual = resolvePath(u1, path);\n\t\tassertEqualURI(actual, expected, `from ${u1.toString()} and ${path}`);\n\n\t\tconst p = path.indexOf('/') !== -1 ? posix : win32;\n\t\tif (!p.isAbsolute(path)) {\n\t\t\tlet expectedPath = isWindows ? toSlashes(path) : path;\n\t\t\texpectedPath = expectedPath.startsWith('./') ? expectedPath.substr(2) : expectedPath;\n\t\t\tassert.strictEqual(relativePath(u1, actual), expectedPath, `relativePath (${u1.toString()}) on actual (${actual.toString()}) should be to path (${expectedPath})`);\n\t\t}\n\t}\n\n\ttest('resolve', () => {\n\t\tif (isWindows) {\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), 'file.js', URI.file('c:\\\\foo\\\\bar\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), 't\\\\file.js', URI.file('c:\\\\foo\\\\bar\\\\t\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), '.\\\\t\\\\file.js', URI.file('c:\\\\foo\\\\bar\\\\t\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), 'a1/file.js', URI.file('c:\\\\foo\\\\bar\\\\a1\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), './a1/file.js', URI.file('c:\\\\foo\\\\bar\\\\a1\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), '\\\\b1\\\\file.js', URI.file('c:\\\\b1\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar'), '/b1/file.js', URI.file('c:\\\\b1\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\foo\\\\bar\\\\'), 'file.js', URI.file('c:\\\\foo\\\\bar\\\\file.js'));\n\n\t\t\tassertResolve(URI.file('c:\\\\'), 'file.js', URI.file('c:\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\'), '\\\\b1\\\\file.js', URI.file('c:\\\\b1\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\'), '/b1/file.js', URI.file('c:\\\\b1\\\\file.js'));\n\t\t\tassertResolve(URI.file('c:\\\\'), 'd:\\\\foo\\\\bar.txt', URI.file('d:\\\\foo\\\\bar.txt'));\n\n\t\t\tassertResolve(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), 'b1\\\\file.js', URI.file('\\\\\\\\server\\\\share\\\\some\\\\b1\\\\file.js'));\n\t\t\tassertResolve(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), '\\\\file.js', URI.file('\\\\\\\\server\\\\share\\\\file.js'));\n\n\t\t\tassertResolve(URI.file('c:\\\\'), '\\\\\\\\server\\\\share\\\\some\\\\', URI.file('\\\\\\\\server\\\\share\\\\some'));\n\t\t\tassertResolve(URI.file('\\\\\\\\server\\\\share\\\\some\\\\'), 'c:\\\\', URI.file('c:\\\\'));\n\t\t} else {\n\t\t\tassertResolve(URI.file('/foo/bar'), 'file.js', URI.file('/foo/bar/file.js'));\n\t\t\tassertResolve(URI.file('/foo/bar'), './file.js', URI.file('/foo/bar/file.js'));\n\t\t\tassertResolve(URI.file('/foo/bar'), '/file.js', URI.file('/file.js'));\n\t\t\tassertResolve(URI.file('/foo/bar/'), 'file.js', URI.file('/foo/bar/file.js'));\n\t\t\tassertResolve(URI.file('/'), 'file.js', URI.file('/file.js'));\n\t\t\tassertResolve(URI.file(''), './file.js', URI.file('/file.js'));\n\t\t\tassertResolve(URI.file(''), '/file.js', URI.file('/file.js'));\n\t\t}\n\n\t\tassertResolve(URI.parse('foo://server/foo/bar'), 'file.js', URI.parse('foo://server/foo/bar/file.js'));\n\t\tassertResolve(URI.parse('foo://server/foo/bar'), './file.js', URI.parse('foo://server/foo/bar/file.js'));\n\t\tassertResolve(URI.parse('foo://server/foo/bar'), './file.js', URI.parse('foo://server/foo/bar/file.js'));\n\t\tassertResolve(URI.parse('foo://server/foo/bar'), 'c:\\\\a1\\\\b1', URI.parse('foo://server/c:/a1/b1'));\n\t\tassertResolve(URI.parse('foo://server/foo/bar'), 'c:\\\\', URI.parse('foo://server/c:'));\n\n\n\t});\n\n\tfunction assertIsEqual(u1: URI, u2: URI, ignoreCase: boolean | undefined, expected: boolean) {\n\n\t\tconst util = ignoreCase ? extUriIgnorePathCase : extUri;\n\n\t\tassert.strictEqual(util.isEqual(u1, u2), expected, `${u1.toString()}${expected ? '===' : '!=='}${u2.toString()}`);\n\t\tassert.strictEqual(util.compare(u1, u2) === 0, expected);\n\t\tassert.strictEqual(util.getComparisonKey(u1) === util.getComparisonKey(u2), expected, `comparison keys ${u1.toString()}, ${u2.toString()}`);\n\t\tassert.strictEqual(util.isEqualOrParent(u1, u2), expected, `isEqualOrParent ${u1.toString()}, ${u2.toString()}`);\n\t\tif (!ignoreCase) {\n\t\t\tassert.strictEqual(u1.toString() === u2.toString(), expected);\n\t\t}\n\t}\n\n\n\ttest('isEqual', () => {\n\t\tconst fileURI = isWindows ? URI.file('c:\\\\foo\\\\bar') : URI.file('/foo/bar');\n\t\tconst fileURI2 = isWindows ? URI.file('C:\\\\foo\\\\Bar') : URI.file('/foo/Bar');\n\t\tassertIsEqual(fileURI, fileURI, true, true);\n\t\tassertIsEqual(fileURI, fileURI, false, true);\n\t\tassertIsEqual(fileURI, fileURI, undefined, true);\n\t\tassertIsEqual(fileURI, fileURI2, true, true);\n\t\tassertIsEqual(fileURI, fileURI2, false, false);\n\n\t\tconst fileURI3 = URI.parse('foo://server:453/foo/bar');\n\t\tconst fileURI4 = URI.parse('foo://server:453/foo/Bar');\n\t\tassertIsEqual(fileURI3, fileURI3, true, true);\n\t\tassertIsEqual(fileURI3, fileURI3, false, true);\n\t\tassertIsEqual(fileURI3, fileURI3, undefined, true);\n\t\tassertIsEqual(fileURI3, fileURI4, true, true);\n\t\tassertIsEqual(fileURI3, fileURI4, false, false);\n\n\t\tassertIsEqual(fileURI, fileURI3, true, false);\n\n\t\tassertIsEqual(URI.parse('file://server'), URI.parse('file://server/'), true, true);\n\t\tassertIsEqual(URI.parse('http://server'), URI.parse('http://server/'), true, true);\n\t\tassertIsEqual(URI.parse('foo://server'), URI.parse('foo://server/'), true, false); // only selected scheme have / as the default path\n\t\tassertIsEqual(URI.parse('foo://server/foo'), URI.parse('foo://server/foo/'), true, false);\n\t\tassertIsEqual(URI.parse('foo://server/foo'), URI.parse('foo://server/foo?'), true, true);\n\n\t\tconst fileURI5 = URI.parse('foo://server:453/foo/bar?q=1');\n\t\tconst fileURI6 = URI.parse('foo://server:453/foo/bar#xy');\n\n\t\tassertIsEqual(fileURI5, fileURI5, true, true);\n\t\tassertIsEqual(fileURI5, fileURI3, true, false);\n\t\tassertIsEqual(fileURI6, fileURI6, true, true);\n\t\tassertIsEqual(fileURI6, fileURI5, true, false);\n\t\tassertIsEqual(fileURI6, fileURI3, true, false);\n\t});\n\n\ttest('isEqualOrParent', () => {\n\n\t\tconst fileURI = isWindows ? URI.file('c:\\\\foo\\\\bar') : URI.file('/foo/bar');\n\t\tconst fileURI2 = isWindows ? URI.file('c:\\\\foo') : URI.file('/foo');\n\t\tconst fileURI2b = isWindows ? URI.file('C:\\\\Foo\\\\') : URI.file('/Foo/');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI, fileURI), true, '1');\n\t\tassert.strictEqual(extUri.isEqualOrParent(fileURI, fileURI), true, '2');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI, fileURI2), true, '3');\n\t\tassert.strictEqual(extUri.isEqualOrParent(fileURI, fileURI2), true, '4');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI, fileURI2b), true, '5');\n\t\tassert.strictEqual(extUri.isEqualOrParent(fileURI, fileURI2b), false, '6');\n\n\t\tassert.strictEqual(extUri.isEqualOrParent(fileURI2, fileURI), false, '7');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI2b, fileURI2), true, '8');\n\n\t\tconst fileURI3 = URI.parse('foo://server:453/foo/bar/goo');\n\t\tconst fileURI4 = URI.parse('foo://server:453/foo/');\n\t\tconst fileURI5 = URI.parse('foo://server:453/foo');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI3, fileURI3, true), true, '11');\n\t\tassert.strictEqual(extUri.isEqualOrParent(fileURI3, fileURI3), true, '12');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI3, fileURI4, true), true, '13');\n\t\tassert.strictEqual(extUri.isEqualOrParent(fileURI3, fileURI4), true, '14');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI3, fileURI, true), false, '15');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI5, fileURI5, true), true, '16');\n\n\t\tconst fileURI6 = URI.parse('foo://server:453/foo?q=1');\n\t\tconst fileURI7 = URI.parse('foo://server:453/foo/bar?q=1');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI6, fileURI5), false, '17');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI6, fileURI6), true, '18');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI7, fileURI6), true, '19');\n\t\tassert.strictEqual(extUriIgnorePathCase.isEqualOrParent(fileURI7, fileURI5), false, '20');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
