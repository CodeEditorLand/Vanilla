{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/history.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { HistoryNavigator, HistoryNavigator2 } from '../../common/history.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('History Navigator', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('create reduces the input to limit', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 2);\n\n\t\tassert.deepStrictEqual(['3', '4'], toArray(testObject));\n\t});\n\n\ttest('create sets the position after last', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 100);\n\n\t\tassert.strictEqual(testObject.current(), null);\n\t\tassert.strictEqual(testObject.isNowhere(), true);\n\t\tassert.strictEqual(testObject.isFirst(), false);\n\t\tassert.strictEqual(testObject.isLast(), false);\n\t\tassert.strictEqual(testObject.next(), null);\n\t\tassert.strictEqual(testObject.previous(), '4');\n\t\tassert.strictEqual(testObject.isNowhere(), false);\n\t\tassert.strictEqual(testObject.isFirst(), false);\n\t\tassert.strictEqual(testObject.isLast(), true);\n\t});\n\n\ttest('last returns last element', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 100);\n\n\t\tassert.strictEqual(testObject.first(), '1');\n\t\tassert.strictEqual(testObject.last(), '4');\n\t\tassert.strictEqual(testObject.isFirst(), false);\n\t\tassert.strictEqual(testObject.isLast(), true);\n\t});\n\n\ttest('first returns first element', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 3);\n\n\t\tassert.strictEqual('2', testObject.first());\n\t\tassert.strictEqual(testObject.isFirst(), true);\n\t\tassert.strictEqual(testObject.isLast(), false);\n\t});\n\n\ttest('next returns next element', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 3);\n\n\t\ttestObject.first();\n\n\t\tassert.strictEqual(testObject.next(), '3');\n\t\tassert.strictEqual(testObject.next(), '4');\n\t\tassert.strictEqual(testObject.next(), null);\n\t});\n\n\ttest('previous returns previous element', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 3);\n\n\t\tassert.strictEqual(testObject.previous(), '4');\n\t\tassert.strictEqual(testObject.previous(), '3');\n\t\tassert.strictEqual(testObject.previous(), '2');\n\t\tassert.strictEqual(testObject.previous(), null);\n\t});\n\n\ttest('next on last element returns null and remains on last', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 3);\n\n\t\ttestObject.first();\n\t\ttestObject.last();\n\n\t\tassert.strictEqual(testObject.isLast(), true);\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.strictEqual(testObject.next(), null);\n\t\tassert.strictEqual(testObject.isLast(), false); // Stepping past the last element, is no longer \"last\"\n\t});\n\n\ttest('previous on first element returns null and remains on first', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 3);\n\n\t\ttestObject.first();\n\n\t\tassert.strictEqual(testObject.isFirst(), true);\n\t\tassert.strictEqual(testObject.current(), '2');\n\t\tassert.strictEqual(testObject.previous(), null);\n\t\tassert.strictEqual(testObject.isFirst(), true);\n\t});\n\n\ttest('add reduces the input to limit', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 2);\n\n\t\ttestObject.add('5');\n\n\t\tassert.deepStrictEqual(toArray(testObject), ['4', '5']);\n\t});\n\n\ttest('adding existing element changes the position', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 5);\n\n\t\ttestObject.add('2');\n\n\t\tassert.deepStrictEqual(toArray(testObject), ['1', '3', '4', '2']);\n\t});\n\n\ttest('add resets the navigator to last', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3', '4'], 3);\n\n\t\ttestObject.first();\n\t\ttestObject.add('5');\n\n\t\tassert.strictEqual(testObject.previous(), '5');\n\t\tassert.strictEqual(testObject.isLast(), true);\n\t\tassert.strictEqual(testObject.next(), null);\n\t\tassert.strictEqual(testObject.isLast(), false);\n\t});\n\n\ttest('adding an existing item changes the order', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3']);\n\n\t\ttestObject.add('1');\n\n\t\tassert.deepStrictEqual(['2', '3', '1'], toArray(testObject));\n\t});\n\n\ttest('previous returns null if the current position is the first one', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3']);\n\n\t\ttestObject.first();\n\n\t\tassert.deepStrictEqual(testObject.previous(), null);\n\t\tassert.strictEqual(testObject.isFirst(), true);\n\t});\n\n\ttest('previous returns object if the current position is not the first one', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3']);\n\n\t\ttestObject.first();\n\t\ttestObject.next();\n\n\t\tassert.deepStrictEqual(testObject.previous(), '1');\n\t});\n\n\ttest('next returns null if the current position is the last one', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3']);\n\n\t\ttestObject.last();\n\n\t\tassert.strictEqual(testObject.isLast(), true);\n\t\tassert.deepStrictEqual(testObject.next(), null);\n\t\tassert.strictEqual(testObject.isLast(), false);\n\t});\n\n\ttest('next returns object if the current position is not the last one', () => {\n\t\tconst testObject = new HistoryNavigator(['1', '2', '3']);\n\n\t\ttestObject.last();\n\t\ttestObject.previous();\n\n\t\tassert.deepStrictEqual(testObject.next(), '3');\n\t});\n\n\ttest('clear', () => {\n\t\tconst testObject = new HistoryNavigator(['a', 'b', 'c']);\n\t\tassert.strictEqual(testObject.previous(), 'c');\n\t\ttestObject.clear();\n\t\tassert.strictEqual(testObject.current(), null);\n\t\tassert.strictEqual(testObject.isNowhere(), true);\n\t});\n\n\tfunction toArray(historyNavigator: HistoryNavigator<string>): Array<string | null> {\n\t\tconst result: Array<string | null> = [];\n\t\thistoryNavigator.first();\n\t\tif (historyNavigator.current()) {\n\t\t\tdo {\n\t\t\t\tresult.push(historyNavigator.current()!);\n\t\t\t} while (historyNavigator.next());\n\t\t}\n\t\treturn result;\n\t}\n});\n\nsuite('History Navigator 2', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('constructor', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\t});\n\n\ttest('constructor - initial history is not empty', () => {\n\t\tassert.throws(() => new HistoryNavigator2([]));\n\t});\n\n\ttest('constructor - capacity limit', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4'], 3);\n\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\t\tassert.strictEqual(testObject.has('1'), false);\n\t});\n\n\ttest('constructor - duplicate values', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4', '3', '2', '1']);\n\n\t\tassert.strictEqual(testObject.current(), '1');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\t});\n\n\ttest('navigation', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\n\t\tassert.strictEqual(testObject.next(), '4');\n\t\tassert.strictEqual(testObject.previous(), '3');\n\t\tassert.strictEqual(testObject.previous(), '2');\n\t\tassert.strictEqual(testObject.previous(), '1');\n\t\tassert.strictEqual(testObject.previous(), '1');\n\n\t\tassert.strictEqual(testObject.current(), '1');\n\t\tassert.strictEqual(testObject.next(), '2');\n\t\tassert.strictEqual(testObject.resetCursor(), '4');\n\t});\n\n\ttest('add', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\t\ttestObject.add('5');\n\n\t\tassert.strictEqual(testObject.current(), '5');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\t});\n\n\ttest('add - existing value', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\t\ttestObject.add('2');\n\n\t\tassert.strictEqual(testObject.current(), '2');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\n\t\tassert.strictEqual(testObject.previous(), '4');\n\t\tassert.strictEqual(testObject.previous(), '3');\n\t\tassert.strictEqual(testObject.previous(), '1');\n\t});\n\n\ttest('replaceLast', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\t\ttestObject.replaceLast('5');\n\n\t\tassert.strictEqual(testObject.current(), '5');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\t\tassert.strictEqual(testObject.has('4'), false);\n\n\t\tassert.strictEqual(testObject.previous(), '3');\n\t\tassert.strictEqual(testObject.previous(), '2');\n\t\tassert.strictEqual(testObject.previous(), '1');\n\t});\n\n\ttest('replaceLast - existing value', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\t\ttestObject.replaceLast('2');\n\n\t\tassert.strictEqual(testObject.current(), '2');\n\t\tassert.strictEqual(testObject.isAtEnd(), true);\n\t\tassert.strictEqual(testObject.has('4'), false);\n\n\t\tassert.strictEqual(testObject.previous(), '3');\n\t\tassert.strictEqual(testObject.previous(), '1');\n\t});\n\n\ttest('prepend', () => {\n\t\tconst testObject = new HistoryNavigator2(['1', '2', '3', '4']);\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.ok(testObject.isAtEnd());\n\t\tassert.deepStrictEqual(Array.from(testObject), ['1', '2', '3', '4']);\n\n\t\ttestObject.prepend('0');\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.ok(testObject.isAtEnd());\n\t\tassert.deepStrictEqual(Array.from(testObject), ['0', '1', '2', '3', '4']);\n\n\t\ttestObject.prepend('2');\n\t\tassert.strictEqual(testObject.current(), '4');\n\t\tassert.ok(testObject.isAtEnd());\n\t\tassert.deepStrictEqual(Array.from(testObject), ['0', '1', '2', '3', '4']);\n\t});\n\n});\n"],
  "mappings": "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",
  "names": []
}
