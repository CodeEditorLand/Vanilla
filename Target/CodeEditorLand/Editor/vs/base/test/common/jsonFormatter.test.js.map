{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/jsonFormatter.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport * as Formatter from '../../common/jsonFormatter.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('JSON - formatter', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction format(content: string, expected: string, insertSpaces = true) {\n\t\tlet range: Formatter.Range | undefined = undefined;\n\t\tconst rangeStart = content.indexOf('|');\n\t\tconst rangeEnd = content.lastIndexOf('|');\n\t\tif (rangeStart !== -1 && rangeEnd !== -1) {\n\t\t\tcontent = content.substring(0, rangeStart) + content.substring(rangeStart + 1, rangeEnd) + content.substring(rangeEnd + 1);\n\t\t\trange = { offset: rangeStart, length: rangeEnd - rangeStart };\n\t\t}\n\n\t\tconst edits = Formatter.format(content, range, { tabSize: 2, insertSpaces: insertSpaces, eol: '\\n' });\n\n\t\tlet lastEditOffset = content.length;\n\t\tfor (let i = edits.length - 1; i >= 0; i--) {\n\t\t\tconst edit = edits[i];\n\t\t\tassert(edit.offset >= 0 && edit.length >= 0 && edit.offset + edit.length <= content.length);\n\t\t\tassert(typeof edit.content === 'string');\n\t\t\tassert(lastEditOffset >= edit.offset + edit.length); // make sure all edits are ordered\n\t\t\tlastEditOffset = edit.offset;\n\t\t\tcontent = content.substring(0, edit.offset) + edit.content + content.substring(edit.offset + edit.length);\n\t\t}\n\n\t\tassert.strictEqual(content, expected);\n\t}\n\n\ttest('object - single property', () => {\n\t\tconst content = [\n\t\t\t'{\"x\" : 1}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"x\": 1',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('object - multiple properties', () => {\n\t\tconst content = [\n\t\t\t'{\"x\" : 1,  \"y\" : \"foo\", \"z\"  : true}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"x\": 1,',\n\t\t\t'  \"y\": \"foo\",',\n\t\t\t'  \"z\": true',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('object - no properties ', () => {\n\t\tconst content = [\n\t\t\t'{\"x\" : {    },  \"y\" : {}}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"x\": {},',\n\t\t\t'  \"y\": {}',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('object - nesting', () => {\n\t\tconst content = [\n\t\t\t'{\"x\" : {  \"y\" : { \"z\"  : { }}, \"a\": true}}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"x\": {',\n\t\t\t'    \"y\": {',\n\t\t\t'      \"z\": {}',\n\t\t\t'    },',\n\t\t\t'    \"a\": true',\n\t\t\t'  }',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('array - single items', () => {\n\t\tconst content = [\n\t\t\t'[\"[]\"]'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[',\n\t\t\t'  \"[]\"',\n\t\t\t']'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('array - multiple items', () => {\n\t\tconst content = [\n\t\t\t'[true,null,1.2]'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[',\n\t\t\t'  true,',\n\t\t\t'  null,',\n\t\t\t'  1.2',\n\t\t\t']'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('array - no items', () => {\n\t\tconst content = [\n\t\t\t'[      ]'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[]'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('array - nesting', () => {\n\t\tconst content = [\n\t\t\t'[ [], [ [ {} ], \"a\" ]  ]'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[',\n\t\t\t'  [],',\n\t\t\t'  [',\n\t\t\t'    [',\n\t\t\t'      {}',\n\t\t\t'    ],',\n\t\t\t'    \"a\"',\n\t\t\t'  ]',\n\t\t\t']',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('syntax errors', () => {\n\t\tconst content = [\n\t\t\t'[ null 1.2 ]'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[',\n\t\t\t'  null 1.2',\n\t\t\t']',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('empty lines', () => {\n\t\tconst content = [\n\t\t\t'{',\n\t\t\t'\"a\": true,',\n\t\t\t'',\n\t\t\t'\"b\": true',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'\\t\"a\": true,',\n\t\t\t'\\t\"b\": true',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected, false);\n\t});\n\ttest('single line comment', () => {\n\t\tconst content = [\n\t\t\t'[ ',\n\t\t\t'//comment',\n\t\t\t'\"foo\", \"bar\"',\n\t\t\t'] '\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[',\n\t\t\t'  //comment',\n\t\t\t'  \"foo\",',\n\t\t\t'  \"bar\"',\n\t\t\t']',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('block line comment', () => {\n\t\tconst content = [\n\t\t\t'[{',\n\t\t\t'        /*comment*/     ',\n\t\t\t'\"foo\" : true',\n\t\t\t'}] '\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[',\n\t\t\t'  {',\n\t\t\t'    /*comment*/',\n\t\t\t'    \"foo\": true',\n\t\t\t'  }',\n\t\t\t']',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('single line comment on same line', () => {\n\t\tconst content = [\n\t\t\t' {  ',\n\t\t\t'        \"a\": {}// comment    ',\n\t\t\t' } '\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"a\": {} // comment    ',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('single line comment on same line 2', () => {\n\t\tconst content = [\n\t\t\t'{ //comment',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{ //comment',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('block comment on same line', () => {\n\t\tconst content = [\n\t\t\t'{      \"a\": {}, /*comment*/    ',\n\t\t\t'        /*comment*/ \"b\": {},    ',\n\t\t\t'        \"c\": {/*comment*/}    } ',\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"a\": {}, /*comment*/',\n\t\t\t'  /*comment*/ \"b\": {},',\n\t\t\t'  \"c\": { /*comment*/}',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('block comment on same line advanced', () => {\n\t\tconst content = [\n\t\t\t' {       \"d\": [',\n\t\t\t'             null',\n\t\t\t'        ] /*comment*/',\n\t\t\t'        ,\"e\": /*comment*/ [null] }',\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"d\": [',\n\t\t\t'    null',\n\t\t\t'  ] /*comment*/,',\n\t\t\t'  \"e\": /*comment*/ [',\n\t\t\t'    null',\n\t\t\t'  ]',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('multiple block comments on same line', () => {\n\t\tconst content = [\n\t\t\t'{      \"a\": {} /*comment*/, /*comment*/   ',\n\t\t\t'        /*comment*/ \"b\": {}  /*comment*/  } '\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"a\": {} /*comment*/, /*comment*/',\n\t\t\t'  /*comment*/ \"b\": {} /*comment*/',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('multiple mixed comments on same line', () => {\n\t\tconst content = [\n\t\t\t'[ /*comment*/  /*comment*/   // comment ',\n\t\t\t']'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'[ /*comment*/ /*comment*/ // comment ',\n\t\t\t']'\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('range', () => {\n\t\tconst content = [\n\t\t\t'{ \"a\": {},',\n\t\t\t'|\"b\": [null, null]|',\n\t\t\t'} '\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{ \"a\": {},',\n\t\t\t'\"b\": [',\n\t\t\t'  null,',\n\t\t\t'  null',\n\t\t\t']',\n\t\t\t'} ',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('range with existing indent', () => {\n\t\tconst content = [\n\t\t\t'{ \"a\": {},',\n\t\t\t'   |\"b\": [null],',\n\t\t\t'\"c\": {}',\n\t\t\t'}|'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{ \"a\": {},',\n\t\t\t'   \"b\": [',\n\t\t\t'    null',\n\t\t\t'  ],',\n\t\t\t'  \"c\": {}',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('range with existing indent - tabs', () => {\n\t\tconst content = [\n\t\t\t'{ \"a\": {},',\n\t\t\t'|  \"b\": [null],   ',\n\t\t\t'\"c\": {}',\n\t\t\t'} |    '\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{ \"a\": {},',\n\t\t\t'\\t\"b\": [',\n\t\t\t'\\t\\tnull',\n\t\t\t'\\t],',\n\t\t\t'\\t\"c\": {}',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected, false);\n\t});\n\n\n\ttest('block comment none-line breaking symbols', () => {\n\t\tconst content = [\n\t\t\t'{ \"a\": [ 1',\n\t\t\t'/* comment */',\n\t\t\t', 2',\n\t\t\t'/* comment */',\n\t\t\t']',\n\t\t\t'/* comment */',\n\t\t\t',',\n\t\t\t' \"b\": true',\n\t\t\t'/* comment */',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"a\": [',\n\t\t\t'    1',\n\t\t\t'    /* comment */',\n\t\t\t'    ,',\n\t\t\t'    2',\n\t\t\t'    /* comment */',\n\t\t\t'  ]',\n\t\t\t'  /* comment */',\n\t\t\t'  ,',\n\t\t\t'  \"b\": true',\n\t\t\t'  /* comment */',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\ttest('line comment after none-line breaking symbols', () => {\n\t\tconst content = [\n\t\t\t'{ \"a\":',\n\t\t\t'// comment',\n\t\t\t'null,',\n\t\t\t' \"b\"',\n\t\t\t'// comment',\n\t\t\t': null',\n\t\t\t'// comment',\n\t\t\t'}'\n\t\t].join('\\n');\n\n\t\tconst expected = [\n\t\t\t'{',\n\t\t\t'  \"a\":',\n\t\t\t'  // comment',\n\t\t\t'  null,',\n\t\t\t'  \"b\"',\n\t\t\t'  // comment',\n\t\t\t'  : null',\n\t\t\t'  // comment',\n\t\t\t'}',\n\t\t].join('\\n');\n\n\t\tformat(content, expected);\n\t});\n\n\ttest('toFormattedString', () => {\n\t\tconst obj = {\n\t\t\ta: { b: 1, d: ['hello'] }\n\t\t};\n\n\n\t\tconst getExpected = (tab: string, eol: string) => {\n\t\t\treturn [\n\t\t\t\t`{`,\n\t\t\t\t`${tab}\"a\": {`,\n\t\t\t\t`${tab}${tab}\"b\": 1,`,\n\t\t\t\t`${tab}${tab}\"d\": [`,\n\t\t\t\t`${tab}${tab}${tab}\"hello\"`,\n\t\t\t\t`${tab}${tab}]`,\n\t\t\t\t`${tab}}`,\n\t\t\t\t'}'\n\t\t\t].join(eol);\n\t\t};\n\n\t\tlet actual = Formatter.toFormattedString(obj, { insertSpaces: true, tabSize: 2, eol: '\\n' });\n\t\tassert.strictEqual(actual, getExpected('  ', '\\n'));\n\n\t\tactual = Formatter.toFormattedString(obj, { insertSpaces: true, tabSize: 2, eol: '\\r\\n' });\n\t\tassert.strictEqual(actual, getExpected('  ', '\\r\\n'));\n\n\t\tactual = Formatter.toFormattedString(obj, { insertSpaces: false, eol: '\\r\\n' });\n\t\tassert.strictEqual(actual, getExpected('\\t', '\\r\\n'));\n\t});\n});\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,YAAY,eAAe;AAC3B,SAAS,+CAA+C;AAExD,MAAM,oBAAoB,MAAM;AAE/B,0CAAwC;AAExC,WAAS,OAAO,SAAiB,UAAkB,eAAe,MAAM;AACvE,QAAI,QAAqC;AACzC,UAAM,aAAa,QAAQ,QAAQ,GAAG;AACtC,UAAM,WAAW,QAAQ,YAAY,GAAG;AACxC,QAAI,eAAe,MAAM,aAAa,IAAI;AACzC,gBAAU,QAAQ,UAAU,GAAG,UAAU,IAAI,QAAQ,UAAU,aAAa,GAAG,QAAQ,IAAI,QAAQ,UAAU,WAAW,CAAC;AACzH,cAAQ,EAAE,QAAQ,YAAY,QAAQ,WAAW,WAAW;AAAA,IAC7D;AAEA,UAAM,QAAQ,UAAU,OAAO,SAAS,OAAO,EAAE,SAAS,GAAG,cAA4B,KAAK,KAAK,CAAC;AAEpG,QAAI,iBAAiB,QAAQ;AAC7B,aAAS,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAC3C,YAAM,OAAO,MAAM,CAAC;AACpB,aAAO,KAAK,UAAU,KAAK,KAAK,UAAU,KAAK,KAAK,SAAS,KAAK,UAAU,QAAQ,MAAM;AAC1F,aAAO,OAAO,KAAK,YAAY,QAAQ;AACvC,aAAO,kBAAkB,KAAK,SAAS,KAAK,MAAM;AAClD,uBAAiB,KAAK;AACtB,gBAAU,QAAQ,UAAU,GAAG,KAAK,MAAM,IAAI,KAAK,UAAU,QAAQ,UAAU,KAAK,SAAS,KAAK,MAAM;AAAA,IACzG;AAEA,WAAO,YAAY,SAAS,QAAQ;AAAA,EACrC;AAtBS;AAwBT,OAAK,4BAA4B,MAAM;AACtC,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,gCAAgC,MAAM;AAC1C,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,2BAA2B,MAAM;AACrC,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,oBAAoB,MAAM;AAC9B,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,wBAAwB,MAAM;AAClC,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,0BAA0B,MAAM;AACpC,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,oBAAoB,MAAM;AAC9B,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,mBAAmB,MAAM;AAC7B,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,UAAM,UAAU;AAAA,MACf;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,eAAe,MAAM;AACzB,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,UAAU,KAAK;AAAA,EAChC,CAAC;AACD,OAAK,uBAAuB,MAAM;AACjC,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,sBAAsB,MAAM;AAChC,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,oCAAoC,MAAM;AAC9C,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,sCAAsC,MAAM;AAChD,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,8BAA8B,MAAM;AACxC,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,uCAAuC,MAAM;AACjD,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,wCAAwC,MAAM;AAClD,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,wCAAwC,MAAM;AAClD,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,SAAS,MAAM;AACnB,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,8BAA8B,MAAM;AACxC,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,qCAAqC,MAAM;AAC/C,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,UAAU,KAAK;AAAA,EAChC,CAAC;AAGD,OAAK,4CAA4C,MAAM;AACtD,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AACD,OAAK,iDAAiD,MAAM;AAC3D,UAAM,UAAU;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,UAAM,WAAW;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,EAAE,KAAK,IAAI;AAEX,WAAO,SAAS,QAAQ;AAAA,EACzB,CAAC;AAED,OAAK,qBAAqB,MAAM;AAC/B,UAAM,MAAM;AAAA,MACX,GAAG,EAAE,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE;AAAA,IACzB;AAGA,UAAM,cAAc,wBAAC,KAAa,QAAgB;AACjD,aAAO;AAAA,QACN;AAAA,QACA,GAAG,GAAG;AAAA,QACN,GAAG,GAAG,GAAG,GAAG;AAAA,QACZ,GAAG,GAAG,GAAG,GAAG;AAAA,QACZ,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAAA,QAClB,GAAG,GAAG,GAAG,GAAG;AAAA,QACZ,GAAG,GAAG;AAAA,QACN;AAAA,MACD,EAAE,KAAK,GAAG;AAAA,IACX,GAXoB;AAapB,QAAI,SAAS,UAAU,kBAAkB,KAAK,EAAE,cAAc,MAAM,SAAS,GAAG,KAAK,KAAK,CAAC;AAC3F,WAAO,YAAY,QAAQ,YAAY,MAAM,IAAI,CAAC;AAElD,aAAS,UAAU,kBAAkB,KAAK,EAAE,cAAc,MAAM,SAAS,GAAG,KAAK,OAAO,CAAC;AACzF,WAAO,YAAY,QAAQ,YAAY,MAAM,MAAM,CAAC;AAEpD,aAAS,UAAU,kBAAkB,KAAK,EAAE,cAAc,OAAO,KAAK,OAAO,CAAC;AAC9E,WAAO,YAAY,QAAQ,YAAY,KAAM,MAAM,CAAC;AAAA,EACrD,CAAC;AACF,CAAC;",
  "names": []
}
