{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/linkedText.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { parseLinkedText } from '../../common/linkedText.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('LinkedText', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('parses correctly', () => {\n\t\tassert.deepStrictEqual(parseLinkedText('').nodes, []);\n\t\tassert.deepStrictEqual(parseLinkedText('hello').nodes, ['hello']);\n\t\tassert.deepStrictEqual(parseLinkedText('hello there').nodes, ['hello there']);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href).').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \"and a title\").').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a title' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \\'and a title\\').').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a title' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \"and a \\'title\\'\").').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a \\'title\\'' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \\'and a \"title\"\\').').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a \"title\"' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](random stuff).').nodes, [\n\t\t\t'Some message with [link text](random stuff).'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [https link](https://link.href).').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'https link', href: 'https://link.href' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [https link](https:).').nodes, [\n\t\t\t'Some message with [https link](https:).'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [a command](command:foobar).').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'a command', href: 'command:foobar' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [a command](command:).').nodes, [\n\t\t\t'Some message with [a command](command:).'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('link [one](command:foo \"nice\") and link [two](http://foo)...').nodes, [\n\t\t\t'link ',\n\t\t\t{ label: 'one', href: 'command:foo', title: 'nice' },\n\t\t\t' and link ',\n\t\t\t{ label: 'two', href: 'http://foo' },\n\t\t\t'...'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('link\\n[one](command:foo \"nice\")\\nand link [two](http://foo)...').nodes, [\n\t\t\t'link\\n',\n\t\t\t{ label: 'one', href: 'command:foo', title: 'nice' },\n\t\t\t'\\nand link ',\n\t\t\t{ label: 'two', href: 'http://foo' },\n\t\t\t'...'\n\t\t]);\n\t});\n\n\ttest('Should match non-greedily', () => {\n\t\tassert.deepStrictEqual(parseLinkedText('a [link text 1](http://link.href \"title1\") b [link text 2](http://link.href \"title2\") c').nodes, [\n\t\t\t'a ',\n\t\t\t{ label: 'link text 1', href: 'http://link.href', title: 'title1' },\n\t\t\t' b ',\n\t\t\t{ label: 'link text 2', href: 'http://link.href', title: 'title2' },\n\t\t\t' c',\n\t\t]);\n\t});\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,uBAAuB;AAChC,SAAS,+CAA+C;AAExD,MAAM,cAAc,MAAM;AACzB,0CAAwC;AAExC,OAAK,oBAAoB,MAAM;AAC9B,WAAO,gBAAgB,gBAAgB,EAAE,EAAE,OAAO,CAAC,CAAC;AACpD,WAAO,gBAAgB,gBAAgB,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC;AAChE,WAAO,gBAAgB,gBAAgB,aAAa,EAAE,OAAO,CAAC,aAAa,CAAC;AAC5E,WAAO,gBAAgB,gBAAgB,kDAAkD,EAAE,OAAO;AAAA,MACjG;AAAA,MACA,EAAE,OAAO,aAAa,MAAM,mBAAmB;AAAA,MAC/C;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,gEAAgE,EAAE,OAAO;AAAA,MAC/G;AAAA,MACA,EAAE,OAAO,aAAa,MAAM,oBAAoB,OAAO,cAAc;AAAA,MACrE;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,gEAAkE,EAAE,OAAO;AAAA,MACjH;AAAA,MACA,EAAE,OAAO,aAAa,MAAM,oBAAoB,OAAO,cAAc;AAAA,MACrE;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,kEAAoE,EAAE,OAAO;AAAA,MACnH;AAAA,MACA,EAAE,OAAO,aAAa,MAAM,oBAAoB,OAAO,gBAAkB;AAAA,MACzE;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,kEAAoE,EAAE,OAAO;AAAA,MACnH;AAAA,MACA,EAAE,OAAO,aAAa,MAAM,oBAAoB,OAAO,gBAAgB;AAAA,MACvE;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,8CAA8C,EAAE,OAAO;AAAA,MAC7F;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,oDAAoD,EAAE,OAAO;AAAA,MACnG;AAAA,MACA,EAAE,OAAO,cAAc,MAAM,oBAAoB;AAAA,MACjD;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,yCAAyC,EAAE,OAAO;AAAA,MACxF;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,gDAAgD,EAAE,OAAO;AAAA,MAC/F;AAAA,MACA,EAAE,OAAO,aAAa,MAAM,iBAAiB;AAAA,MAC7C;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,0CAA0C,EAAE,OAAO;AAAA,MACzF;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,8DAA8D,EAAE,OAAO;AAAA,MAC7G;AAAA,MACA,EAAE,OAAO,OAAO,MAAM,eAAe,OAAO,OAAO;AAAA,MACnD;AAAA,MACA,EAAE,OAAO,OAAO,MAAM,aAAa;AAAA,MACnC;AAAA,IACD,CAAC;AACD,WAAO,gBAAgB,gBAAgB,gEAAgE,EAAE,OAAO;AAAA,MAC/G;AAAA,MACA,EAAE,OAAO,OAAO,MAAM,eAAe,OAAO,OAAO;AAAA,MACnD;AAAA,MACA,EAAE,OAAO,OAAO,MAAM,aAAa;AAAA,MACnC;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,6BAA6B,MAAM;AACvC,WAAO,gBAAgB,gBAAgB,yFAAyF,EAAE,OAAO;AAAA,MACxI;AAAA,MACA,EAAE,OAAO,eAAe,MAAM,oBAAoB,OAAO,SAAS;AAAA,MAClE;AAAA,MACA,EAAE,OAAO,eAAe,MAAM,oBAAoB,OAAO,SAAS;AAAA,MAClE;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AACF,CAAC;",
  "names": []
}
