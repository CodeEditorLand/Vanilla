{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/linkedList.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { LinkedList } from '../../common/linkedList.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('LinkedList', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction assertElements<E>(list: LinkedList<E>, ...elements: E[]) {\n\n\t\t// check size\n\t\tassert.strictEqual(list.size, elements.length);\n\n\t\t// assert toArray\n\t\tassert.deepStrictEqual(Array.from(list), elements);\n\n\t\t// assert Symbol.iterator (1)\n\t\tassert.deepStrictEqual([...list], elements);\n\n\t\t// assert Symbol.iterator (2)\n\t\tfor (const item of list) {\n\t\t\tassert.strictEqual(item, elements.shift());\n\t\t}\n\t\tassert.strictEqual(elements.length, 0);\n\t}\n\n\ttest('Push/Iter', () => {\n\t\tconst list = new LinkedList<number>();\n\t\tlist.push(0);\n\t\tlist.push(1);\n\t\tlist.push(2);\n\t\tassertElements(list, 0, 1, 2);\n\t});\n\n\ttest('Push/Remove', () => {\n\t\tlet list = new LinkedList<number>();\n\t\tlet disp = list.push(0);\n\t\tlist.push(1);\n\t\tlist.push(2);\n\t\tdisp();\n\t\tassertElements(list, 1, 2);\n\n\t\tlist = new LinkedList<number>();\n\t\tlist.push(0);\n\t\tdisp = list.push(1);\n\t\tlist.push(2);\n\t\tdisp();\n\t\tassertElements(list, 0, 2);\n\n\t\tlist = new LinkedList<number>();\n\t\tlist.push(0);\n\t\tlist.push(1);\n\t\tdisp = list.push(2);\n\t\tdisp();\n\t\tassertElements(list, 0, 1);\n\n\t\tlist = new LinkedList<number>();\n\t\tlist.push(0);\n\t\tlist.push(1);\n\t\tdisp = list.push(2);\n\t\tdisp();\n\t\tdisp();\n\t\tassertElements(list, 0, 1);\n\t});\n\n\ttest('Push/toArray', () => {\n\t\tconst list = new LinkedList<string>();\n\t\tlist.push('foo');\n\t\tlist.push('bar');\n\t\tlist.push('far');\n\t\tlist.push('boo');\n\n\t\tassertElements(list, 'foo', 'bar', 'far', 'boo');\n\t});\n\n\ttest('unshift/Iter', () => {\n\t\tconst list = new LinkedList<number>();\n\t\tlist.unshift(0);\n\t\tlist.unshift(1);\n\t\tlist.unshift(2);\n\t\tassertElements(list, 2, 1, 0);\n\t});\n\n\ttest('unshift/Remove', () => {\n\t\tlet list = new LinkedList<number>();\n\t\tlet disp = list.unshift(0);\n\t\tlist.unshift(1);\n\t\tlist.unshift(2);\n\t\tdisp();\n\t\tassertElements(list, 2, 1);\n\n\t\tlist = new LinkedList<number>();\n\t\tlist.unshift(0);\n\t\tdisp = list.unshift(1);\n\t\tlist.unshift(2);\n\t\tdisp();\n\t\tassertElements(list, 2, 0);\n\n\t\tlist = new LinkedList<number>();\n\t\tlist.unshift(0);\n\t\tlist.unshift(1);\n\t\tdisp = list.unshift(2);\n\t\tdisp();\n\t\tassertElements(list, 1, 0);\n\t});\n\n\ttest('unshift/toArray', () => {\n\t\tconst list = new LinkedList<string>();\n\t\tlist.unshift('foo');\n\t\tlist.unshift('bar');\n\t\tlist.unshift('far');\n\t\tlist.unshift('boo');\n\t\tassertElements(list, 'boo', 'far', 'bar', 'foo');\n\t});\n\n\ttest('pop/unshift', function () {\n\t\tconst list = new LinkedList<string>();\n\t\tlist.push('a');\n\t\tlist.push('b');\n\n\t\tassertElements(list, 'a', 'b');\n\n\t\tconst a = list.shift();\n\t\tassert.strictEqual(a, 'a');\n\t\tassertElements(list, 'b');\n\n\t\tlist.unshift('a');\n\t\tassertElements(list, 'a', 'b');\n\n\t\tconst b = list.pop();\n\t\tassert.strictEqual(b, 'b');\n\t\tassertElements(list, 'a');\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
