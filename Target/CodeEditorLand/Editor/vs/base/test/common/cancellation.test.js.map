{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/cancellation.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { CancellationToken, CancellationTokenSource } from '../../common/cancellation.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nsuite('CancellationToken', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('None', () => {\n\t\tassert.strictEqual(CancellationToken.None.isCancellationRequested, false);\n\t\tassert.strictEqual(typeof CancellationToken.None.onCancellationRequested, 'function');\n\t});\n\n\ttest('cancel before token', function () {\n\n\t\tconst source = new CancellationTokenSource();\n\t\tassert.strictEqual(source.token.isCancellationRequested, false);\n\t\tsource.cancel();\n\n\t\tassert.strictEqual(source.token.isCancellationRequested, true);\n\n\t\treturn new Promise<void>(resolve => {\n\t\t\tsource.token.onCancellationRequested(() => resolve());\n\t\t});\n\t});\n\n\ttest('cancel happens only once', function () {\n\n\t\tconst source = new CancellationTokenSource();\n\t\tassert.strictEqual(source.token.isCancellationRequested, false);\n\n\t\tlet cancelCount = 0;\n\t\tfunction onCancel() {\n\t\t\tcancelCount += 1;\n\t\t}\n\n\t\tstore.add(source.token.onCancellationRequested(onCancel));\n\n\t\tsource.cancel();\n\t\tsource.cancel();\n\n\t\tassert.strictEqual(cancelCount, 1);\n\t});\n\n\ttest('cancel calls all listeners', function () {\n\n\t\tlet count = 0;\n\n\t\tconst source = new CancellationTokenSource();\n\t\tstore.add(source.token.onCancellationRequested(() => count++));\n\t\tstore.add(source.token.onCancellationRequested(() => count++));\n\t\tstore.add(source.token.onCancellationRequested(() => count++));\n\n\t\tsource.cancel();\n\t\tassert.strictEqual(count, 3);\n\t});\n\n\ttest('token stays the same', function () {\n\n\t\tlet source = new CancellationTokenSource();\n\t\tlet token = source.token;\n\t\tassert.ok(token === source.token); // doesn't change on get\n\n\t\tsource.cancel();\n\t\tassert.ok(token === source.token); // doesn't change after cancel\n\n\t\tsource.cancel();\n\t\tassert.ok(token === source.token); // doesn't change after 2nd cancel\n\n\t\tsource = new CancellationTokenSource();\n\t\tsource.cancel();\n\t\ttoken = source.token;\n\t\tassert.ok(token === source.token); // doesn't change on get\n\t});\n\n\ttest('dispose calls no listeners', function () {\n\n\t\tlet count = 0;\n\n\t\tconst source = new CancellationTokenSource();\n\t\tstore.add(source.token.onCancellationRequested(() => count++));\n\n\t\tsource.dispose();\n\t\tsource.cancel();\n\t\tassert.strictEqual(count, 0);\n\t});\n\n\ttest('dispose calls no listeners (unless told to cancel)', function () {\n\n\t\tlet count = 0;\n\n\t\tconst source = new CancellationTokenSource();\n\t\tstore.add(source.token.onCancellationRequested(() => count++));\n\n\t\tsource.dispose(true);\n\t\t// source.cancel();\n\t\tassert.strictEqual(count, 1);\n\t});\n\n\ttest('dispose does not cancel', function () {\n\t\tconst source = new CancellationTokenSource();\n\t\tsource.dispose();\n\t\tassert.strictEqual(source.token.isCancellationRequested, false);\n\t});\n\n\ttest('parent cancels child', function () {\n\n\t\tconst parent = new CancellationTokenSource();\n\t\tconst child = new CancellationTokenSource(parent.token);\n\n\t\tlet count = 0;\n\t\tstore.add(child.token.onCancellationRequested(() => count++));\n\n\t\tparent.cancel();\n\n\t\tassert.strictEqual(count, 1);\n\t\tassert.strictEqual(child.token.isCancellationRequested, true);\n\t\tassert.strictEqual(parent.token.isCancellationRequested, true);\n\n\t\tchild.dispose();\n\t\tparent.dispose();\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
