import{WellDefinedPrefixTree as n}from"../../common/prefixTree.js";import t from"assert";import{ensureNoDisposablesAreLeakedInTestSuite as o}from"./utils.js";suite("WellDefinedPrefixTree",()=>{let e;o(),setup(()=>{e=new n}),test("find",()=>{const s=["foo","bar"],r=["foo","baz"];e.insert(s,42),e.insert(r,43),t.strictEqual(e.find(s),42),t.strictEqual(e.find(r),43),t.strictEqual(e.find(["foo","baz","bop"]),void 0),t.strictEqual(e.find(["foo"]),void 0)}),test("hasParentOfKey",()=>{const s=["foo","bar"];e.insert(s,42),t.strictEqual(e.hasKeyOrParent(["foo","bar","baz"]),!0),t.strictEqual(e.hasKeyOrParent(["foo","bar"]),!0),t.strictEqual(e.hasKeyOrParent(["foo"]),!1),t.strictEqual(e.hasKeyOrParent(["baz"]),!1)}),test("hasKeyOrChildren",()=>{const s=["foo","bar"];e.insert(s,42),t.strictEqual(e.hasKeyOrChildren([]),!0),t.strictEqual(e.hasKeyOrChildren(["foo"]),!0),t.strictEqual(e.hasKeyOrChildren(["foo","bar"]),!0),t.strictEqual(e.hasKeyOrChildren(["foo","bar","baz"]),!1)}),test("hasKey",()=>{const s=["foo","bar"];e.insert(s,42),t.strictEqual(e.hasKey(s),!0),t.strictEqual(e.hasKey(["foo"]),!1),t.strictEqual(e.hasKey(["baz"]),!1),t.strictEqual(e.hasKey(["foo","bar","baz"]),!1)}),test("size",()=>{const s=["foo","bar"],r=["foo","baz"];t.strictEqual(e.size,0),e.insert(s,42),t.strictEqual(e.size,1),e.insert(r,43),t.strictEqual(e.size,2),e.insert(r,44),t.strictEqual(e.size,2)}),test("mutate",()=>{const s=["foo","bar"],r=["foo","baz"];e.insert(s,42),e.insert(r,43),e.mutate(s,i=>(t.strictEqual(i,42),44)),t.strictEqual(e.find(s),44),t.strictEqual(e.find(r),43)}),test("delete",()=>{const s=["foo","bar"],r=["foo","baz"];e.insert(s,42),e.insert(r,43),t.strictEqual(e.size,2),t.strictEqual(e.delete(s),42),t.strictEqual(e.size,1),t.strictEqual(e.find(s),void 0),t.strictEqual(e.find(r),43),t.strictEqual(e.delete(r),43),t.strictEqual(e.size,0),t.strictEqual(e.find(s),void 0),t.strictEqual(e.find(r),void 0),e.delete(r),t.strictEqual(e.size,0)}),test("delete child",()=>{const s=["foo","bar"],r=["foo","bar","baz"];e.insert(s,42),e.insert(r,43),t.strictEqual(e.size,2),t.strictEqual(e.delete(r),43),t.strictEqual(e.size,1),t.strictEqual(e.find(s),42),t.strictEqual(e.find(r),void 0)}),test("delete noops if deleting parent",()=>{const s=["foo","bar"],r=["foo","bar","baz"];e.insert(r,43),t.strictEqual(e.size,1),t.strictEqual(e.delete(s),void 0),t.strictEqual(e.size,1),t.strictEqual(e.find(r),43),t.strictEqual(e.find(s),void 0)}),test("values",()=>{const s=["foo","bar"],r=["foo","baz"];e.insert(s,42),e.insert(r,43),t.deepStrictEqual([...e.values()],[43,42])}),test("delete recursive",()=>{const s=["foo","bar"],r=["foo","bar","baz"],i=["foo","bar","baz2","baz3"],a=["foo","bar2"];e.insert(s,42),e.insert(r,43),e.insert(i,44),e.insert(a,45),t.strictEqual(e.size,4),t.deepStrictEqual([...e.deleteRecursive(s)],[42,44,43]),t.strictEqual(e.size,1),t.deepStrictEqual([...e.deleteRecursive(s)],[]),t.strictEqual(e.size,1),t.deepStrictEqual([...e.deleteRecursive(a)],[45]),t.strictEqual(e.size,0)})});
