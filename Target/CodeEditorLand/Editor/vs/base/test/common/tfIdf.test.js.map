{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/tfIdf.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../common/cancellation.js';\nimport { TfIdfCalculator, TfIdfDocument, TfIdfScore } from '../../common/tfIdf.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\n/**\n * Generates all permutations of an array.\n *\n * This is useful for testing to make sure order does not effect the result.\n */\nfunction permutate<T>(arr: T[]): T[][] {\n\tif (arr.length === 0) {\n\t\treturn [[]];\n\t}\n\n\tconst result: T[][] = [];\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst rest = [...arr.slice(0, i), ...arr.slice(i + 1)];\n\t\tconst permutationsRest = permutate(rest);\n\t\tfor (let j = 0; j < permutationsRest.length; j++) {\n\t\t\tresult.push([arr[i], ...permutationsRest[j]]);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction assertScoreOrdersEqual(actualScores: TfIdfScore[], expectedScoreKeys: string[]): void {\n\tactualScores.sort((a, b) => (b.score - a.score) || a.key.localeCompare(b.key));\n\tassert.strictEqual(actualScores.length, expectedScoreKeys.length);\n\tfor (let i = 0; i < expectedScoreKeys.length; i++) {\n\t\tassert.strictEqual(actualScores[i].key, expectedScoreKeys[i]);\n\t}\n}\n\nsuite('TF-IDF Calculator', function () {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\ttest('Should return no scores when no documents are given', () => {\n\t\tconst tfidf = new TfIdfCalculator();\n\t\tconst scores = tfidf.calculateScores('something', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, []);\n\t});\n\n\ttest('Should return no scores for term not in document', () => {\n\t\tconst tfidf = new TfIdfCalculator().updateDocuments([\n\t\t\tmakeDocument('A', 'cat dog fish'),\n\t\t]);\n\t\tconst scores = tfidf.calculateScores('elepant', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, []);\n\t});\n\n\ttest('Should return scores for document with exact match', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('A', 'cat dog cat'),\n\t\t\tmakeDocument('B', 'cat fish'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['A']);\n\t\t}\n\t});\n\n\ttest('Should return document with more matches first', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'cat dog cat'),\n\t\t\tmakeDocument('/B', 'cat fish'),\n\t\t\tmakeDocument('/C', 'frog'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\t\t}\n\t});\n\n\ttest('Should return document with more matches first when term appears in all documents', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'cat dog cat cat'),\n\t\t\tmakeDocument('/B', 'cat fish'),\n\t\t\tmakeDocument('/C', 'frog cat cat'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/C', '/B']);\n\t\t}\n\t});\n\n\ttest('Should weigh less common term higher', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'cat dog cat'),\n\t\t\tmakeDocument('/B', 'fish'),\n\t\t\tmakeDocument('/C', 'cat cat cat cat'),\n\t\t\tmakeDocument('/D', 'cat fish')\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat the dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/C', '/D']);\n\t\t}\n\t});\n\n\ttest('Should weigh chunks with less common terms higher', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/B', '/A']);\n\t\t}\n\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B', '/B']);\n\t\t}\n\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat the dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/B', '/A', '/B']);\n\t\t}\n\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('lake fish', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A']);\n\t\t}\n\t});\n\n\ttest('Should ignore case and punctuation', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'Cat doG.cat'),\n\t\t\tmakeDocument('/B', 'cAt fiSH'),\n\t\t\tmakeDocument('/C', 'frOg'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('. ,CaT!  ', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\t\t}\n\t});\n\n\ttest('Should match on camelCase words', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'catDog cat'),\n\t\t\tmakeDocument('/B', 'fishCatFish'),\n\t\t\tmakeDocument('/C', 'frogcat'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('catDOG', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\t\t}\n\t});\n\n\ttest('Should not match document after delete', () => {\n\t\tconst docA = makeDocument('/A', 'cat dog cat');\n\t\tconst docB = makeDocument('/B', 'cat fish');\n\t\tconst docC = makeDocument('/C', 'frog');\n\n\t\tconst tfidf = new TfIdfCalculator().updateDocuments([docA, docB, docC]);\n\t\tlet scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\n\t\ttfidf.deleteDocument(docA.key);\n\t\tscores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, ['/B']);\n\n\t\ttfidf.deleteDocument(docC.key);\n\t\tscores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, ['/B']);\n\n\t\ttfidf.deleteDocument(docB.key);\n\t\tscores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, []);\n\t});\n});\n\nfunction makeDocument(key: string, content: string | string[]): TfIdfDocument {\n\treturn {\n\t\tkey,\n\t\ttextChunks: Array.isArray(content) ? content : [content],\n\t};\n}\n"],
  "mappings": "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",
  "names": []
}
