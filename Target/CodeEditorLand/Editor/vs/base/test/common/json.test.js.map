{
  "version": 3,
  "sources": ["../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/test/common/json.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport assert from 'assert';\nimport { createScanner, Node, parse, ParseError, ParseErrorCode, ParseOptions, parseTree, ScanError, SyntaxKind } from '../../common/json.js';\nimport { getParseErrorMessage } from '../../common/jsonErrorMessages.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from './utils.js';\n\nfunction assertKinds(text: string, ...kinds: SyntaxKind[]): void {\n\tconst scanner = createScanner(text);\n\tlet kind: SyntaxKind;\n\twhile ((kind = scanner.scan()) !== SyntaxKind.EOF) {\n\t\tassert.strictEqual(kind, kinds.shift());\n\t}\n\tassert.strictEqual(kinds.length, 0);\n}\nfunction assertScanError(text: string, expectedKind: SyntaxKind, scanError: ScanError): void {\n\tconst scanner = createScanner(text);\n\tscanner.scan();\n\tassert.strictEqual(scanner.getToken(), expectedKind);\n\tassert.strictEqual(scanner.getTokenError(), scanError);\n}\n\nfunction assertValidParse(input: string, expected: any, options?: ParseOptions): void {\n\tconst errors: ParseError[] = [];\n\tconst actual = parse(input, errors, options);\n\n\tif (errors.length !== 0) {\n\t\tassert(false, getParseErrorMessage(errors[0].error));\n\t}\n\tassert.deepStrictEqual(actual, expected);\n}\n\nfunction assertInvalidParse(input: string, expected: any, options?: ParseOptions): void {\n\tconst errors: ParseError[] = [];\n\tconst actual = parse(input, errors, options);\n\n\tassert(errors.length > 0);\n\tassert.deepStrictEqual(actual, expected);\n}\n\nfunction assertTree(input: string, expected: any, expectedErrors: number[] = [], options?: ParseOptions): void {\n\tconst errors: ParseError[] = [];\n\tconst actual = parseTree(input, errors, options);\n\n\tassert.deepStrictEqual(errors.map(e => e.error, expected), expectedErrors);\n\tconst checkParent = (node: Node) => {\n\t\tif (node.children) {\n\t\t\tfor (const child of node.children) {\n\t\t\t\tassert.strictEqual(node, child.parent);\n\t\t\t\tdelete (<any>child).parent; // delete to avoid recursion in deep equal\n\t\t\t\tcheckParent(child);\n\t\t\t}\n\t\t}\n\t};\n\tcheckParent(actual);\n\n\tassert.deepStrictEqual(actual, expected);\n}\n\nsuite('JSON', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('tokens', () => {\n\t\tassertKinds('{', SyntaxKind.OpenBraceToken);\n\t\tassertKinds('}', SyntaxKind.CloseBraceToken);\n\t\tassertKinds('[', SyntaxKind.OpenBracketToken);\n\t\tassertKinds(']', SyntaxKind.CloseBracketToken);\n\t\tassertKinds(':', SyntaxKind.ColonToken);\n\t\tassertKinds(',', SyntaxKind.CommaToken);\n\t});\n\n\ttest('comments', () => {\n\t\tassertKinds('// this is a comment', SyntaxKind.LineCommentTrivia);\n\t\tassertKinds('// this is a comment\\n', SyntaxKind.LineCommentTrivia, SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('/* this is a comment*/', SyntaxKind.BlockCommentTrivia);\n\t\tassertKinds('/* this is a \\r\\ncomment*/', SyntaxKind.BlockCommentTrivia);\n\t\tassertKinds('/* this is a \\ncomment*/', SyntaxKind.BlockCommentTrivia);\n\n\t\t// unexpected end\n\t\tassertKinds('/* this is a', SyntaxKind.BlockCommentTrivia);\n\t\tassertKinds('/* this is a \\ncomment', SyntaxKind.BlockCommentTrivia);\n\n\t\t// broken comment\n\t\tassertKinds('/ ttt', SyntaxKind.Unknown, SyntaxKind.Trivia, SyntaxKind.Unknown);\n\t});\n\n\ttest('strings', () => {\n\t\tassertKinds('\"test\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\\"\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\/\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\b\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\f\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\n\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\r\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\t\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\\\v\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\\u88ff\"', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"\u200B\\u2028\"', SyntaxKind.StringLiteral);\n\n\t\t// unexpected end\n\t\tassertKinds('\"test', SyntaxKind.StringLiteral);\n\t\tassertKinds('\"test\\n\"', SyntaxKind.StringLiteral, SyntaxKind.LineBreakTrivia, SyntaxKind.StringLiteral);\n\n\t\t// invalid characters\n\t\tassertScanError('\"\\t\"', SyntaxKind.StringLiteral, ScanError.InvalidCharacter);\n\t\tassertScanError('\"\\t \"', SyntaxKind.StringLiteral, ScanError.InvalidCharacter);\n\t});\n\n\ttest('numbers', () => {\n\t\tassertKinds('0', SyntaxKind.NumericLiteral);\n\t\tassertKinds('0.1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('-0.1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('-1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('1', SyntaxKind.NumericLiteral);\n\t\tassertKinds('123456789', SyntaxKind.NumericLiteral);\n\t\tassertKinds('10', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90E+123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90e+123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90e-123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90E-123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90E123', SyntaxKind.NumericLiteral);\n\t\tassertKinds('90e123', SyntaxKind.NumericLiteral);\n\n\t\t// zero handling\n\t\tassertKinds('01', SyntaxKind.NumericLiteral, SyntaxKind.NumericLiteral);\n\t\tassertKinds('-01', SyntaxKind.NumericLiteral, SyntaxKind.NumericLiteral);\n\n\t\t// unexpected end\n\t\tassertKinds('-', SyntaxKind.Unknown);\n\t\tassertKinds('.0', SyntaxKind.Unknown);\n\t});\n\n\ttest('keywords: true, false, null', () => {\n\t\tassertKinds('true', SyntaxKind.TrueKeyword);\n\t\tassertKinds('false', SyntaxKind.FalseKeyword);\n\t\tassertKinds('null', SyntaxKind.NullKeyword);\n\n\n\t\tassertKinds('true false null',\n\t\t\tSyntaxKind.TrueKeyword,\n\t\t\tSyntaxKind.Trivia,\n\t\t\tSyntaxKind.FalseKeyword,\n\t\t\tSyntaxKind.Trivia,\n\t\t\tSyntaxKind.NullKeyword);\n\n\t\t// invalid words\n\t\tassertKinds('nulllll', SyntaxKind.Unknown);\n\t\tassertKinds('True', SyntaxKind.Unknown);\n\t\tassertKinds('foo-bar', SyntaxKind.Unknown);\n\t\tassertKinds('foo bar', SyntaxKind.Unknown, SyntaxKind.Trivia, SyntaxKind.Unknown);\n\t});\n\n\ttest('trivia', () => {\n\t\tassertKinds(' ', SyntaxKind.Trivia);\n\t\tassertKinds('  \\t  ', SyntaxKind.Trivia);\n\t\tassertKinds('  \\t  \\n  \\t  ', SyntaxKind.Trivia, SyntaxKind.LineBreakTrivia, SyntaxKind.Trivia);\n\t\tassertKinds('\\r\\n', SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\r', SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\n', SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\n\\r', SyntaxKind.LineBreakTrivia, SyntaxKind.LineBreakTrivia);\n\t\tassertKinds('\\n   \\n', SyntaxKind.LineBreakTrivia, SyntaxKind.Trivia, SyntaxKind.LineBreakTrivia);\n\t});\n\n\ttest('parse: literals', () => {\n\n\t\tassertValidParse('true', true);\n\t\tassertValidParse('false', false);\n\t\tassertValidParse('null', null);\n\t\tassertValidParse('\"foo\"', 'foo');\n\t\tassertValidParse('\"\\\\\"-\\\\\\\\-\\\\/-\\\\b-\\\\f-\\\\n-\\\\r-\\\\t\"', '\"-\\\\-/-\\b-\\f-\\n-\\r-\\t');\n\t\tassertValidParse('\"\\\\u00DC\"', '\u00DC');\n\t\tassertValidParse('9', 9);\n\t\tassertValidParse('-9', -9);\n\t\tassertValidParse('0.129', 0.129);\n\t\tassertValidParse('23e3', 23e3);\n\t\tassertValidParse('1.2E+3', 1.2E+3);\n\t\tassertValidParse('1.2E-3', 1.2E-3);\n\t\tassertValidParse('1.2E-3 // comment', 1.2E-3);\n\t});\n\n\ttest('parse: objects', () => {\n\t\tassertValidParse('{}', {});\n\t\tassertValidParse('{ \"foo\": true }', { foo: true });\n\t\tassertValidParse('{ \"bar\": 8, \"xoo\": \"foo\" }', { bar: 8, xoo: 'foo' });\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} });\n\t\tassertValidParse('{ \"a\": false, \"b\": true, \"c\": [ 7.4 ] }', { a: false, b: true, c: [7.4] });\n\t\tassertValidParse('{ \"lineComment\": \"//\", \"blockComment\": [\"/*\", \"*/\"], \"brackets\": [ [\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"] ] }', { lineComment: '//', blockComment: ['/*', '*/'], brackets: [['{', '}'], ['[', ']'], ['(', ')']] });\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} });\n\t\tassertValidParse('{ \"hello\": { \"again\": { \"inside\": 5 }, \"world\": 1 }}', { hello: { again: { inside: 5 }, world: 1 } });\n\t\tassertValidParse('{ \"foo\": /*hello*/true }', { foo: true });\n\t});\n\n\ttest('parse: arrays', () => {\n\t\tassertValidParse('[]', []);\n\t\tassertValidParse('[ [],  [ [] ]]', [[], [[]]]);\n\t\tassertValidParse('[ 1, 2, 3 ]', [1, 2, 3]);\n\t\tassertValidParse('[ { \"a\": null } ]', [{ a: null }]);\n\t});\n\n\ttest('parse: objects with errors', () => {\n\t\tassertInvalidParse('{,}', {});\n\t\tassertInvalidParse('{ \"foo\": true, }', { foo: true }, { allowTrailingComma: false });\n\t\tassertInvalidParse('{ \"bar\": 8 \"xoo\": \"foo\" }', { bar: 8, xoo: 'foo' });\n\t\tassertInvalidParse('{ ,\"bar\": 8 }', { bar: 8 });\n\t\tassertInvalidParse('{ ,\"bar\": 8, \"foo\" }', { bar: 8 });\n\t\tassertInvalidParse('{ \"bar\": 8, \"foo\": }', { bar: 8 });\n\t\tassertInvalidParse('{ 8, \"foo\": 9 }', { foo: 9 });\n\t});\n\n\ttest('parse: array with errors', () => {\n\t\tassertInvalidParse('[,]', []);\n\t\tassertInvalidParse('[ 1, 2, ]', [1, 2], { allowTrailingComma: false });\n\t\tassertInvalidParse('[ 1 2, 3 ]', [1, 2, 3]);\n\t\tassertInvalidParse('[ ,1, 2, 3 ]', [1, 2, 3]);\n\t\tassertInvalidParse('[ ,1, 2, 3, ]', [1, 2, 3], { allowTrailingComma: false });\n\t});\n\n\ttest('parse: disallow commments', () => {\n\t\tconst options = { disallowComments: true };\n\n\t\tassertValidParse('[ 1, 2, null, \"foo\" ]', [1, 2, null, 'foo'], options);\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} }, options);\n\n\t\tassertInvalidParse('{ \"foo\": /*comment*/ true }', { foo: true }, options);\n\t});\n\n\ttest('parse: trailing comma', () => {\n\t\t// default is allow\n\t\tassertValidParse('{ \"hello\": [], }', { hello: [] });\n\n\t\tlet options = { allowTrailingComma: true };\n\t\tassertValidParse('{ \"hello\": [], }', { hello: [] }, options);\n\t\tassertValidParse('{ \"hello\": [] }', { hello: [] }, options);\n\t\tassertValidParse('{ \"hello\": [], \"world\": {}, }', { hello: [], world: {} }, options);\n\t\tassertValidParse('{ \"hello\": [], \"world\": {} }', { hello: [], world: {} }, options);\n\t\tassertValidParse('{ \"hello\": [1,] }', { hello: [1] }, options);\n\n\t\toptions = { allowTrailingComma: false };\n\t\tassertInvalidParse('{ \"hello\": [], }', { hello: [] }, options);\n\t\tassertInvalidParse('{ \"hello\": [], \"world\": {}, }', { hello: [], world: {} }, options);\n\t});\n\n\ttest('tree: literals', () => {\n\t\tassertTree('true', { type: 'boolean', offset: 0, length: 4, value: true });\n\t\tassertTree('false', { type: 'boolean', offset: 0, length: 5, value: false });\n\t\tassertTree('null', { type: 'null', offset: 0, length: 4, value: null });\n\t\tassertTree('23', { type: 'number', offset: 0, length: 2, value: 23 });\n\t\tassertTree('-1.93e-19', { type: 'number', offset: 0, length: 9, value: -1.93e-19 });\n\t\tassertTree('\"hello\"', { type: 'string', offset: 0, length: 7, value: 'hello' });\n\t});\n\n\ttest('tree: arrays', () => {\n\t\tassertTree('[]', { type: 'array', offset: 0, length: 2, children: [] });\n\t\tassertTree('[ 1 ]', { type: 'array', offset: 0, length: 5, children: [{ type: 'number', offset: 2, length: 1, value: 1 }] });\n\t\tassertTree('[ 1,\"x\"]', {\n\t\t\ttype: 'array', offset: 0, length: 8, children: [\n\t\t\t\t{ type: 'number', offset: 2, length: 1, value: 1 },\n\t\t\t\t{ type: 'string', offset: 4, length: 3, value: 'x' }\n\t\t\t]\n\t\t});\n\t\tassertTree('[[]]', {\n\t\t\ttype: 'array', offset: 0, length: 4, children: [\n\t\t\t\t{ type: 'array', offset: 1, length: 2, children: [] }\n\t\t\t]\n\t\t});\n\t});\n\n\ttest('tree: objects', () => {\n\t\tassertTree('{ }', { type: 'object', offset: 0, length: 3, children: [] });\n\t\tassertTree('{ \"val\": 1 }', {\n\t\t\ttype: 'object', offset: 0, length: 12, children: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'property', offset: 2, length: 8, colonOffset: 7, children: [\n\t\t\t\t\t\t{ type: 'string', offset: 2, length: 5, value: 'val' },\n\t\t\t\t\t\t{ type: 'number', offset: 9, length: 1, value: 1 }\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t\tassertTree('{\"id\": \"$\", \"v\": [ null, null] }',\n\t\t\t{\n\t\t\t\ttype: 'object', offset: 0, length: 32, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'property', offset: 1, length: 9, colonOffset: 5, children: [\n\t\t\t\t\t\t\t{ type: 'string', offset: 1, length: 4, value: 'id' },\n\t\t\t\t\t\t\t{ type: 'string', offset: 7, length: 3, value: '$' }\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'property', offset: 12, length: 18, colonOffset: 15, children: [\n\t\t\t\t\t\t\t{ type: 'string', offset: 12, length: 3, value: 'v' },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'array', offset: 17, length: 13, children: [\n\t\t\t\t\t\t\t\t\t{ type: 'null', offset: 19, length: 4, value: null },\n\t\t\t\t\t\t\t\t\t{ type: 'null', offset: 25, length: 4, value: null }\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t);\n\t\tassertTree('{  \"id\": { \"foo\": { } } , }',\n\t\t\t{\n\t\t\t\ttype: 'object', offset: 0, length: 27, children: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'property', offset: 3, length: 20, colonOffset: 7, children: [\n\t\t\t\t\t\t\t{ type: 'string', offset: 3, length: 4, value: 'id' },\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'object', offset: 9, length: 14, children: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\ttype: 'property', offset: 11, length: 10, colonOffset: 16, children: [\n\t\t\t\t\t\t\t\t\t\t\t{ type: 'string', offset: 11, length: 5, value: 'foo' },\n\t\t\t\t\t\t\t\t\t\t\t{ type: 'object', offset: 18, length: 3, children: [] }\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t\t, [ParseErrorCode.PropertyNameExpected, ParseErrorCode.ValueExpected], { allowTrailingComma: false });\n\t});\n});\n"],
  "mappings": ";;AAIA,OAAO,YAAY;AACnB,SAAS,eAAe,MAAM,OAAO,YAAY,gBAAgB,cAAc,WAAW,WAAW,kBAAkB;AACvH,SAAS,4BAA4B;AACrC,SAAS,+CAA+C;AAExD,SAAS,YAAY,SAAiB,OAA2B;AAChE,QAAM,UAAU,cAAc,IAAI;AAClC,MAAI;AACJ,UAAQ,OAAO,QAAQ,KAAK,OAAO,WAAW,KAAK;AAClD,WAAO,YAAY,MAAM,MAAM,MAAM,CAAC;AAAA,EACvC;AACA,SAAO,YAAY,MAAM,QAAQ,CAAC;AACnC;AAPS;AAQT,SAAS,gBAAgB,MAAc,cAA0B,WAA4B;AAC5F,QAAM,UAAU,cAAc,IAAI;AAClC,UAAQ,KAAK;AACb,SAAO,YAAY,QAAQ,SAAS,GAAG,YAAY;AACnD,SAAO,YAAY,QAAQ,cAAc,GAAG,SAAS;AACtD;AALS;AAOT,SAAS,iBAAiB,OAAe,UAAe,SAA8B;AACrF,QAAM,SAAuB,CAAC;AAC9B,QAAM,SAAS,MAAM,OAAO,QAAQ,OAAO;AAE3C,MAAI,OAAO,WAAW,GAAG;AACxB,WAAO,OAAO,qBAAqB,OAAO,CAAC,EAAE,KAAK,CAAC;AAAA,EACpD;AACA,SAAO,gBAAgB,QAAQ,QAAQ;AACxC;AARS;AAUT,SAAS,mBAAmB,OAAe,UAAe,SAA8B;AACvF,QAAM,SAAuB,CAAC;AAC9B,QAAM,SAAS,MAAM,OAAO,QAAQ,OAAO;AAE3C,SAAO,OAAO,SAAS,CAAC;AACxB,SAAO,gBAAgB,QAAQ,QAAQ;AACxC;AANS;AAQT,SAAS,WAAW,OAAe,UAAe,iBAA2B,CAAC,GAAG,SAA8B;AAC9G,QAAM,SAAuB,CAAC;AAC9B,QAAM,SAAS,UAAU,OAAO,QAAQ,OAAO;AAE/C,SAAO,gBAAgB,OAAO,IAAI,OAAK,EAAE,OAAO,QAAQ,GAAG,cAAc;AACzE,QAAM,cAAc,wBAAC,SAAe;AACnC,QAAI,KAAK,UAAU;AAClB,iBAAW,SAAS,KAAK,UAAU;AAClC,eAAO,YAAY,MAAM,MAAM,MAAM;AACrC,eAAa,MAAO;AACpB,oBAAY,KAAK;AAAA,MAClB;AAAA,IACD;AAAA,EACD,GARoB;AASpB,cAAY,MAAM;AAElB,SAAO,gBAAgB,QAAQ,QAAQ;AACxC;AAjBS;AAmBT,MAAM,QAAQ,MAAM;AAEnB,0CAAwC;AAExC,OAAK,UAAU,MAAM;AACpB,gBAAY,KAAK,WAAW,cAAc;AAC1C,gBAAY,KAAK,WAAW,eAAe;AAC3C,gBAAY,KAAK,WAAW,gBAAgB;AAC5C,gBAAY,KAAK,WAAW,iBAAiB;AAC7C,gBAAY,KAAK,WAAW,UAAU;AACtC,gBAAY,KAAK,WAAW,UAAU;AAAA,EACvC,CAAC;AAED,OAAK,YAAY,MAAM;AACtB,gBAAY,wBAAwB,WAAW,iBAAiB;AAChE,gBAAY,0BAA0B,WAAW,mBAAmB,WAAW,eAAe;AAC9F,gBAAY,0BAA0B,WAAW,kBAAkB;AACnE,gBAAY,8BAA8B,WAAW,kBAAkB;AACvE,gBAAY,4BAA4B,WAAW,kBAAkB;AAGrE,gBAAY,gBAAgB,WAAW,kBAAkB;AACzD,gBAAY,0BAA0B,WAAW,kBAAkB;AAGnE,gBAAY,SAAS,WAAW,SAAS,WAAW,QAAQ,WAAW,OAAO;AAAA,EAC/E,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,gBAAY,UAAU,WAAW,aAAa;AAC9C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,YAAY,WAAW,aAAa;AAChD,gBAAY,kBAAa,WAAW,aAAa;AAGjD,gBAAY,SAAS,WAAW,aAAa;AAC7C,gBAAY,YAAY,WAAW,eAAe,WAAW,iBAAiB,WAAW,aAAa;AAGtG,oBAAgB,OAAQ,WAAW,eAAe,UAAU,gBAAgB;AAC5E,oBAAgB,QAAS,WAAW,eAAe,UAAU,gBAAgB;AAAA,EAC9E,CAAC;AAED,OAAK,WAAW,MAAM;AACrB,gBAAY,KAAK,WAAW,cAAc;AAC1C,gBAAY,OAAO,WAAW,cAAc;AAC5C,gBAAY,QAAQ,WAAW,cAAc;AAC7C,gBAAY,MAAM,WAAW,cAAc;AAC3C,gBAAY,KAAK,WAAW,cAAc;AAC1C,gBAAY,aAAa,WAAW,cAAc;AAClD,gBAAY,MAAM,WAAW,cAAc;AAC3C,gBAAY,MAAM,WAAW,cAAc;AAC3C,gBAAY,WAAW,WAAW,cAAc;AAChD,gBAAY,WAAW,WAAW,cAAc;AAChD,gBAAY,WAAW,WAAW,cAAc;AAChD,gBAAY,WAAW,WAAW,cAAc;AAChD,gBAAY,UAAU,WAAW,cAAc;AAC/C,gBAAY,UAAU,WAAW,cAAc;AAG/C,gBAAY,MAAM,WAAW,gBAAgB,WAAW,cAAc;AACtE,gBAAY,OAAO,WAAW,gBAAgB,WAAW,cAAc;AAGvE,gBAAY,KAAK,WAAW,OAAO;AACnC,gBAAY,MAAM,WAAW,OAAO;AAAA,EACrC,CAAC;AAED,OAAK,+BAA+B,MAAM;AACzC,gBAAY,QAAQ,WAAW,WAAW;AAC1C,gBAAY,SAAS,WAAW,YAAY;AAC5C,gBAAY,QAAQ,WAAW,WAAW;AAG1C;AAAA,MAAY;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,MACX,WAAW;AAAA,IAAW;AAGvB,gBAAY,WAAW,WAAW,OAAO;AACzC,gBAAY,QAAQ,WAAW,OAAO;AACtC,gBAAY,WAAW,WAAW,OAAO;AACzC,gBAAY,WAAW,WAAW,SAAS,WAAW,QAAQ,WAAW,OAAO;AAAA,EACjF,CAAC;AAED,OAAK,UAAU,MAAM;AACpB,gBAAY,KAAK,WAAW,MAAM;AAClC,gBAAY,SAAU,WAAW,MAAM;AACvC,gBAAY,gBAAkB,WAAW,QAAQ,WAAW,iBAAiB,WAAW,MAAM;AAC9F,gBAAY,QAAQ,WAAW,eAAe;AAC9C,gBAAY,MAAM,WAAW,eAAe;AAC5C,gBAAY,MAAM,WAAW,eAAe;AAC5C,gBAAY,QAAQ,WAAW,iBAAiB,WAAW,eAAe;AAC1E,gBAAY,WAAW,WAAW,iBAAiB,WAAW,QAAQ,WAAW,eAAe;AAAA,EACjG,CAAC;AAED,OAAK,mBAAmB,MAAM;AAE7B,qBAAiB,QAAQ,IAAI;AAC7B,qBAAiB,SAAS,KAAK;AAC/B,qBAAiB,QAAQ,IAAI;AAC7B,qBAAiB,SAAS,KAAK;AAC/B,qBAAiB,sCAAsC,sBAAuB;AAC9E,qBAAiB,aAAa,MAAG;AACjC,qBAAiB,KAAK,CAAC;AACvB,qBAAiB,MAAM,EAAE;AACzB,qBAAiB,SAAS,KAAK;AAC/B,qBAAiB,QAAQ,IAAI;AAC7B,qBAAiB,UAAU,IAAM;AACjC,qBAAiB,UAAU,KAAM;AACjC,qBAAiB,qBAAqB,KAAM;AAAA,EAC7C,CAAC;AAED,OAAK,kBAAkB,MAAM;AAC5B,qBAAiB,MAAM,CAAC,CAAC;AACzB,qBAAiB,mBAAmB,EAAE,KAAK,KAAK,CAAC;AACjD,qBAAiB,8BAA8B,EAAE,KAAK,GAAG,KAAK,MAAM,CAAC;AACrE,qBAAiB,gCAAgC,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC;AACzE,qBAAiB,2CAA2C,EAAE,GAAG,OAAO,GAAG,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC;AAC3F,qBAAiB,6GAA6G,EAAE,aAAa,MAAM,cAAc,CAAC,MAAM,IAAI,GAAG,UAAU,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;AAC/N,qBAAiB,gCAAgC,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC;AACzE,qBAAiB,wDAAwD,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,EAAE,CAAC;AACtH,qBAAiB,4BAA4B,EAAE,KAAK,KAAK,CAAC;AAAA,EAC3D,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,qBAAiB,MAAM,CAAC,CAAC;AACzB,qBAAiB,kBAAkB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7C,qBAAiB,eAAe,CAAC,GAAG,GAAG,CAAC,CAAC;AACzC,qBAAiB,qBAAqB,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;AAAA,EACpD,CAAC;AAED,OAAK,8BAA8B,MAAM;AACxC,uBAAmB,OAAO,CAAC,CAAC;AAC5B,uBAAmB,oBAAoB,EAAE,KAAK,KAAK,GAAG,EAAE,oBAAoB,MAAM,CAAC;AACnF,uBAAmB,6BAA6B,EAAE,KAAK,GAAG,KAAK,MAAM,CAAC;AACtE,uBAAmB,iBAAiB,EAAE,KAAK,EAAE,CAAC;AAC9C,uBAAmB,wBAAwB,EAAE,KAAK,EAAE,CAAC;AACrD,uBAAmB,wBAAwB,EAAE,KAAK,EAAE,CAAC;AACrD,uBAAmB,mBAAmB,EAAE,KAAK,EAAE,CAAC;AAAA,EACjD,CAAC;AAED,OAAK,4BAA4B,MAAM;AACtC,uBAAmB,OAAO,CAAC,CAAC;AAC5B,uBAAmB,aAAa,CAAC,GAAG,CAAC,GAAG,EAAE,oBAAoB,MAAM,CAAC;AACrE,uBAAmB,cAAc,CAAC,GAAG,GAAG,CAAC,CAAC;AAC1C,uBAAmB,gBAAgB,CAAC,GAAG,GAAG,CAAC,CAAC;AAC5C,uBAAmB,iBAAiB,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,oBAAoB,MAAM,CAAC;AAAA,EAC7E,CAAC;AAED,OAAK,6BAA6B,MAAM;AACvC,UAAM,UAAU,EAAE,kBAAkB,KAAK;AAEzC,qBAAiB,yBAAyB,CAAC,GAAG,GAAG,MAAM,KAAK,GAAG,OAAO;AACtE,qBAAiB,gCAAgC,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,GAAG,OAAO;AAElF,uBAAmB,+BAA+B,EAAE,KAAK,KAAK,GAAG,OAAO;AAAA,EACzE,CAAC;AAED,OAAK,yBAAyB,MAAM;AAEnC,qBAAiB,oBAAoB,EAAE,OAAO,CAAC,EAAE,CAAC;AAElD,QAAI,UAAU,EAAE,oBAAoB,KAAK;AACzC,qBAAiB,oBAAoB,EAAE,OAAO,CAAC,EAAE,GAAG,OAAO;AAC3D,qBAAiB,mBAAmB,EAAE,OAAO,CAAC,EAAE,GAAG,OAAO;AAC1D,qBAAiB,iCAAiC,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,GAAG,OAAO;AACnF,qBAAiB,gCAAgC,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,GAAG,OAAO;AAClF,qBAAiB,qBAAqB,EAAE,OAAO,CAAC,CAAC,EAAE,GAAG,OAAO;AAE7D,cAAU,EAAE,oBAAoB,MAAM;AACtC,uBAAmB,oBAAoB,EAAE,OAAO,CAAC,EAAE,GAAG,OAAO;AAC7D,uBAAmB,iCAAiC,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC,EAAE,GAAG,OAAO;AAAA,EACtF,CAAC;AAED,OAAK,kBAAkB,MAAM;AAC5B,eAAW,QAAQ,EAAE,MAAM,WAAW,QAAQ,GAAG,QAAQ,GAAG,OAAO,KAAK,CAAC;AACzE,eAAW,SAAS,EAAE,MAAM,WAAW,QAAQ,GAAG,QAAQ,GAAG,OAAO,MAAM,CAAC;AAC3E,eAAW,QAAQ,EAAE,MAAM,QAAQ,QAAQ,GAAG,QAAQ,GAAG,OAAO,KAAK,CAAC;AACtE,eAAW,MAAM,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,GAAG,CAAC;AACpE,eAAW,aAAa,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,SAAU,CAAC;AAClF,eAAW,WAAW,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,QAAQ,CAAC;AAAA,EAC/E,CAAC;AAED,OAAK,gBAAgB,MAAM;AAC1B,eAAW,MAAM,EAAE,MAAM,SAAS,QAAQ,GAAG,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC;AACtE,eAAW,SAAS,EAAE,MAAM,SAAS,QAAQ,GAAG,QAAQ,GAAG,UAAU,CAAC,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAE,CAAC,EAAE,CAAC;AAC3H,eAAW,YAAY;AAAA,MACtB,MAAM;AAAA,MAAS,QAAQ;AAAA,MAAG,QAAQ;AAAA,MAAG,UAAU;AAAA,QAC9C,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAE;AAAA,QACjD,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,IAAI;AAAA,MACpD;AAAA,IACD,CAAC;AACD,eAAW,QAAQ;AAAA,MAClB,MAAM;AAAA,MAAS,QAAQ;AAAA,MAAG,QAAQ;AAAA,MAAG,UAAU;AAAA,QAC9C,EAAE,MAAM,SAAS,QAAQ,GAAG,QAAQ,GAAG,UAAU,CAAC,EAAE;AAAA,MACrD;AAAA,IACD,CAAC;AAAA,EACF,CAAC;AAED,OAAK,iBAAiB,MAAM;AAC3B,eAAW,OAAO,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC;AACxE,eAAW,gBAAgB;AAAA,MAC1B,MAAM;AAAA,MAAU,QAAQ;AAAA,MAAG,QAAQ;AAAA,MAAI,UAAU;AAAA,QAChD;AAAA,UACC,MAAM;AAAA,UAAY,QAAQ;AAAA,UAAG,QAAQ;AAAA,UAAG,aAAa;AAAA,UAAG,UAAU;AAAA,YACjE,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,MAAM;AAAA,YACrD,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,EAAE;AAAA,UAClD;AAAA,QACD;AAAA,MACD;AAAA,IACD,CAAC;AACD;AAAA,MAAW;AAAA,MACV;AAAA,QACC,MAAM;AAAA,QAAU,QAAQ;AAAA,QAAG,QAAQ;AAAA,QAAI,UAAU;AAAA,UAChD;AAAA,YACC,MAAM;AAAA,YAAY,QAAQ;AAAA,YAAG,QAAQ;AAAA,YAAG,aAAa;AAAA,YAAG,UAAU;AAAA,cACjE,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,KAAK;AAAA,cACpD,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,IAAI;AAAA,YACpD;AAAA,UACD;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YAAY,QAAQ;AAAA,YAAI,QAAQ;AAAA,YAAI,aAAa;AAAA,YAAI,UAAU;AAAA,cACpE,EAAE,MAAM,UAAU,QAAQ,IAAI,QAAQ,GAAG,OAAO,IAAI;AAAA,cACpD;AAAA,gBACC,MAAM;AAAA,gBAAS,QAAQ;AAAA,gBAAI,QAAQ;AAAA,gBAAI,UAAU;AAAA,kBAChD,EAAE,MAAM,QAAQ,QAAQ,IAAI,QAAQ,GAAG,OAAO,KAAK;AAAA,kBACnD,EAAE,MAAM,QAAQ,QAAQ,IAAI,QAAQ,GAAG,OAAO,KAAK;AAAA,gBACpD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AACA;AAAA,MAAW;AAAA,MACV;AAAA,QACC,MAAM;AAAA,QAAU,QAAQ;AAAA,QAAG,QAAQ;AAAA,QAAI,UAAU;AAAA,UAChD;AAAA,YACC,MAAM;AAAA,YAAY,QAAQ;AAAA,YAAG,QAAQ;AAAA,YAAI,aAAa;AAAA,YAAG,UAAU;AAAA,cAClE,EAAE,MAAM,UAAU,QAAQ,GAAG,QAAQ,GAAG,OAAO,KAAK;AAAA,cACpD;AAAA,gBACC,MAAM;AAAA,gBAAU,QAAQ;AAAA,gBAAG,QAAQ;AAAA,gBAAI,UAAU;AAAA,kBAChD;AAAA,oBACC,MAAM;AAAA,oBAAY,QAAQ;AAAA,oBAAI,QAAQ;AAAA,oBAAI,aAAa;AAAA,oBAAI,UAAU;AAAA,sBACpE,EAAE,MAAM,UAAU,QAAQ,IAAI,QAAQ,GAAG,OAAO,MAAM;AAAA,sBACtD,EAAE,MAAM,UAAU,QAAQ,IAAI,QAAQ,GAAG,UAAU,CAAC,EAAE;AAAA,oBACvD;AAAA,kBACD;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,MACE,CAAC,eAAe,sBAAsB,eAAe,aAAa;AAAA,MAAG,EAAE,oBAAoB,MAAM;AAAA,IAAC;AAAA,EACtG,CAAC;AACF,CAAC;",
  "names": []
}
