import i from"assert";import{LinkedList as n}from"../../common/linkedList.js";import{ensureNoDisposablesAreLeakedInTestSuite as h}from"./utils.js";suite("LinkedList",function(){h();function u(t,...s){i.strictEqual(t.size,s.length),i.deepStrictEqual(Array.from(t),s),i.deepStrictEqual([...t],s);for(const e of t)i.strictEqual(e,s.shift());i.strictEqual(s.length,0)}test("Push/Iter",()=>{const t=new n;t.push(0),t.push(1),t.push(2),u(t,0,1,2)}),test("Push/Remove",()=>{let t=new n,s=t.push(0);t.push(1),t.push(2),s(),u(t,1,2),t=new n,t.push(0),s=t.push(1),t.push(2),s(),u(t,0,2),t=new n,t.push(0),t.push(1),s=t.push(2),s(),u(t,0,1),t=new n,t.push(0),t.push(1),s=t.push(2),s(),s(),u(t,0,1)}),test("Push/toArray",()=>{const t=new n;t.push("foo"),t.push("bar"),t.push("far"),t.push("boo"),u(t,"foo","bar","far","boo")}),test("unshift/Iter",()=>{const t=new n;t.unshift(0),t.unshift(1),t.unshift(2),u(t,2,1,0)}),test("unshift/Remove",()=>{let t=new n,s=t.unshift(0);t.unshift(1),t.unshift(2),s(),u(t,2,1),t=new n,t.unshift(0),s=t.unshift(1),t.unshift(2),s(),u(t,2,0),t=new n,t.unshift(0),t.unshift(1),s=t.unshift(2),s(),u(t,1,0)}),test("unshift/toArray",()=>{const t=new n;t.unshift("foo"),t.unshift("bar"),t.unshift("far"),t.unshift("boo"),u(t,"boo","far","bar","foo")}),test("pop/unshift",function(){const t=new n;t.push("a"),t.push("b"),u(t,"a","b");const s=t.shift();i.strictEqual(s,"a"),u(t,"b"),t.unshift("a"),u(t,"a","b");const e=t.pop();i.strictEqual(e,"b"),u(t,"a")})});
