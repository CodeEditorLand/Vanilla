{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/worker/workerMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n(() => {\n\tinterface IMonacoEnvironment {\n\t\tbaseUrl?: string;\n\t\tcreateTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\t\tpolicyName: string,\n\t\t\tpolicyOptions?: Options,\n\t\t):\n\t\t\t| undefined\n\t\t\t| Pick<\n\t\t\t\t\tTrustedTypePolicy<Options>,\n\t\t\t\t\t| \"name\"\n\t\t\t\t\t| Extract<keyof Options, keyof TrustedTypePolicyOptions>\n\t\t\t  >;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (\n\t\tglobalThis as any\n\t).MonacoEnvironment;\n\n\tconst monacoBaseUrl =\n\t\tmonacoEnvironment && monacoEnvironment.baseUrl\n\t\t\t? monacoEnvironment.baseUrl\n\t\t\t: \"../../../\";\n\n\tfunction createTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\tpolicyName: string,\n\t\tpolicyOptions?: Options,\n\t):\n\t\t| undefined\n\t\t| Pick<\n\t\t\t\tTrustedTypePolicy<Options>,\n\t\t\t\t\"name\" | Extract<keyof Options, keyof TrustedTypePolicyOptions>\n\t\t  > {\n\t\tif (monacoEnvironment?.createTrustedTypesPolicy) {\n\t\t\ttry {\n\t\t\t\treturn monacoEnvironment.createTrustedTypesPolicy(\n\t\t\t\t\tpolicyName,\n\t\t\t\t\tpolicyOptions,\n\t\t\t\t);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\treturn self.trustedTypes?.createPolicy(policyName, policyOptions);\n\t\t} catch (err) {\n\t\t\tconsole.warn(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tconst trustedTypesPolicy = createTrustedTypesPolicy(\"amdLoader\", {\n\t\tcreateScriptURL: (value) => value,\n\t\tcreateScript: (_, ...args: string[]) => {\n\t\t\t// workaround a chrome issue not allowing to create new functions\n\t\t\t// see https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\t\t\tconst fnArgs = args.slice(0, -1).join(\",\");\n\t\t\tconst fnBody = args.pop()!.toString();\n\t\t\t// Do not add a new line to fnBody, as this will confuse source maps.\n\t\t\tconst body = `(function anonymous(${fnArgs}) { ${fnBody}\\n})`;\n\t\t\treturn body;\n\t\t},\n\t});\n\n\tfunction canUseEval(): boolean {\n\t\ttry {\n\t\t\tconst func = trustedTypesPolicy\n\t\t\t\t? globalThis.eval(\n\t\t\t\t\t\t<any>trustedTypesPolicy.createScript(\"\", \"true\"),\n\t\t\t\t\t) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t: new Function(\"true\"); // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\tfunc.call(globalThis);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction loadAMDLoader() {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tif (\n\t\t\t\ttypeof (<any>globalThis).define === \"function\" &&\n\t\t\t\t(<any>globalThis).define.amd\n\t\t\t) {\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tconst loaderSrc: string | TrustedScriptURL =\n\t\t\t\tmonacoBaseUrl + \"vs/loader.js\";\n\n\t\t\tconst isCrossOrigin =\n\t\t\t\t/^((http:)|(https:)|(file:))/.test(loaderSrc) &&\n\t\t\t\tloaderSrc.substring(0, globalThis.origin.length) !==\n\t\t\t\t\tglobalThis.origin;\n\t\t\tif (!isCrossOrigin && canUseEval()) {\n\t\t\t\t// use `fetch` if possible because `importScripts`\n\t\t\t\t// is synchronous and can lead to deadlocks on Safari\n\t\t\t\tfetch(loaderSrc)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tif (response.status !== 200) {\n\t\t\t\t\t\t\tthrow new Error(response.statusText);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn response.text();\n\t\t\t\t\t})\n\t\t\t\t\t.then((text) => {\n\t\t\t\t\t\ttext = `${text}\\n//# sourceURL=${loaderSrc}`;\n\t\t\t\t\t\tconst func = trustedTypesPolicy\n\t\t\t\t\t\t\t? globalThis.eval(\n\t\t\t\t\t\t\t\t\ttrustedTypesPolicy.createScript(\n\t\t\t\t\t\t\t\t\t\t\"\",\n\t\t\t\t\t\t\t\t\t\ttext,\n\t\t\t\t\t\t\t\t\t) as unknown as string,\n\t\t\t\t\t\t\t\t) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t\t\t: new Function(text); // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t\tfunc.call(globalThis);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t})\n\t\t\t\t\t.then(undefined, reject);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (trustedTypesPolicy) {\n\t\t\t\timportScripts(\n\t\t\t\t\ttrustedTypesPolicy.createScriptURL(\n\t\t\t\t\t\tloaderSrc,\n\t\t\t\t\t) as unknown as string,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\timportScripts(loaderSrc as string);\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// ESM-comment-begin\n\t// function configureAMDLoader() {\n\t// \trequire.config({\n\t// \t\tbaseUrl: monacoBaseUrl,\n\t// \t\tcatchError: true,\n\t// \t\ttrustedTypesPolicy,\n\t// \t\tamdModulesPattern: /^vs\\//\n\t// \t});\n\t// }\n\t// ESM-comment-end\n\n\tfunction loadCode(moduleId: string): Promise<SimpleWorkerModule> {\n\t\t// ESM-uncomment-begin\n\t\tif (typeof loadAMDLoader === \"function\") {\n\t\t\t/* fixes unused import, remove me */\n\t\t}\n\t\tconst moduleUrl = new URL(\n\t\t\t`${moduleId}.js`,\n\t\t\tglobalThis._VSCODE_FILE_ROOT,\n\t\t);\n\t\treturn import(moduleUrl.href);\n\t\t// ESM-uncomment-end\n\n\t\t// ESM-comment-begin\n\t\t// return loadAMDLoader().then(() => {\n\t\t// configureAMDLoader();\n\t\t// return new Promise<SimpleWorkerModule>((resolve, reject) => {\n\t\t// require([moduleId], resolve, reject);\n\t\t// });\n\t\t// });\n\t\t// ESM-comment-end\n\t}\n\n\tinterface MessageHandler {\n\t\tonmessage(msg: any, ports: readonly MessagePort[]): void;\n\t}\n\n\t// shape of vs/base/common/worker/simpleWorker.ts\n\tinterface SimpleWorkerModule {\n\t\tcreate(\n\t\t\tpostMessage: (msg: any, transfer?: Transferable[]) => void,\n\t\t): MessageHandler;\n\t}\n\n\tfunction setupWorkerServer(ws: SimpleWorkerModule) {\n\t\tsetTimeout(() => {\n\t\t\tconst messageHandler = ws.create(\n\t\t\t\t(msg: any, transfer?: Transferable[]) => {\n\t\t\t\t\t(<any>globalThis).postMessage(msg, transfer);\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tself.onmessage = (e: MessageEvent) =>\n\t\t\t\tmessageHandler.onmessage(e.data, e.ports);\n\t\t\twhile (beforeReadyMessages.length > 0) {\n\t\t\t\tself.onmessage(beforeReadyMessages.shift()!);\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\t// If the loader is already defined, configure it immediately\n\t// This helps in the bundled case, where we must load nls files\n\t// and they need a correct baseUrl to be loaded.\n\t// ESM-comment-begin\n\t// if (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t// \tconfigureAMDLoader();\n\t// }\n\t// ESM-comment-end\n\n\tlet isFirstMessage = true;\n\tconst beforeReadyMessages: MessageEvent[] = [];\n\tglobalThis.onmessage = (message: MessageEvent) => {\n\t\tif (!isFirstMessage) {\n\t\t\tbeforeReadyMessages.push(message);\n\t\t\treturn;\n\t\t}\n\n\t\tisFirstMessage = false;\n\t\tloadCode(message.data).then(\n\t\t\t(ws) => {\n\t\t\t\tsetupWorkerServer(ws);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tconsole.error(err);\n\t\t\t},\n\t\t);\n\t};\n})();\n"],
  "mappings": "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",
  "names": []
}
