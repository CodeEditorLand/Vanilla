{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/worker/workerMain.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n(function () {\n\n\tinterface IMonacoEnvironment {\n\t\tbaseUrl?: string;\n\t\tcreateTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\t\tpolicyName: string,\n\t\t\tpolicyOptions?: Options,\n\t\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>>;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\n\n\tconst monacoBaseUrl = monacoEnvironment && monacoEnvironment.baseUrl ? monacoEnvironment.baseUrl : '../../../';\n\n\tfunction createTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\tpolicyName: string,\n\t\tpolicyOptions?: Options,\n\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>> {\n\n\t\tif (monacoEnvironment?.createTrustedTypesPolicy) {\n\t\t\ttry {\n\t\t\t\treturn monacoEnvironment.createTrustedTypesPolicy(policyName, policyOptions);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\treturn self.trustedTypes?.createPolicy(policyName, policyOptions);\n\t\t} catch (err) {\n\t\t\tconsole.warn(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tconst trustedTypesPolicy = createTrustedTypesPolicy('amdLoader', {\n\t\tcreateScriptURL: value => value,\n\t\tcreateScript: (_, ...args: string[]) => {\n\t\t\t// workaround a chrome issue not allowing to create new functions\n\t\t\t// see https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\t\t\tconst fnArgs = args.slice(0, -1).join(',');\n\t\t\tconst fnBody = args.pop()!.toString();\n\t\t\t// Do not add a new line to fnBody, as this will confuse source maps.\n\t\t\tconst body = `(function anonymous(${fnArgs}) { ${fnBody}\\n})`;\n\t\t\treturn body;\n\t\t}\n\t});\n\n\tfunction canUseEval(): boolean {\n\t\ttry {\n\t\t\tconst func = (\n\t\t\t\ttrustedTypesPolicy\n\t\t\t\t\t? globalThis.eval(<any>trustedTypesPolicy.createScript('', 'true')) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t: new Function('true') // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t);\n\t\t\tfunc.call(globalThis);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction loadAMDLoader() {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tif (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tconst loaderSrc: string | TrustedScriptURL = monacoBaseUrl + 'vs/loader.js';\n\n\t\t\tconst isCrossOrigin = (/^((http:)|(https:)|(file:))/.test(loaderSrc) && loaderSrc.substring(0, globalThis.origin.length) !== globalThis.origin);\n\t\t\tif (!isCrossOrigin && canUseEval()) {\n\t\t\t\t// use `fetch` if possible because `importScripts`\n\t\t\t\t// is synchronous and can lead to deadlocks on Safari\n\t\t\t\tfetch(loaderSrc).then((response) => {\n\t\t\t\t\tif (response.status !== 200) {\n\t\t\t\t\t\tthrow new Error(response.statusText);\n\t\t\t\t\t}\n\t\t\t\t\treturn response.text();\n\t\t\t\t}).then((text) => {\n\t\t\t\t\ttext = `${text}\\n//# sourceURL=${loaderSrc}`;\n\t\t\t\t\tconst func = (\n\t\t\t\t\t\ttrustedTypesPolicy\n\t\t\t\t\t\t\t? globalThis.eval(trustedTypesPolicy.createScript('', text) as unknown as string) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t\t\t: new Function(text) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t);\n\t\t\t\t\tfunc.call(globalThis);\n\t\t\t\t\tresolve();\n\t\t\t\t}).then(undefined, reject);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (trustedTypesPolicy) {\n\t\t\t\timportScripts(trustedTypesPolicy.createScriptURL(loaderSrc) as unknown as string);\n\t\t\t} else {\n\t\t\t\timportScripts(loaderSrc as string);\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// ESM-comment-begin\n\t// function configureAMDLoader() {\n\t// \trequire.config({\n\t// \t\tbaseUrl: monacoBaseUrl,\n\t// \t\tcatchError: true,\n\t// \t\ttrustedTypesPolicy,\n\t// \t\tamdModulesPattern: /^vs\\//\n\t// \t});\n\t// }\n\t// ESM-comment-end\n\n\tfunction loadCode(moduleId: string): Promise<SimpleWorkerModule> {\n\t\t// ESM-uncomment-begin\n\t\tif (typeof loadAMDLoader === 'function') { /* fixes unused import, remove me */ }\n\t\tconst moduleUrl = new URL(`${moduleId}.js`, globalThis._VSCODE_FILE_ROOT);\n\t\treturn import(moduleUrl.href);\n\t\t// ESM-uncomment-end\n\n\t\t// ESM-comment-begin\n\t\t// return loadAMDLoader().then(() => {\n\t\t// configureAMDLoader();\n\t\t// return new Promise<SimpleWorkerModule>((resolve, reject) => {\n\t\t// require([moduleId], resolve, reject);\n\t\t// });\n\t\t// });\n\t\t// ESM-comment-end\n\t}\n\n\tinterface MessageHandler {\n\t\tonmessage(msg: any, ports: readonly MessagePort[]): void;\n\t}\n\n\t// shape of vs/base/common/worker/simpleWorker.ts\n\tinterface SimpleWorkerModule {\n\t\tcreate(postMessage: (msg: any, transfer?: Transferable[]) => void): MessageHandler;\n\t}\n\n\tfunction setupWorkerServer(ws: SimpleWorkerModule) {\n\t\tsetTimeout(function () {\n\t\t\tconst messageHandler = ws.create((msg: any, transfer?: Transferable[]) => {\n\t\t\t\t(<any>globalThis).postMessage(msg, transfer);\n\t\t\t});\n\n\t\t\tself.onmessage = (e: MessageEvent) => messageHandler.onmessage(e.data, e.ports);\n\t\t\twhile (beforeReadyMessages.length > 0) {\n\t\t\t\tself.onmessage(beforeReadyMessages.shift()!);\n\t\t\t}\n\t\t}, 0);\n\t}\n\n\t// If the loader is already defined, configure it immediately\n\t// This helps in the bundled case, where we must load nls files\n\t// and they need a correct baseUrl to be loaded.\n\t// ESM-comment-begin\n\t// if (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t// \tconfigureAMDLoader();\n\t// }\n\t// ESM-comment-end\n\n\tlet isFirstMessage = true;\n\tconst beforeReadyMessages: MessageEvent[] = [];\n\tglobalThis.onmessage = (message: MessageEvent) => {\n\t\tif (!isFirstMessage) {\n\t\t\tbeforeReadyMessages.push(message);\n\t\t\treturn;\n\t\t}\n\n\t\tisFirstMessage = false;\n\t\tloadCode(message.data).then((ws) => {\n\t\t\tsetupWorkerServer(ws);\n\t\t}, (err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t};\n})();\n"],
  "mappings": "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",
  "names": []
}
