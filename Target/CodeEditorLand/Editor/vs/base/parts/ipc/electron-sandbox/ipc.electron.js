import{VSBuffer as c}from"../../../../../vs/base/common/buffer.js";import{Event as i}from"../../../../../vs/base/common/event.js";import"../../../../../vs/base/common/lifecycle.js";import{IPCClient as p}from"../../../../../vs/base/parts/ipc/common/ipc.js";import{Protocol as l}from"../../../../../vs/base/parts/ipc/common/ipc.electron.js";import{ipcRenderer as e}from"../../../../../vs/base/parts/sandbox/electron-sandbox/globals.js";class t extends p{protocol;static createProtocol(){const o=i.fromNodeEventEmitter(e,"vscode:message",(r,s)=>c.wrap(s));return e.send("vscode:hello"),new l(e,o)}constructor(o){const r=t.createProtocol();super(r,o),this.protocol=r}dispose(){this.protocol.disconnect(),super.dispose()}}export{t as Client};
