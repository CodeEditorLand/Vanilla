{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/electron-sandbox/ipc.mp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from '../../../browser/window.js';\nimport { Event } from '../../../common/event.js';\nimport { generateUuid } from '../../../common/uuid.js';\nimport { ipcMessagePort, ipcRenderer } from '../../sandbox/electron-sandbox/globals.js';\n\ninterface IMessageChannelResult {\n\tnonce: string;\n\tport: MessagePort;\n\tsource: unknown;\n}\n\nexport async function acquirePort(requestChannel: string | undefined, responseChannel: string, nonce = generateUuid()): Promise<MessagePort> {\n\n\t// Get ready to acquire the message port from the\n\t// provided `responseChannel` via preload helper.\n\tipcMessagePort.acquire(responseChannel, nonce);\n\n\t// If a `requestChannel` is provided, we are in charge\n\t// to trigger acquisition of the message port from main\n\tif (typeof requestChannel === 'string') {\n\t\tipcRenderer.send(requestChannel, nonce);\n\t}\n\n\t// Wait until the main side has returned the `MessagePort`\n\t// We need to filter by the `nonce` to ensure we listen\n\t// to the right response.\n\tconst onMessageChannelResult = Event.fromDOMEventEmitter<IMessageChannelResult>(mainWindow, 'message', (e: MessageEvent) => ({ nonce: e.data, port: e.ports[0], source: e.source }));\n\tconst { port } = await Event.toPromise(Event.once(Event.filter(onMessageChannelResult, e => e.nonce === nonce && e.source === mainWindow)));\n\n\treturn port;\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,oBAAoB;AAC7B,SAAS,gBAAgB,mBAAmB;AAQ5C,eAAsB,YAAY,gBAAoC,iBAAyB,QAAQ,aAAa,GAAyB;AAI5I,iBAAe,QAAQ,iBAAiB,KAAK;AAI7C,MAAI,OAAO,mBAAmB,UAAU;AACvC,gBAAY,KAAK,gBAAgB,KAAK;AAAA,EACvC;AAKA,QAAM,yBAAyB,MAAM,oBAA2C,YAAY,WAAW,CAAC,OAAqB,EAAE,OAAO,EAAE,MAAM,MAAM,EAAE,MAAM,CAAC,GAAG,QAAQ,EAAE,OAAO,EAAE;AACnL,QAAM,EAAE,KAAK,IAAI,MAAM,MAAM,UAAU,MAAM,KAAK,MAAM,OAAO,wBAAwB,OAAK,EAAE,UAAU,SAAS,EAAE,WAAW,UAAU,CAAC,CAAC;AAE1I,SAAO;AACR;AAnBsB;",
  "names": []
}
