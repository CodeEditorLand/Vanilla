{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/electron-sandbox/ipc.mp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mainWindow } from \"../../../browser/window.js\";\nimport { Event } from \"../../../common/event.js\";\nimport { generateUuid } from \"../../../common/uuid.js\";\nimport {\n\tipcMessagePort,\n\tipcRenderer,\n} from \"../../sandbox/electron-sandbox/globals.js\";\n\ninterface IMessageChannelResult {\n\tnonce: string;\n\tport: MessagePort;\n\tsource: unknown;\n}\n\nexport async function acquirePort(\n\trequestChannel: string | undefined,\n\tresponseChannel: string,\n\tnonce = generateUuid(),\n): Promise<MessagePort> {\n\t// Get ready to acquire the message port from the\n\t// provided `responseChannel` via preload helper.\n\tipcMessagePort.acquire(responseChannel, nonce);\n\n\t// If a `requestChannel` is provided, we are in charge\n\t// to trigger acquisition of the message port from main\n\tif (typeof requestChannel === \"string\") {\n\t\tipcRenderer.send(requestChannel, nonce);\n\t}\n\n\t// Wait until the main side has returned the `MessagePort`\n\t// We need to filter by the `nonce` to ensure we listen\n\t// to the right response.\n\tconst onMessageChannelResult =\n\t\tEvent.fromDOMEventEmitter<IMessageChannelResult>(\n\t\t\tmainWindow,\n\t\t\t\"message\",\n\t\t\t(e: MessageEvent) => ({\n\t\t\t\tnonce: e.data,\n\t\t\t\tport: e.ports[0],\n\t\t\t\tsource: e.source,\n\t\t\t}),\n\t\t);\n\tconst { port } = await Event.toPromise(\n\t\tEvent.once(\n\t\t\tEvent.filter(\n\t\t\t\tonMessageChannelResult,\n\t\t\t\t(e) => e.nonce === nonce && e.source === mainWindow,\n\t\t\t),\n\t\t),\n\t);\n\n\treturn port;\n}\n"],
  "mappings": ";;AAKA,SAAS,kBAAkB;AAC3B,SAAS,aAAa;AACtB,SAAS,oBAAoB;AAC7B;AAAA,EACC;AAAA,EACA;AAAA,OACM;AAQP,eAAsB,YACrB,gBACA,iBACA,QAAQ,aAAa,GACE;AAGvB,iBAAe,QAAQ,iBAAiB,KAAK;AAI7C,MAAI,OAAO,mBAAmB,UAAU;AACvC,gBAAY,KAAK,gBAAgB,KAAK;AAAA,EACvC;AAKA,QAAM,yBACL,MAAM;AAAA,IACL;AAAA,IACA;AAAA,IACA,CAAC,OAAqB;AAAA,MACrB,OAAO,EAAE;AAAA,MACT,MAAM,EAAE,MAAM,CAAC;AAAA,MACf,QAAQ,EAAE;AAAA,IACX;AAAA,EACD;AACD,QAAM,EAAE,KAAK,IAAI,MAAM,MAAM;AAAA,IAC5B,MAAM;AAAA,MACL,MAAM;AAAA,QACL;AAAA,QACA,CAAC,MAAM,EAAE,UAAU,SAAS,EAAE,WAAW;AAAA,MAC1C;AAAA,IACD;AAAA,EACD;AAEA,SAAO;AACR;AAtCsB;",
  "names": []
}
