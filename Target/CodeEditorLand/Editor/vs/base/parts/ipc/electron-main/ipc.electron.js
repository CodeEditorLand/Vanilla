import{VSBuffer as d}from"../../../common/buffer.js";import{Emitter as f,Event as t}from"../../../common/event.js";import{toDisposable as v}from"../../../common/lifecycle.js";import{Protocol as C}from"../common/ipc.electron.js";import{IPCServer as E}from"../common/ipc.js";import{validatedIpcMain as c}from"./ipcMain.js";function l(a,s){const n=t.fromNodeEventEmitter(c,s,(e,r)=>({event:e,message:r})),o=t.filter(n,({event:e})=>e.sender.id===a);return t.map(o,({message:e})=>e&&d.wrap(e))}class i extends E{static Clients=new Map;static getOnDidClientConnect(){const s=t.fromNodeEventEmitter(c,"vscode:hello",({sender:n})=>n);return t.map(s,n=>{const o=n.id;i.Clients.get(o)?.dispose();const r=new f;i.Clients.set(o,v(()=>r.fire()));const p=l(o,"vscode:message"),m=t.any(t.signal(l(o,"vscode:disconnect")),r.event);return{protocol:new C(n,p),onDidClientDisconnect:m}})}constructor(){super(i.getOnDidClientConnect())}}export{i as Server};
