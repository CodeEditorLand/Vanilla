{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/common/ipc.electron.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../common/buffer.js';\nimport { Event } from '../../../common/event.js';\nimport { IMessagePassingProtocol } from './ipc.js';\n\nexport interface Sender {\n\tsend(channel: string, msg: unknown): void;\n}\n\n/**\n * The Electron `Protocol` leverages Electron style IPC communication (`ipcRenderer`, `ipcMain`)\n * for the implementation of the `IMessagePassingProtocol`. That style of API requires a channel\n * name for sending data.\n */\nexport class Protocol implements IMessagePassingProtocol {\n\n\tconstructor(private sender: Sender, readonly onMessage: Event<VSBuffer>) { }\n\n\tsend(message: VSBuffer): void {\n\t\ttry {\n\t\t\tthis.sender.send('vscode:message', message.buffer);\n\t\t} catch (e) {\n\t\t\t// systems are going down\n\t\t}\n\t}\n\n\tdisconnect(): void {\n\t\tthis.sender.send('vscode:disconnect', null);\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,+BAA+B;AAWjC,MAAM,SAA4C;AAAA,EAExD,YAAoB,QAAyB,WAA4B;AAArD;AAAyB;AAAA,EAA8B;AAAA,EApB5E,OAkByD;AAAA;AAAA;AAAA,EAIxD,KAAK,SAAyB;AAC7B,QAAI;AACH,WAAK,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AAAA,IAClD,SAAS,GAAG;AAAA,IAEZ;AAAA,EACD;AAAA,EAEA,aAAmB;AAClB,SAAK,OAAO,KAAK,qBAAqB,IAAI;AAAA,EAC3C;AACD;",
  "names": []
}
