{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/common/ipc.electron.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { VSBuffer } from \"../../../common/buffer.js\";\nimport type { Event } from \"../../../common/event.js\";\nimport type { IMessagePassingProtocol } from \"./ipc.js\";\n\nexport interface Sender {\n\tsend(channel: string, msg: unknown): void;\n}\n\n/**\n * The Electron `Protocol` leverages Electron style IPC communication (`ipcRenderer`, `ipcMain`)\n * for the implementation of the `IMessagePassingProtocol`. That style of API requires a channel\n * name for sending data.\n */\nexport class Protocol implements IMessagePassingProtocol {\n\tconstructor(\n\t\tprivate sender: Sender,\n\t\treadonly onMessage: Event<VSBuffer>,\n\t) {}\n\n\tsend(message: VSBuffer): void {\n\t\ttry {\n\t\t\tthis.sender.send(\"vscode:message\", message.buffer);\n\t\t} catch (e) {\n\t\t\t// systems are going down\n\t\t}\n\t}\n\n\tdisconnect(): void {\n\t\tthis.sender.send(\"vscode:disconnect\", null);\n\t}\n}\n"],
  "mappings": ";;AAkBO,MAAM,SAA4C;AAAA,EACxD,YACS,QACC,WACR;AAFO;AACC;AAAA,EACP;AAAA,EAtBJ,OAkByD;AAAA;AAAA;AAAA,EAMxD,KAAK,SAAyB;AAC7B,QAAI;AACH,WAAK,OAAO,KAAK,kBAAkB,QAAQ,MAAM;AAAA,IAClD,SAAS,GAAG;AAAA,IAEZ;AAAA,EACD;AAAA,EAEA,aAAmB;AAClB,SAAK,OAAO,KAAK,qBAAqB,IAAI;AAAA,EAC3C;AACD;",
  "names": []
}
