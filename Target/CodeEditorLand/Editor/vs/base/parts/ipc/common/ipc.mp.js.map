{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/common/ipc.mp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from \"../../../common/buffer.js\";\nimport { Event } from \"../../../common/event.js\";\nimport type { IDisposable } from \"../../../common/lifecycle.js\";\nimport { type IMessagePassingProtocol, IPCClient } from \"./ipc.js\";\n\n/**\n * Declare minimal `MessageEvent` and `MessagePort` interfaces here\n * so that this utility can be used both from `browser` and\n * `electron-main` namespace where message ports are available.\n */\n\nexport interface MessageEvent {\n\t/**\n\t * For our use we only consider `Uint8Array` a valid data transfer\n\t * via message ports because our protocol implementation is buffer based.\n\t */\n\tdata: Uint8Array;\n}\n\nexport interface MessagePort {\n\taddEventListener(\n\t\ttype: \"message\",\n\t\tlistener: (this: MessagePort, e: MessageEvent) => unknown,\n\t): void;\n\tremoveEventListener(\n\t\ttype: \"message\",\n\t\tlistener: (this: MessagePort, e: MessageEvent) => unknown,\n\t): void;\n\n\tpostMessage(message: Uint8Array): void;\n\n\tstart(): void;\n\tclose(): void;\n}\n\n/**\n * The MessagePort `Protocol` leverages MessagePort style IPC communication\n * for the implementation of the `IMessagePassingProtocol`. That style of API\n * is a simple `onmessage` / `postMessage` pattern.\n */\nexport class Protocol implements IMessagePassingProtocol {\n\treadonly onMessage = Event.fromDOMEventEmitter<VSBuffer>(\n\t\tthis.port,\n\t\t\"message\",\n\t\t(e: MessageEvent) => {\n\t\t\tif (e.data) {\n\t\t\t\treturn VSBuffer.wrap(e.data);\n\t\t\t}\n\t\t\treturn VSBuffer.alloc(0);\n\t\t},\n\t);\n\n\tconstructor(private port: MessagePort) {\n\t\t// we must call start() to ensure messages are flowing\n\t\tport.start();\n\t}\n\n\tsend(message: VSBuffer): void {\n\t\tthis.port.postMessage(message.buffer);\n\t}\n\n\tdisconnect(): void {\n\t\tthis.port.close();\n\t}\n}\n\n/**\n * An implementation of a `IPCClient` on top of MessagePort style IPC communication.\n */\nexport class Client extends IPCClient implements IDisposable {\n\tprivate protocol: Protocol;\n\n\tconstructor(port: MessagePort, clientId: string) {\n\t\tconst protocol = new Protocol(port);\n\t\tsuper(protocol, clientId);\n\n\t\tthis.protocol = protocol;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.protocol.disconnect();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AAEtB,SAAuC,iBAAiB;AAqCjD,MAAM,SAA4C;AAAA,EAYxD,YAAoB,MAAmB;AAAnB;AAEnB,SAAK,MAAM;AAAA,EACZ;AAAA,EA5DD,OA6CyD;AAAA;AAAA;AAAA,EAC/C,YAAY,MAAM;AAAA,IAC1B,KAAK;AAAA,IACL;AAAA,IACA,CAAC,MAAoB;AACpB,UAAI,EAAE,MAAM;AACX,eAAO,SAAS,KAAK,EAAE,IAAI;AAAA,MAC5B;AACA,aAAO,SAAS,MAAM,CAAC;AAAA,IACxB;AAAA,EACD;AAAA,EAOA,KAAK,SAAyB;AAC7B,SAAK,KAAK,YAAY,QAAQ,MAAM;AAAA,EACrC;AAAA,EAEA,aAAmB;AAClB,SAAK,KAAK,MAAM;AAAA,EACjB;AACD;AAKO,MAAM,eAAe,UAAiC;AAAA,EA1E7D,OA0E6D;AAAA;AAAA;AAAA,EACpD;AAAA,EAER,YAAY,MAAmB,UAAkB;AAChD,UAAM,WAAW,IAAI,SAAS,IAAI;AAClC,UAAM,UAAU,QAAQ;AAExB,SAAK,WAAW;AAAA,EACjB;AAAA,EAES,UAAgB;AACxB,SAAK,SAAS,WAAW;AAEzB,UAAM,QAAQ;AAAA,EACf;AACD;",
  "names": []
}
