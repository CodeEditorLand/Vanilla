{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/common/ipc.mp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from '../../../common/buffer.js';\nimport { Event } from '../../../common/event.js';\nimport { IDisposable } from '../../../common/lifecycle.js';\nimport { IMessagePassingProtocol, IPCClient } from './ipc.js';\n\n/**\n * Declare minimal `MessageEvent` and `MessagePort` interfaces here\n * so that this utility can be used both from `browser` and\n * `electron-main` namespace where message ports are available.\n */\n\nexport interface MessageEvent {\n\n\t/**\n\t * For our use we only consider `Uint8Array` a valid data transfer\n\t * via message ports because our protocol implementation is buffer based.\n\t */\n\tdata: Uint8Array;\n}\n\nexport interface MessagePort {\n\n\taddEventListener(type: 'message', listener: (this: MessagePort, e: MessageEvent) => unknown): void;\n\tremoveEventListener(type: 'message', listener: (this: MessagePort, e: MessageEvent) => unknown): void;\n\n\tpostMessage(message: Uint8Array): void;\n\n\tstart(): void;\n\tclose(): void;\n}\n\n/**\n * The MessagePort `Protocol` leverages MessagePort style IPC communication\n * for the implementation of the `IMessagePassingProtocol`. That style of API\n * is a simple `onmessage` / `postMessage` pattern.\n */\nexport class Protocol implements IMessagePassingProtocol {\n\n\treadonly onMessage = Event.fromDOMEventEmitter<VSBuffer>(this.port, 'message', (e: MessageEvent) => {\n\t\tif (e.data) {\n\t\t\treturn VSBuffer.wrap(e.data);\n\t\t}\n\t\treturn VSBuffer.alloc(0);\n\t});\n\n\tconstructor(private port: MessagePort) {\n\n\t\t// we must call start() to ensure messages are flowing\n\t\tport.start();\n\t}\n\n\tsend(message: VSBuffer): void {\n\t\tthis.port.postMessage(message.buffer);\n\t}\n\n\tdisconnect(): void {\n\t\tthis.port.close();\n\t}\n}\n\n/**\n * An implementation of a `IPCClient` on top of MessagePort style IPC communication.\n */\nexport class Client extends IPCClient implements IDisposable {\n\n\tprivate protocol: Protocol;\n\n\tconstructor(port: MessagePort, clientId: string) {\n\t\tconst protocol = new Protocol(port);\n\t\tsuper(protocol, clientId);\n\n\t\tthis.protocol = protocol;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.protocol.disconnect();\n\n\t\tsuper.dispose();\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,gBAAgB;AACzB,SAAS,aAAa;AACtB,SAAS,mBAAmB;AAC5B,SAAS,yBAAyB,iBAAiB;AAiC5C,MAAM,SAA4C;AAAA,EASxD,YAAoB,MAAmB;AAAnB;AAGnB,SAAK,MAAM;AAAA,EACZ;AAAA,EAtDD,OAyCyD;AAAA;AAAA;AAAA,EAE/C,YAAY,MAAM,oBAA8B,KAAK,MAAM,WAAW,CAAC,MAAoB;AACnG,QAAI,EAAE,MAAM;AACX,aAAO,SAAS,KAAK,EAAE,IAAI;AAAA,IAC5B;AACA,WAAO,SAAS,MAAM,CAAC;AAAA,EACxB,CAAC;AAAA,EAQD,KAAK,SAAyB;AAC7B,SAAK,KAAK,YAAY,QAAQ,MAAM;AAAA,EACrC;AAAA,EAEA,aAAmB;AAClB,SAAK,KAAK,MAAM;AAAA,EACjB;AACD;AAKO,MAAM,eAAe,UAAiC;AAAA,EApE7D,OAoE6D;AAAA;AAAA;AAAA,EAEpD;AAAA,EAER,YAAY,MAAmB,UAAkB;AAChD,UAAM,WAAW,IAAI,SAAS,IAAI;AAClC,UAAM,UAAU,QAAQ;AAExB,SAAK,WAAW;AAAA,EACjB;AAAA,EAES,UAAgB;AACxB,SAAK,SAAS,WAAW;AAEzB,UAAM,QAAQ;AAAA,EACf;AACD;",
  "names": []
}
