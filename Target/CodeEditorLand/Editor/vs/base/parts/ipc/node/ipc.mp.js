import{isUtilityProcess as c}from"../../sandbox/node/electronTypes.js";import{VSBuffer as i}from"../../../common/buffer.js";import{IPCServer as l}from"../common/ipc.js";import{Emitter as g,Event as r}from"../../../common/event.js";import{assertType as m}from"../../../common/types.js";class v{constructor(e){this.port=e;e.start()}onMessage=r.fromNodeEventEmitter(this.port,"message",e=>e.data?i.wrap(e.data):i.alloc(0));send(e){this.port.postMessage(e.buffer)}disconnect(){this.port.close()}}class a extends l{static getOnDidClientConnect(e){m(c(process),"Electron Utility Process");const o=new g;return process.parentPort.on("message",t=>{if(e?.handledClientConnection(t))return;const n=t.ports.at(0);n&&o.fire(n)}),r.map(o.event,t=>({protocol:new v(t),onDidClientDisconnect:r.fromNodeEventEmitter(t,"close")}))}constructor(e){super(a.getOnDidClientConnect(e))}}function F(s,e,o){const t=n=>{n.data===e&&(s.removeListener("message",t),o())};s.on("message",t)}export{a as Server,F as once};
