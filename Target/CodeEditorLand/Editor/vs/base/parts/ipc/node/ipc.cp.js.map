{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/node/ipc.cp.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChildProcess, fork, ForkOptions } from 'child_process';\nimport { createCancelablePromise, Delayer } from '../../../common/async.js';\nimport { VSBuffer } from '../../../common/buffer.js';\nimport { CancellationToken } from '../../../common/cancellation.js';\nimport { isRemoteConsoleLog, log } from '../../../common/console.js';\nimport * as errors from '../../../common/errors.js';\nimport { Emitter, Event } from '../../../common/event.js';\nimport { dispose, IDisposable, toDisposable } from '../../../common/lifecycle.js';\nimport { deepClone } from '../../../common/objects.js';\nimport { createQueuedSender } from '../../../node/processes.js';\nimport { removeDangerousEnvVariables } from '../../../common/processes.js';\nimport { ChannelClient as IPCClient, ChannelServer as IPCServer, IChannel, IChannelClient } from '../common/ipc.js';\n\n/**\n * This implementation doesn't perform well since it uses base64 encoding for buffers.\n * We should move all implementations to use named ipc.net, so we stop depending on cp.fork.\n */\n\nexport class Server<TContext extends string> extends IPCServer<TContext> {\n\tconstructor(ctx: TContext) {\n\t\tsuper({\n\t\t\tsend: r => {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.send?.((<Buffer>r.buffer).toString('base64'));\n\t\t\t\t} catch (e) { /* not much to do */ }\n\t\t\t},\n\t\t\tonMessage: Event.fromNodeEventEmitter(process, 'message', msg => VSBuffer.wrap(Buffer.from(msg, 'base64')))\n\t\t}, ctx);\n\n\t\tprocess.once('disconnect', () => this.dispose());\n\t}\n}\n\nexport interface IIPCOptions {\n\n\t/**\n\t * A descriptive name for the server this connection is to. Used in logging.\n\t */\n\tserverName: string;\n\n\t/**\n\t * Time in millies before killing the ipc process. The next request after killing will start it again.\n\t */\n\ttimeout?: number;\n\n\t/**\n\t * Arguments to the module to execute.\n\t */\n\targs?: string[];\n\n\t/**\n\t * Environment key-value pairs to be passed to the process that gets spawned for the ipc.\n\t */\n\tenv?: any;\n\n\t/**\n\t * Allows to assign a debug port for debugging the application executed.\n\t */\n\tdebug?: number;\n\n\t/**\n\t * Allows to assign a debug port for debugging the application and breaking it on the first line.\n\t */\n\tdebugBrk?: number;\n\n\t/**\n\t * If set, starts the fork with empty execArgv. If not set, execArgv from the parent process are inherited,\n\t * except --inspect= and --inspect-brk= which are filtered as they would result in a port conflict.\n\t */\n\tfreshExecArgv?: boolean;\n\n\t/**\n\t * Enables our createQueuedSender helper for this Client. Uses a queue when the internal Node.js queue is\n\t * full of messages - see notes on that method.\n\t */\n\tuseQueue?: boolean;\n}\n\nexport class Client implements IChannelClient, IDisposable {\n\n\tprivate disposeDelayer: Delayer<void> | undefined;\n\tprivate activeRequests = new Set<IDisposable>();\n\tprivate child: ChildProcess | null;\n\tprivate _client: IPCClient | null;\n\tprivate channels = new Map<string, IChannel>();\n\n\tprivate readonly _onDidProcessExit = new Emitter<{ code: number; signal: string }>();\n\treadonly onDidProcessExit = this._onDidProcessExit.event;\n\n\tconstructor(private modulePath: string, private options: IIPCOptions) {\n\t\tconst timeout = options && options.timeout ? options.timeout : 60000;\n\t\tthis.disposeDelayer = new Delayer<void>(timeout);\n\t\tthis.child = null;\n\t\tthis._client = null;\n\t}\n\n\tgetChannel<T extends IChannel>(channelName: string): T {\n\t\tconst that = this;\n\n\t\treturn {\n\t\t\tcall<T>(command: string, arg?: any, cancellationToken?: CancellationToken): Promise<T> {\n\t\t\t\treturn that.requestPromise<T>(channelName, command, arg, cancellationToken);\n\t\t\t},\n\t\t\tlisten(event: string, arg?: any) {\n\t\t\t\treturn that.requestEvent(channelName, event, arg);\n\t\t\t}\n\t\t} as T;\n\t}\n\n\tprotected requestPromise<T>(channelName: string, name: string, arg?: any, cancellationToken = CancellationToken.None): Promise<T> {\n\t\tif (!this.disposeDelayer) {\n\t\t\treturn Promise.reject(new Error('disposed'));\n\t\t}\n\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\treturn Promise.reject(errors.canceled());\n\t\t}\n\n\t\tthis.disposeDelayer.cancel();\n\n\t\tconst channel = this.getCachedChannel(channelName);\n\t\tconst result = createCancelablePromise(token => channel.call<T>(name, arg, token));\n\t\tconst cancellationTokenListener = cancellationToken.onCancellationRequested(() => result.cancel());\n\n\t\tconst disposable = toDisposable(() => result.cancel());\n\t\tthis.activeRequests.add(disposable);\n\n\t\tresult.finally(() => {\n\t\t\tcancellationTokenListener.dispose();\n\t\t\tthis.activeRequests.delete(disposable);\n\n\t\t\tif (this.activeRequests.size === 0 && this.disposeDelayer) {\n\t\t\t\tthis.disposeDelayer.trigger(() => this.disposeClient());\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprotected requestEvent<T>(channelName: string, name: string, arg?: any): Event<T> {\n\t\tif (!this.disposeDelayer) {\n\t\t\treturn Event.None;\n\t\t}\n\n\t\tthis.disposeDelayer.cancel();\n\n\t\tlet listener: IDisposable;\n\t\tconst emitter = new Emitter<any>({\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\tconst channel = this.getCachedChannel(channelName);\n\t\t\t\tconst event: Event<T> = channel.listen(name, arg);\n\n\t\t\t\tlistener = event(emitter.fire, emitter);\n\t\t\t\tthis.activeRequests.add(listener);\n\t\t\t},\n\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\tthis.activeRequests.delete(listener);\n\t\t\t\tlistener.dispose();\n\n\t\t\t\tif (this.activeRequests.size === 0 && this.disposeDelayer) {\n\t\t\t\t\tthis.disposeDelayer.trigger(() => this.disposeClient());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\tprivate get client(): IPCClient {\n\t\tif (!this._client) {\n\t\t\tconst args = this.options && this.options.args ? this.options.args : [];\n\t\t\tconst forkOpts: ForkOptions = Object.create(null);\n\n\t\t\tforkOpts.env = { ...deepClone(process.env), 'VSCODE_PARENT_PID': String(process.pid) };\n\n\t\t\tif (this.options && this.options.env) {\n\t\t\t\tforkOpts.env = { ...forkOpts.env, ...this.options.env };\n\t\t\t}\n\n\t\t\tif (this.options && this.options.freshExecArgv) {\n\t\t\t\tforkOpts.execArgv = [];\n\t\t\t}\n\n\t\t\tif (this.options && typeof this.options.debug === 'number') {\n\t\t\t\tforkOpts.execArgv = ['--nolazy', '--inspect=' + this.options.debug];\n\t\t\t}\n\n\t\t\tif (this.options && typeof this.options.debugBrk === 'number') {\n\t\t\t\tforkOpts.execArgv = ['--nolazy', '--inspect-brk=' + this.options.debugBrk];\n\t\t\t}\n\n\t\t\tif (forkOpts.execArgv === undefined) {\n\t\t\t\tforkOpts.execArgv = process.execArgv\t\t\t// if not set, the forked process inherits the execArgv of the parent process\n\t\t\t\t\t.filter(a => !/^--inspect(-brk)?=/.test(a)) // --inspect and --inspect-brk can not be inherited as the port would conflict\n\t\t\t\t\t.filter(a => !a.startsWith('--vscode-')); \t// --vscode-* arguments are unsupported by node.js and thus need to remove\n\t\t\t}\n\n\t\t\tremoveDangerousEnvVariables(forkOpts.env);\n\n\t\t\tthis.child = fork(this.modulePath, args, forkOpts);\n\n\t\t\tconst onMessageEmitter = new Emitter<VSBuffer>();\n\t\t\tconst onRawMessage = Event.fromNodeEventEmitter(this.child, 'message', msg => msg);\n\n\t\t\tconst rawMessageDisposable = onRawMessage(msg => {\n\n\t\t\t\t// Handle remote console logs specially\n\t\t\t\tif (isRemoteConsoleLog(msg)) {\n\t\t\t\t\tlog(msg, `IPC Library: ${this.options.serverName}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Anything else goes to the outside\n\t\t\t\tonMessageEmitter.fire(VSBuffer.wrap(Buffer.from(msg, 'base64')));\n\t\t\t});\n\n\t\t\tconst sender = this.options.useQueue ? createQueuedSender(this.child) : this.child;\n\t\t\tconst send = (r: VSBuffer) => this.child && this.child.connected && sender.send((<Buffer>r.buffer).toString('base64'));\n\t\t\tconst onMessage = onMessageEmitter.event;\n\t\t\tconst protocol = { send, onMessage };\n\n\t\t\tthis._client = new IPCClient(protocol);\n\n\t\t\tconst onExit = () => this.disposeClient();\n\t\t\tprocess.once('exit', onExit);\n\n\t\t\tthis.child.on('error', err => console.warn('IPC \"' + this.options.serverName + '\" errored with ' + err));\n\n\t\t\tthis.child.on('exit', (code: any, signal: any) => {\n\t\t\t\tprocess.removeListener('exit' as 'loaded', onExit); // https://github.com/electron/electron/issues/21475\n\t\t\t\trawMessageDisposable.dispose();\n\n\t\t\t\tthis.activeRequests.forEach(r => dispose(r));\n\t\t\t\tthis.activeRequests.clear();\n\n\t\t\t\tif (code !== 0 && signal !== 'SIGTERM') {\n\t\t\t\t\tconsole.warn('IPC \"' + this.options.serverName + '\" crashed with exit code ' + code + ' and signal ' + signal);\n\t\t\t\t}\n\n\t\t\t\tthis.disposeDelayer?.cancel();\n\t\t\t\tthis.disposeClient();\n\t\t\t\tthis._onDidProcessExit.fire({ code, signal });\n\t\t\t});\n\t\t}\n\n\t\treturn this._client;\n\t}\n\n\tprivate getCachedChannel(name: string): IChannel {\n\t\tlet channel = this.channels.get(name);\n\n\t\tif (!channel) {\n\t\t\tchannel = this.client.getChannel(name);\n\t\t\tthis.channels.set(name, channel);\n\t\t}\n\n\t\treturn channel;\n\t}\n\n\tprivate disposeClient() {\n\t\tif (this._client) {\n\t\t\tif (this.child) {\n\t\t\t\tthis.child.kill();\n\t\t\t\tthis.child = null;\n\t\t\t}\n\t\t\tthis._client = null;\n\t\t\tthis.channels.clear();\n\t\t}\n\t}\n\n\tdispose() {\n\t\tthis._onDidProcessExit.dispose();\n\t\tthis.disposeDelayer?.cancel();\n\t\tthis.disposeDelayer = undefined;\n\t\tthis.disposeClient();\n\t\tthis.activeRequests.clear();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
