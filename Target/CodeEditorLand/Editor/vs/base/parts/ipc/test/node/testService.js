import{timeout as t}from"../../../../common/async.js";import{Emitter as i}from"../../../../common/event.js";import"../../common/ipc.js";class v{_onMarco=new i;onMarco=this._onMarco.event;marco(){return this._onMarco.fire({answer:"polo"}),Promise.resolve("polo")}pong(e){return Promise.resolve({incoming:e,outgoing:"pong"})}cancelMe(){return Promise.resolve(t(100)).then(()=>!0)}}class u{constructor(e){this.testService=e}listen(e,n){switch(n){case"marco":return this.testService.onMarco}throw new Error("Event not found")}call(e,n,...o){switch(n){case"pong":return this.testService.pong(o[0]);case"cancelMe":return this.testService.cancelMe();case"marco":return this.testService.marco();default:return Promise.reject(new Error(`command not found: ${n}`))}}}class h{constructor(e){this.channel=e}get onMarco(){return this.channel.listen("marco")}marco(){return this.channel.call("marco")}pong(e){return this.channel.call("pong",e)}cancelMe(){return this.channel.call("cancelMe")}}export{u as TestChannel,v as TestService,h as TestServiceClient};
