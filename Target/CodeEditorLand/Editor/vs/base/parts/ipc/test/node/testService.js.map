{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/test/node/testService.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from '../../../../common/async.js';\nimport { Emitter, Event } from '../../../../common/event.js';\nimport { IChannel, IServerChannel } from '../../common/ipc.js';\n\nexport interface IMarcoPoloEvent {\n\tanswer: string;\n}\n\nexport interface ITestService {\n\tonMarco: Event<IMarcoPoloEvent>;\n\tmarco(): Promise<string>;\n\tpong(ping: string): Promise<{ incoming: string; outgoing: string }>;\n\tcancelMe(): Promise<boolean>;\n}\n\nexport class TestService implements ITestService {\n\n\tprivate readonly _onMarco = new Emitter<IMarcoPoloEvent>();\n\tonMarco: Event<IMarcoPoloEvent> = this._onMarco.event;\n\n\tmarco(): Promise<string> {\n\t\tthis._onMarco.fire({ answer: 'polo' });\n\t\treturn Promise.resolve('polo');\n\t}\n\n\tpong(ping: string): Promise<{ incoming: string; outgoing: string }> {\n\t\treturn Promise.resolve({ incoming: ping, outgoing: 'pong' });\n\t}\n\n\tcancelMe(): Promise<boolean> {\n\t\treturn Promise.resolve(timeout(100)).then(() => true);\n\t}\n}\n\nexport class TestChannel implements IServerChannel {\n\n\tconstructor(private testService: ITestService) { }\n\n\tlisten(_: unknown, event: string): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'marco': return this.testService.onMarco;\n\t\t}\n\n\t\tthrow new Error('Event not found');\n\t}\n\n\tcall(_: unknown, command: string, ...args: any[]): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'pong': return this.testService.pong(args[0]);\n\t\t\tcase 'cancelMe': return this.testService.cancelMe();\n\t\t\tcase 'marco': return this.testService.marco();\n\t\t\tdefault: return Promise.reject(new Error(`command not found: ${command}`));\n\t\t}\n\t}\n}\n\nexport class TestServiceClient implements ITestService {\n\n\tget onMarco(): Event<IMarcoPoloEvent> { return this.channel.listen('marco'); }\n\n\tconstructor(private channel: IChannel) { }\n\n\tmarco(): Promise<string> {\n\t\treturn this.channel.call('marco');\n\t}\n\n\tpong(ping: string): Promise<{ incoming: string; outgoing: string }> {\n\t\treturn this.channel.call('pong', ping);\n\t}\n\n\tcancelMe(): Promise<boolean> {\n\t\treturn this.channel.call('cancelMe');\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,SAAS,aAAa;AAC/B,SAAS,UAAU,sBAAsB;AAalC,MAAM,YAAoC;AAAA,EApBjD,OAoBiD;AAAA;AAAA;AAAA,EAE/B,WAAW,IAAI,QAAyB;AAAA,EACzD,UAAkC,KAAK,SAAS;AAAA,EAEhD,QAAyB;AACxB,SAAK,SAAS,KAAK,EAAE,QAAQ,OAAO,CAAC;AACrC,WAAO,QAAQ,QAAQ,MAAM;AAAA,EAC9B;AAAA,EAEA,KAAK,MAA+D;AACnE,WAAO,QAAQ,QAAQ,EAAE,UAAU,MAAM,UAAU,OAAO,CAAC;AAAA,EAC5D;AAAA,EAEA,WAA6B;AAC5B,WAAO,QAAQ,QAAQ,QAAQ,GAAG,CAAC,EAAE,KAAK,MAAM,IAAI;AAAA,EACrD;AACD;AAEO,MAAM,YAAsC;AAAA,EAElD,YAAoB,aAA2B;AAA3B;AAAA,EAA6B;AAAA,EAzClD,OAuCmD;AAAA;AAAA;AAAA,EAIlD,OAAO,GAAY,OAA2B;AAC7C,YAAQ,OAAO;AAAA,MACd,KAAK;AAAS,eAAO,KAAK,YAAY;AAAA,IACvC;AAEA,UAAM,IAAI,MAAM,iBAAiB;AAAA,EAClC;AAAA,EAEA,KAAK,GAAY,YAAoB,MAA2B;AAC/D,YAAQ,SAAS;AAAA,MAChB,KAAK;AAAQ,eAAO,KAAK,YAAY,KAAK,KAAK,CAAC,CAAC;AAAA,MACjD,KAAK;AAAY,eAAO,KAAK,YAAY,SAAS;AAAA,MAClD,KAAK;AAAS,eAAO,KAAK,YAAY,MAAM;AAAA,MAC5C;AAAS,eAAO,QAAQ,OAAO,IAAI,MAAM,sBAAsB,OAAO,EAAE,CAAC;AAAA,IAC1E;AAAA,EACD;AACD;AAEO,MAAM,kBAA0C;AAAA,EAItD,YAAoB,SAAmB;AAAnB;AAAA,EAAqB;AAAA,EAjE1C,OA6DuD;AAAA;AAAA;AAAA,EAEtD,IAAI,UAAkC;AAAE,WAAO,KAAK,QAAQ,OAAO,OAAO;AAAA,EAAG;AAAA,EAI7E,QAAyB;AACxB,WAAO,KAAK,QAAQ,KAAK,OAAO;AAAA,EACjC;AAAA,EAEA,KAAK,MAA+D;AACnE,WAAO,KAAK,QAAQ,KAAK,QAAQ,IAAI;AAAA,EACtC;AAAA,EAEA,WAA6B;AAC5B,WAAO,KAAK,QAAQ,KAAK,UAAU;AAAA,EACpC;AACD;",
  "names": []
}
