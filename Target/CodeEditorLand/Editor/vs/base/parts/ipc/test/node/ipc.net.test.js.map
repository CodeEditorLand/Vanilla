{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/test/node/ipc.net.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport sinon from 'sinon';\nimport { EventEmitter } from 'events';\nimport { AddressInfo, connect, createServer, Server, Socket } from 'net';\nimport { tmpdir } from 'os';\nimport { Barrier, timeout } from '../../../../common/async.js';\nimport { VSBuffer } from '../../../../common/buffer.js';\nimport { Emitter, Event } from '../../../../common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../common/lifecycle.js';\nimport { ILoadEstimator, PersistentProtocol, Protocol, ProtocolConstants, SocketCloseEvent, SocketDiagnosticsEventType } from '../../common/ipc.net.js';\nimport { createRandomIPCHandle, createStaticIPCHandle, NodeSocket, WebSocketNodeSocket } from '../../node/ipc.net.js';\nimport { flakySuite } from '../../../../test/common/testUtils.js';\nimport { runWithFakedTimers } from '../../../../test/common/timeTravelScheduler.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../test/common/utils.js';\n\nclass MessageStream extends Disposable {\n\n\tprivate _currentComplete: ((data: VSBuffer) => void) | null;\n\tprivate _messages: VSBuffer[];\n\n\tconstructor(x: Protocol | PersistentProtocol) {\n\t\tsuper();\n\t\tthis._currentComplete = null;\n\t\tthis._messages = [];\n\t\tthis._register(x.onMessage(data => {\n\t\t\tthis._messages.push(data);\n\t\t\tthis._trigger();\n\t\t}));\n\t}\n\n\tprivate _trigger(): void {\n\t\tif (!this._currentComplete) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._messages.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst complete = this._currentComplete;\n\t\tconst msg = this._messages.shift()!;\n\n\t\tthis._currentComplete = null;\n\t\tcomplete(msg);\n\t}\n\n\tpublic waitForOne(): Promise<VSBuffer> {\n\t\treturn new Promise<VSBuffer>((complete) => {\n\t\t\tthis._currentComplete = complete;\n\t\t\tthis._trigger();\n\t\t});\n\t}\n}\n\nclass EtherStream extends EventEmitter {\n\tconstructor(\n\t\tprivate readonly _ether: Ether,\n\t\tprivate readonly _name: 'a' | 'b'\n\t) {\n\t\tsuper();\n\t}\n\n\twrite(data: Buffer, cb?: Function): boolean {\n\t\tif (!Buffer.isBuffer(data)) {\n\t\t\tthrow new Error(`Invalid data`);\n\t\t}\n\t\tthis._ether.write(this._name, data);\n\t\treturn true;\n\t}\n\n\tdestroy(): void {\n\t}\n}\n\nclass Ether {\n\n\tprivate readonly _a: EtherStream;\n\tprivate readonly _b: EtherStream;\n\n\tprivate _ab: Buffer[];\n\tprivate _ba: Buffer[];\n\n\tpublic get a(): Socket {\n\t\treturn <any>this._a;\n\t}\n\n\tpublic get b(): Socket {\n\t\treturn <any>this._b;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _wireLatency = 0\n\t) {\n\t\tthis._a = new EtherStream(this, 'a');\n\t\tthis._b = new EtherStream(this, 'b');\n\t\tthis._ab = [];\n\t\tthis._ba = [];\n\t}\n\n\tpublic write(from: 'a' | 'b', data: Buffer): void {\n\t\tsetTimeout(() => {\n\t\t\tif (from === 'a') {\n\t\t\t\tthis._ab.push(data);\n\t\t\t} else {\n\t\t\t\tthis._ba.push(data);\n\t\t\t}\n\n\t\t\tsetTimeout(() => this._deliver(), 0);\n\t\t}, this._wireLatency);\n\t}\n\n\tprivate _deliver(): void {\n\n\t\tif (this._ab.length > 0) {\n\t\t\tconst data = Buffer.concat(this._ab);\n\t\t\tthis._ab.length = 0;\n\t\t\tthis._b.emit('data', data);\n\t\t\tsetTimeout(() => this._deliver(), 0);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._ba.length > 0) {\n\t\t\tconst data = Buffer.concat(this._ba);\n\t\t\tthis._ba.length = 0;\n\t\t\tthis._a.emit('data', data);\n\t\t\tsetTimeout(() => this._deliver(), 0);\n\t\t\treturn;\n\t\t}\n\n\t}\n}\n\nsuite('IPC, Socket Protocol', () => {\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet ether: Ether;\n\n\tsetup(() => {\n\t\tether = new Ether();\n\t});\n\n\ttest('read/write', async () => {\n\n\t\tconst a = new Protocol(new NodeSocket(ether.a));\n\t\tconst b = new Protocol(new NodeSocket(ether.b));\n\t\tconst bMessages = new MessageStream(b);\n\n\t\ta.send(VSBuffer.fromString('foobarfarboo'));\n\t\tconst msg1 = await bMessages.waitForOne();\n\t\tassert.strictEqual(msg1.toString(), 'foobarfarboo');\n\n\t\tconst buffer = VSBuffer.alloc(1);\n\t\tbuffer.writeUInt8(123, 0);\n\t\ta.send(buffer);\n\t\tconst msg2 = await bMessages.waitForOne();\n\t\tassert.strictEqual(msg2.readUInt8(0), 123);\n\n\t\tbMessages.dispose();\n\t\ta.dispose();\n\t\tb.dispose();\n\t});\n\n\n\ttest('read/write, object data', async () => {\n\n\t\tconst a = new Protocol(new NodeSocket(ether.a));\n\t\tconst b = new Protocol(new NodeSocket(ether.b));\n\t\tconst bMessages = new MessageStream(b);\n\n\t\tconst data = {\n\t\t\tpi: Math.PI,\n\t\t\tfoo: 'bar',\n\t\t\tmore: true,\n\t\t\tdata: 'Hello World'.split('')\n\t\t};\n\n\t\ta.send(VSBuffer.fromString(JSON.stringify(data)));\n\t\tconst msg = await bMessages.waitForOne();\n\t\tassert.deepStrictEqual(JSON.parse(msg.toString()), data);\n\n\t\tbMessages.dispose();\n\t\ta.dispose();\n\t\tb.dispose();\n\t});\n\n\n\n\ttest('issue #211462: destroy socket after end timeout', async () => {\n\t\tconst socket = new EventEmitter();\n\t\tObject.assign(socket, { destroy: () => socket.emit('close') });\n\t\tconst protocol = ds.add(new Protocol(new NodeSocket(socket as Socket)));\n\n\t\tconst disposed = sinon.stub();\n\t\tconst timers = sinon.useFakeTimers();\n\n\t\tds.add(toDisposable(() => timers.restore()));\n\t\tds.add(protocol.onDidDispose(disposed));\n\n\t\tsocket.emit('end');\n\t\tassert.ok(!disposed.called);\n\t\ttimers.tick(29_999);\n\t\tassert.ok(!disposed.called);\n\t\ttimers.tick(1);\n\t\tassert.ok(disposed.called);\n\t});\n});\n\nsuite('PersistentProtocol reconnection', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('acks get piggybacked with messages', async () => {\n\t\tconst ether = new Ether();\n\t\tconst a = new PersistentProtocol({ socket: new NodeSocket(ether.a) });\n\t\tconst aMessages = new MessageStream(a);\n\t\tconst b = new PersistentProtocol({ socket: new NodeSocket(ether.b) });\n\t\tconst bMessages = new MessageStream(b);\n\n\t\ta.send(VSBuffer.fromString('a1'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\ta.send(VSBuffer.fromString('a2'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 2);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\ta.send(VSBuffer.fromString('a3'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tconst a1 = await bMessages.waitForOne();\n\t\tassert.strictEqual(a1.toString(), 'a1');\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tconst a2 = await bMessages.waitForOne();\n\t\tassert.strictEqual(a2.toString(), 'a2');\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tconst a3 = await bMessages.waitForOne();\n\t\tassert.strictEqual(a3.toString(), 'a3');\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\tb.send(VSBuffer.fromString('b1'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 3);\n\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\tconst b1 = await aMessages.waitForOne();\n\t\tassert.strictEqual(b1.toString(), 'b1');\n\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\ta.send(VSBuffer.fromString('a4'));\n\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\tconst b2 = await bMessages.waitForOne();\n\t\tassert.strictEqual(b2.toString(), 'a4');\n\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\taMessages.dispose();\n\t\tbMessages.dispose();\n\t\ta.dispose();\n\t\tb.dispose();\n\t});\n\n\ttest('ack gets sent after a while', async () => {\n\t\tawait runWithFakedTimers({ useFakeTimers: true, maxTaskCount: 100 }, async () => {\n\t\t\tconst loadEstimator: ILoadEstimator = {\n\t\t\t\thasHighLoad: () => false\n\t\t\t};\n\t\t\tconst ether = new Ether();\n\t\t\tconst aSocket = new NodeSocket(ether.a);\n\t\t\tconst a = new PersistentProtocol({ socket: aSocket, loadEstimator });\n\t\t\tconst aMessages = new MessageStream(a);\n\t\t\tconst bSocket = new NodeSocket(ether.b);\n\t\t\tconst b = new PersistentProtocol({ socket: bSocket, loadEstimator });\n\t\t\tconst bMessages = new MessageStream(b);\n\n\t\t\t// send one message A -> B\n\t\t\ta.send(VSBuffer.fromString('a1'));\n\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\t\t\tconst a1 = await bMessages.waitForOne();\n\t\t\tassert.strictEqual(a1.toString(), 'a1');\n\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t// wait for ack to arrive B -> A\n\t\t\tawait timeout(2 * ProtocolConstants.AcknowledgeTime);\n\t\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\taMessages.dispose();\n\t\t\tbMessages.dispose();\n\t\t\ta.dispose();\n\t\t\tb.dispose();\n\t\t});\n\t});\n\n\ttest('messages that are never written to a socket should not cause an ack timeout', async () => {\n\t\tawait runWithFakedTimers(\n\t\t\t{\n\t\t\t\tuseFakeTimers: true,\n\t\t\t\tuseSetImmediate: true,\n\t\t\t\tmaxTaskCount: 1000\n\t\t\t},\n\t\t\tasync () => {\n\t\t\t\t// Date.now() in fake timers starts at 0, which is very inconvenient\n\t\t\t\t// since we want to test exactly that a certain field is not initialized with Date.now()\n\t\t\t\t// As a workaround we wait such that Date.now() starts producing more realistic values\n\t\t\t\tawait timeout(60 * 60 * 1000);\n\n\t\t\t\tconst loadEstimator: ILoadEstimator = {\n\t\t\t\t\thasHighLoad: () => false\n\t\t\t\t};\n\t\t\t\tconst ether = new Ether();\n\t\t\t\tconst aSocket = new NodeSocket(ether.a);\n\t\t\t\tconst a = new PersistentProtocol({ socket: aSocket, loadEstimator, sendKeepAlive: false });\n\t\t\t\tconst aMessages = new MessageStream(a);\n\t\t\t\tconst bSocket = new NodeSocket(ether.b);\n\t\t\t\tconst b = new PersistentProtocol({ socket: bSocket, loadEstimator, sendKeepAlive: false });\n\t\t\t\tconst bMessages = new MessageStream(b);\n\n\t\t\t\t// send message a1 before reconnection to get _recvAckCheck() scheduled\n\t\t\t\ta.send(VSBuffer.fromString('a1'));\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t\t// read message a1 at B\n\t\t\t\tconst a1 = await bMessages.waitForOne();\n\t\t\t\tassert.strictEqual(a1.toString(), 'a1');\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t\t// send message b1 to send the ack for a1\n\t\t\t\tb.send(VSBuffer.fromString('b1'));\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\t\t\t// read message b1 at A to receive the ack for a1\n\t\t\t\tconst b1 = await aMessages.waitForOne();\n\t\t\t\tassert.strictEqual(b1.toString(), 'b1');\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\t\t\t// begin reconnection\n\t\t\t\taSocket.dispose();\n\t\t\t\tconst aSocket2 = new NodeSocket(ether.a);\n\t\t\t\ta.beginAcceptReconnection(aSocket2, null);\n\n\t\t\t\tlet timeoutListenerCalled = false;\n\t\t\t\tconst socketTimeoutListener = a.onSocketTimeout(() => {\n\t\t\t\t\ttimeoutListenerCalled = true;\n\t\t\t\t});\n\n\t\t\t\t// send message 2 during reconnection\n\t\t\t\ta.send(VSBuffer.fromString('a2'));\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\t\t\t// wait for scheduled _recvAckCheck() to execute\n\t\t\t\tawait timeout(2 * ProtocolConstants.TimeoutTime);\n\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(timeoutListenerCalled, false);\n\n\t\t\t\ta.endAcceptReconnection();\n\t\t\t\tassert.strictEqual(timeoutListenerCalled, false);\n\n\t\t\t\tawait timeout(2 * ProtocolConstants.TimeoutTime);\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\t\t\t\tassert.strictEqual(timeoutListenerCalled, false);\n\n\t\t\t\tsocketTimeoutListener.dispose();\n\t\t\t\taMessages.dispose();\n\t\t\t\tbMessages.dispose();\n\t\t\t\ta.dispose();\n\t\t\t\tb.dispose();\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('acks are always sent after a reconnection', async () => {\n\t\tawait runWithFakedTimers(\n\t\t\t{\n\t\t\t\tuseFakeTimers: true,\n\t\t\t\tuseSetImmediate: true,\n\t\t\t\tmaxTaskCount: 1000\n\t\t\t},\n\t\t\tasync () => {\n\n\t\t\t\tconst loadEstimator: ILoadEstimator = {\n\t\t\t\t\thasHighLoad: () => false\n\t\t\t\t};\n\t\t\t\tconst wireLatency = 1000;\n\t\t\t\tconst ether = new Ether(wireLatency);\n\t\t\t\tconst aSocket = new NodeSocket(ether.a);\n\t\t\t\tconst a = new PersistentProtocol({ socket: aSocket, loadEstimator });\n\t\t\t\tconst aMessages = new MessageStream(a);\n\t\t\t\tconst bSocket = new NodeSocket(ether.b);\n\t\t\t\tconst b = new PersistentProtocol({ socket: bSocket, loadEstimator });\n\t\t\t\tconst bMessages = new MessageStream(b);\n\n\t\t\t\t// send message a1 to have something unacknowledged\n\t\t\t\ta.send(VSBuffer.fromString('a1'));\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t\t// read message a1 at B\n\t\t\t\tconst a1 = await bMessages.waitForOne();\n\t\t\t\tassert.strictEqual(a1.toString(), 'a1');\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t\t// wait for B to send an ACK message,\n\t\t\t\t// but resume before A receives it\n\t\t\t\tawait timeout(ProtocolConstants.AcknowledgeTime + wireLatency / 2);\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t\t// simulate complete reconnection\n\t\t\t\taSocket.dispose();\n\t\t\t\tbSocket.dispose();\n\t\t\t\tconst ether2 = new Ether(wireLatency);\n\t\t\t\tconst aSocket2 = new NodeSocket(ether2.a);\n\t\t\t\tconst bSocket2 = new NodeSocket(ether2.b);\n\t\t\t\tb.beginAcceptReconnection(bSocket2, null);\n\t\t\t\tb.endAcceptReconnection();\n\t\t\t\ta.beginAcceptReconnection(aSocket2, null);\n\t\t\t\ta.endAcceptReconnection();\n\n\t\t\t\t// wait for quite some time\n\t\t\t\tawait timeout(2 * ProtocolConstants.AcknowledgeTime + wireLatency);\n\t\t\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\t\taMessages.dispose();\n\t\t\t\tbMessages.dispose();\n\t\t\t\ta.dispose();\n\t\t\t\tb.dispose();\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('onSocketTimeout is emitted at most once every 20s', async () => {\n\t\tawait runWithFakedTimers(\n\t\t\t{\n\t\t\t\tuseFakeTimers: true,\n\t\t\t\tuseSetImmediate: true,\n\t\t\t\tmaxTaskCount: 1000\n\t\t\t},\n\t\t\tasync () => {\n\n\t\t\t\tconst loadEstimator: ILoadEstimator = {\n\t\t\t\t\thasHighLoad: () => false\n\t\t\t\t};\n\t\t\t\tconst ether = new Ether();\n\t\t\t\tconst aSocket = new NodeSocket(ether.a);\n\t\t\t\tconst a = new PersistentProtocol({ socket: aSocket, loadEstimator });\n\t\t\t\tconst aMessages = new MessageStream(a);\n\t\t\t\tconst bSocket = new NodeSocket(ether.b);\n\t\t\t\tconst b = new PersistentProtocol({ socket: bSocket, loadEstimator });\n\t\t\t\tconst bMessages = new MessageStream(b);\n\n\t\t\t\t// never receive acks\n\t\t\t\tb.pauseSocketWriting();\n\n\t\t\t\t// send message a1 to have something unacknowledged\n\t\t\t\ta.send(VSBuffer.fromString('a1'));\n\n\t\t\t\t// wait for the first timeout to fire\n\t\t\t\tawait Event.toPromise(a.onSocketTimeout);\n\n\t\t\t\tlet timeoutFiredAgain = false;\n\t\t\t\tconst timeoutListener = a.onSocketTimeout(() => {\n\t\t\t\t\ttimeoutFiredAgain = true;\n\t\t\t\t});\n\n\t\t\t\t// send more messages\n\t\t\t\ta.send(VSBuffer.fromString('a2'));\n\t\t\t\ta.send(VSBuffer.fromString('a3'));\n\n\t\t\t\t// wait for 10s\n\t\t\t\tawait timeout(ProtocolConstants.TimeoutTime / 2);\n\n\t\t\t\tassert.strictEqual(timeoutFiredAgain, false);\n\n\t\t\t\ttimeoutListener.dispose();\n\t\t\t\taMessages.dispose();\n\t\t\t\tbMessages.dispose();\n\t\t\t\ta.dispose();\n\t\t\t\tb.dispose();\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('writing can be paused', async () => {\n\t\tawait runWithFakedTimers({ useFakeTimers: true, maxTaskCount: 100 }, async () => {\n\t\t\tconst loadEstimator: ILoadEstimator = {\n\t\t\t\thasHighLoad: () => false\n\t\t\t};\n\t\t\tconst ether = new Ether();\n\t\t\tconst aSocket = new NodeSocket(ether.a);\n\t\t\tconst a = new PersistentProtocol({ socket: aSocket, loadEstimator });\n\t\t\tconst aMessages = new MessageStream(a);\n\t\t\tconst bSocket = new NodeSocket(ether.b);\n\t\t\tconst b = new PersistentProtocol({ socket: bSocket, loadEstimator });\n\t\t\tconst bMessages = new MessageStream(b);\n\n\t\t\t// send one message A -> B\n\t\t\ta.send(VSBuffer.fromString('a1'));\n\t\t\tconst a1 = await bMessages.waitForOne();\n\t\t\tassert.strictEqual(a1.toString(), 'a1');\n\n\t\t\t// ask A to pause writing\n\t\t\tb.sendPause();\n\n\t\t\t// send a message B -> A\n\t\t\tb.send(VSBuffer.fromString('b1'));\n\t\t\tconst b1 = await aMessages.waitForOne();\n\t\t\tassert.strictEqual(b1.toString(), 'b1');\n\n\t\t\t// send a message A -> B (this should be blocked at A)\n\t\t\ta.send(VSBuffer.fromString('a2'));\n\n\t\t\t// wait a long time and check that not even acks are written\n\t\t\tawait timeout(2 * ProtocolConstants.AcknowledgeTime);\n\t\t\tassert.strictEqual(a.unacknowledgedCount, 1);\n\t\t\tassert.strictEqual(b.unacknowledgedCount, 1);\n\n\t\t\t// ask A to resume writing\n\t\t\tb.sendResume();\n\n\t\t\t// check that B receives message\n\t\t\tconst a2 = await bMessages.waitForOne();\n\t\t\tassert.strictEqual(a2.toString(), 'a2');\n\n\t\t\t// wait a long time and check that acks are written\n\t\t\tawait timeout(2 * ProtocolConstants.AcknowledgeTime);\n\t\t\tassert.strictEqual(a.unacknowledgedCount, 0);\n\t\t\tassert.strictEqual(b.unacknowledgedCount, 0);\n\n\t\t\taMessages.dispose();\n\t\t\tbMessages.dispose();\n\t\t\ta.dispose();\n\t\t\tb.dispose();\n\t\t});\n\t});\n});\n\nflakySuite('IPC, create handle', () => {\n\n\ttest('createRandomIPCHandle', async () => {\n\t\treturn testIPCHandle(createRandomIPCHandle());\n\t});\n\n\ttest('createStaticIPCHandle', async () => {\n\t\treturn testIPCHandle(createStaticIPCHandle(tmpdir(), 'test', '1.64.0'));\n\t});\n\n\tfunction testIPCHandle(handle: string): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst pipeName = createRandomIPCHandle();\n\n\t\t\tconst server = createServer();\n\n\t\t\tserver.on('error', () => {\n\t\t\t\treturn new Promise(() => server.close(() => reject()));\n\t\t\t});\n\n\t\t\tserver.listen(pipeName, () => {\n\t\t\t\tserver.removeListener('error', reject);\n\n\t\t\t\treturn new Promise(() => {\n\t\t\t\t\tserver.close(() => resolve());\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n});\n\nsuite('WebSocketNodeSocket', () => {\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction toUint8Array(data: number[]): Uint8Array {\n\t\tconst result = new Uint8Array(data.length);\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tresult[i] = data[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction fromUint8Array(data: Uint8Array): number[] {\n\t\tconst result = [];\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tresult[i] = data[i];\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction fromCharCodeArray(data: number[]): string {\n\t\tlet result = '';\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tresult += String.fromCharCode(data[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tclass FakeNodeSocket extends Disposable {\n\n\t\tprivate readonly _onData = new Emitter<VSBuffer>();\n\t\tpublic readonly onData = this._onData.event;\n\n\t\tprivate readonly _onClose = new Emitter<SocketCloseEvent>();\n\t\tpublic readonly onClose = this._onClose.event;\n\n\t\tpublic writtenData: VSBuffer[] = [];\n\n\t\tpublic traceSocketEvent(type: SocketDiagnosticsEventType, data?: VSBuffer | Uint8Array | ArrayBuffer | ArrayBufferView | any): void {\n\t\t}\n\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t}\n\n\t\tpublic write(data: VSBuffer): void {\n\t\t\tthis.writtenData.push(data);\n\t\t}\n\n\t\tpublic fireData(data: number[]): void {\n\t\t\tthis._onData.fire(VSBuffer.wrap(toUint8Array(data)));\n\t\t}\n\t}\n\n\tasync function testReading(frames: number[][], permessageDeflate: boolean): Promise<string> {\n\t\tconst disposables = new DisposableStore();\n\t\tconst socket = new FakeNodeSocket();\n\t\tconst webSocket = disposables.add(new WebSocketNodeSocket(<any>socket, permessageDeflate, null, false));\n\n\t\tconst barrier = new Barrier();\n\t\tlet remainingFrameCount = frames.length;\n\n\t\tlet receivedData: string = '';\n\t\tdisposables.add(webSocket.onData((buff) => {\n\t\t\treceivedData += fromCharCodeArray(fromUint8Array(buff.buffer));\n\t\t\tremainingFrameCount--;\n\t\t\tif (remainingFrameCount === 0) {\n\t\t\t\tbarrier.open();\n\t\t\t}\n\t\t}));\n\n\t\tfor (let i = 0; i < frames.length; i++) {\n\t\t\tsocket.fireData(frames[i]);\n\t\t}\n\n\t\tawait barrier.wait();\n\n\t\tdisposables.dispose();\n\n\t\treturn receivedData;\n\t}\n\n\ttest('A single-frame unmasked text message', async () => {\n\t\tconst frames = [\n\t\t\t[0x81, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f] // contains \"Hello\"\n\t\t];\n\t\tconst actual = await testReading(frames, false);\n\t\tassert.deepStrictEqual(actual, 'Hello');\n\t});\n\n\ttest('A single-frame masked text message', async () => {\n\t\tconst frames = [\n\t\t\t[0x81, 0x85, 0x37, 0xfa, 0x21, 0x3d, 0x7f, 0x9f, 0x4d, 0x51, 0x58] // contains \"Hello\"\n\t\t];\n\t\tconst actual = await testReading(frames, false);\n\t\tassert.deepStrictEqual(actual, 'Hello');\n\t});\n\n\ttest('A fragmented unmasked text message', async () => {\n\t\t// contains \"Hello\"\n\t\tconst frames = [\n\t\t\t[0x01, 0x03, 0x48, 0x65, 0x6c], // contains \"Hel\"\n\t\t\t[0x80, 0x02, 0x6c, 0x6f], // contains \"lo\"\n\t\t];\n\t\tconst actual = await testReading(frames, false);\n\t\tassert.deepStrictEqual(actual, 'Hello');\n\t});\n\n\tsuite('compression', () => {\n\t\ttest('A single-frame compressed text message', async () => {\n\t\t\t// contains \"Hello\"\n\t\t\tconst frames = [\n\t\t\t\t[0xc1, 0x07, 0xf2, 0x48, 0xcd, 0xc9, 0xc9, 0x07, 0x00], // contains \"Hello\"\n\t\t\t];\n\t\t\tconst actual = await testReading(frames, true);\n\t\t\tassert.deepStrictEqual(actual, 'Hello');\n\t\t});\n\n\t\ttest('A fragmented compressed text message', async () => {\n\t\t\t// contains \"Hello\"\n\t\t\tconst frames = [  // contains \"Hello\"\n\t\t\t\t[0x41, 0x03, 0xf2, 0x48, 0xcd],\n\t\t\t\t[0x80, 0x04, 0xc9, 0xc9, 0x07, 0x00]\n\t\t\t];\n\t\t\tconst actual = await testReading(frames, true);\n\t\t\tassert.deepStrictEqual(actual, 'Hello');\n\t\t});\n\n\t\ttest('A single-frame non-compressed text message', async () => {\n\t\t\tconst frames = [\n\t\t\t\t[0x81, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f] // contains \"Hello\"\n\t\t\t];\n\t\t\tconst actual = await testReading(frames, true);\n\t\t\tassert.deepStrictEqual(actual, 'Hello');\n\t\t});\n\n\t\ttest('A single-frame compressed text message followed by a single-frame non-compressed text message', async () => {\n\t\t\tconst frames = [\n\t\t\t\t[0xc1, 0x07, 0xf2, 0x48, 0xcd, 0xc9, 0xc9, 0x07, 0x00], // contains \"Hello\"\n\t\t\t\t[0x81, 0x05, 0x77, 0x6f, 0x72, 0x6c, 0x64] // contains \"world\"\n\t\t\t];\n\t\t\tconst actual = await testReading(frames, true);\n\t\t\tassert.deepStrictEqual(actual, 'Helloworld');\n\t\t});\n\t});\n\n\ttest('Large buffers are split and sent in chunks', async () => {\n\n\t\tlet receivingSideOnDataCallCount = 0;\n\t\tlet receivingSideTotalBytes = 0;\n\t\tconst receivingSideSocketClosedBarrier = new Barrier();\n\n\t\tconst server = await listenOnRandomPort((socket) => {\n\t\t\t// stop the server when the first connection is received\n\t\t\tserver.close();\n\n\t\t\tconst webSocketNodeSocket = new WebSocketNodeSocket(new NodeSocket(socket), true, null, false);\n\t\t\tds.add(webSocketNodeSocket.onData((data) => {\n\t\t\t\treceivingSideOnDataCallCount++;\n\t\t\t\treceivingSideTotalBytes += data.byteLength;\n\t\t\t}));\n\n\t\t\tds.add(webSocketNodeSocket.onClose(() => {\n\t\t\t\twebSocketNodeSocket.dispose();\n\t\t\t\treceivingSideSocketClosedBarrier.open();\n\t\t\t}));\n\t\t});\n\n\t\tconst socket = connect({\n\t\t\thost: '127.0.0.1',\n\t\t\tport: (<AddressInfo>server.address()).port\n\t\t});\n\n\t\tconst buff = generateRandomBuffer(1 * 1024 * 1024);\n\n\t\tconst webSocketNodeSocket = new WebSocketNodeSocket(new NodeSocket(socket), true, null, false);\n\t\twebSocketNodeSocket.write(buff);\n\t\tawait webSocketNodeSocket.drain();\n\t\twebSocketNodeSocket.dispose();\n\t\tawait receivingSideSocketClosedBarrier.wait();\n\n\t\tassert.strictEqual(receivingSideTotalBytes, buff.byteLength);\n\t\tassert.strictEqual(receivingSideOnDataCallCount, 4);\n\t});\n\n\ttest('issue #194284: ping/pong opcodes are supported', async () => {\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst socket = new FakeNodeSocket();\n\t\tconst webSocket = disposables.add(new WebSocketNodeSocket(<any>socket, false, null, false));\n\n\t\tlet receivedData: string = '';\n\t\tdisposables.add(webSocket.onData((buff) => {\n\t\t\treceivedData += fromCharCodeArray(fromUint8Array(buff.buffer));\n\t\t}));\n\n\t\t// A single-frame non-compressed text message that contains \"Hello\"\n\t\tsocket.fireData([0x81, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f]);\n\n\t\t// A ping message that contains \"data\"\n\t\tsocket.fireData([0x89, 0x04, 0x64, 0x61, 0x74, 0x61]);\n\n\t\t// Another single-frame non-compressed text message that contains \"Hello\"\n\t\tsocket.fireData([0x81, 0x05, 0x48, 0x65, 0x6c, 0x6c, 0x6f]);\n\n\t\tassert.strictEqual(receivedData, 'HelloHello');\n\t\tassert.deepStrictEqual(\n\t\t\tsocket.writtenData.map(x => fromUint8Array(x.buffer)),\n\t\t\t[\n\t\t\t\t// A pong message that contains \"data\"\n\t\t\t\t[0x8A, 0x04, 0x64, 0x61, 0x74, 0x61]\n\t\t\t]\n\t\t);\n\n\t\tdisposables.dispose();\n\n\t\treturn receivedData;\n\t});\n\n\tfunction generateRandomBuffer(size: number): VSBuffer {\n\t\tconst buff = VSBuffer.alloc(size);\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tbuff.writeUInt8(Math.floor(256 * Math.random()), i);\n\t\t}\n\t\treturn buff;\n\t}\n\n\tfunction listenOnRandomPort(handler: (socket: Socket) => void): Promise<Server> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst server = createServer(handler).listen(0);\n\t\t\tserver.on('listening', () => {\n\t\t\t\tresolve(server);\n\t\t\t});\n\t\t\tserver.on('error', (err) => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n});\n"],
  "mappings": "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",
  "names": ["socket", "webSocketNodeSocket"]
}
