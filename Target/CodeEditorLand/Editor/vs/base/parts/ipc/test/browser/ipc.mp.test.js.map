{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/test/browser/ipc.mp.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { CancellationToken } from '../../../../common/cancellation.js';\nimport { Event } from '../../../../common/event.js';\nimport { Client as MessagePortClient } from '../../browser/ipc.mp.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../test/common/utils.js';\n\nsuite('IPC, MessagePorts', () => {\n\n\ttest('message passing', async () => {\n\t\tconst { port1, port2 } = new MessageChannel();\n\n\t\tconst client1 = new MessagePortClient(port1, 'client1');\n\t\tconst client2 = new MessagePortClient(port2, 'client2');\n\n\t\tclient1.registerChannel('client1', {\n\t\t\tcall(_: unknown, command: string, arg: any, cancellationToken: CancellationToken): Promise<any> {\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase 'testMethodClient1': return Promise.resolve('success1');\n\t\t\t\t\tdefault: return Promise.reject(new Error('not implemented'));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\t\t\tswitch (event) {\n\t\t\t\t\tdefault: throw new Error('not implemented');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tclient2.registerChannel('client2', {\n\t\t\tcall(_: unknown, command: string, arg: any, cancellationToken: CancellationToken): Promise<any> {\n\t\t\t\tswitch (command) {\n\t\t\t\t\tcase 'testMethodClient2': return Promise.resolve('success2');\n\t\t\t\t\tdefault: return Promise.reject(new Error('not implemented'));\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\t\t\tswitch (event) {\n\t\t\t\t\tdefault: throw new Error('not implemented');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst channelClient1 = client2.getChannel('client1');\n\t\tassert.strictEqual(await channelClient1.call('testMethodClient1'), 'success1');\n\n\t\tconst channelClient2 = client1.getChannel('client2');\n\t\tassert.strictEqual(await channelClient2.call('testMethodClient2'), 'success2');\n\n\t\tclient1.dispose();\n\t\tclient2.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,yBAAyB;AAClC,SAAS,aAAa;AACtB,SAAS,UAAU,yBAAyB;AAC5C,SAAS,+CAA+C;AAExD,MAAM,qBAAqB,MAAM;AAEhC,OAAK,mBAAmB,YAAY;AACnC,UAAM,EAAE,OAAO,MAAM,IAAI,IAAI,eAAe;AAE5C,UAAM,UAAU,IAAI,kBAAkB,OAAO,SAAS;AACtD,UAAM,UAAU,IAAI,kBAAkB,OAAO,SAAS;AAEtD,YAAQ,gBAAgB,WAAW;AAAA,MAClC,KAAK,GAAY,SAAiB,KAAU,mBAAoD;AAC/F,gBAAQ,SAAS;AAAA,UAChB,KAAK;AAAqB,mBAAO,QAAQ,QAAQ,UAAU;AAAA,UAC3D;AAAS,mBAAO,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC;AAAA,QAC5D;AAAA,MACD;AAAA,MAEA,OAAO,GAAY,OAAe,KAAuB;AACxD,gBAAQ,OAAO;AAAA,UACd;AAAS,kBAAM,IAAI,MAAM,iBAAiB;AAAA,QAC3C;AAAA,MACD;AAAA,IACD,CAAC;AAED,YAAQ,gBAAgB,WAAW;AAAA,MAClC,KAAK,GAAY,SAAiB,KAAU,mBAAoD;AAC/F,gBAAQ,SAAS;AAAA,UAChB,KAAK;AAAqB,mBAAO,QAAQ,QAAQ,UAAU;AAAA,UAC3D;AAAS,mBAAO,QAAQ,OAAO,IAAI,MAAM,iBAAiB,CAAC;AAAA,QAC5D;AAAA,MACD;AAAA,MAEA,OAAO,GAAY,OAAe,KAAuB;AACxD,gBAAQ,OAAO;AAAA,UACd;AAAS,kBAAM,IAAI,MAAM,iBAAiB;AAAA,QAC3C;AAAA,MACD;AAAA,IACD,CAAC;AAED,UAAM,iBAAiB,QAAQ,WAAW,SAAS;AACnD,WAAO,YAAY,MAAM,eAAe,KAAK,mBAAmB,GAAG,UAAU;AAE7E,UAAM,iBAAiB,QAAQ,WAAW,SAAS;AACnD,WAAO,YAAY,MAAM,eAAe,KAAK,mBAAmB,GAAG,UAAU;AAE7E,YAAQ,QAAQ;AAChB,YAAQ,QAAQ;AAAA,EACjB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
