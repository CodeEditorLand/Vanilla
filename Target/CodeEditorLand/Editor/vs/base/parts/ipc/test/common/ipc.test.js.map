{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/test/common/ipc.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { timeout } from '../../../../common/async.js';\nimport { VSBuffer } from '../../../../common/buffer.js';\nimport { CancellationToken, CancellationTokenSource } from '../../../../common/cancellation.js';\nimport { canceled } from '../../../../common/errors.js';\nimport { Emitter, Event } from '../../../../common/event.js';\nimport { DisposableStore } from '../../../../common/lifecycle.js';\nimport { isEqual } from '../../../../common/resources.js';\nimport { URI } from '../../../../common/uri.js';\nimport { BufferReader, BufferWriter, ClientConnectionEvent, deserialize, IChannel, IMessagePassingProtocol, IPCClient, IPCServer, IServerChannel, ProxyChannel, serialize } from '../../common/ipc.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../test/common/utils.js';\n\nclass QueueProtocol implements IMessagePassingProtocol {\n\n\tprivate buffering = true;\n\tprivate buffers: VSBuffer[] = [];\n\n\tprivate readonly _onMessage = new Emitter<VSBuffer>({\n\t\tonDidAddFirstListener: () => {\n\t\t\tfor (const buffer of this.buffers) {\n\t\t\t\tthis._onMessage.fire(buffer);\n\t\t\t}\n\n\t\t\tthis.buffers = [];\n\t\t\tthis.buffering = false;\n\t\t},\n\t\tonDidRemoveLastListener: () => {\n\t\t\tthis.buffering = true;\n\t\t}\n\t});\n\n\treadonly onMessage = this._onMessage.event;\n\tother!: QueueProtocol;\n\n\tsend(buffer: VSBuffer): void {\n\t\tthis.other.receive(buffer);\n\t}\n\n\tprotected receive(buffer: VSBuffer): void {\n\t\tif (this.buffering) {\n\t\t\tthis.buffers.push(buffer);\n\t\t} else {\n\t\t\tthis._onMessage.fire(buffer);\n\t\t}\n\t}\n}\n\nfunction createProtocolPair(): [IMessagePassingProtocol, IMessagePassingProtocol] {\n\tconst one = new QueueProtocol();\n\tconst other = new QueueProtocol();\n\tone.other = other;\n\tother.other = one;\n\n\treturn [one, other];\n}\n\nclass TestIPCClient extends IPCClient<string> {\n\n\tprivate readonly _onDidDisconnect = new Emitter<void>();\n\treadonly onDidDisconnect = this._onDidDisconnect.event;\n\n\tconstructor(protocol: IMessagePassingProtocol, id: string) {\n\t\tsuper(protocol, id);\n\t}\n\n\toverride dispose(): void {\n\t\tthis._onDidDisconnect.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nclass TestIPCServer extends IPCServer<string> {\n\n\tprivate readonly onDidClientConnect: Emitter<ClientConnectionEvent>;\n\n\tconstructor() {\n\t\tconst onDidClientConnect = new Emitter<ClientConnectionEvent>();\n\t\tsuper(onDidClientConnect.event);\n\t\tthis.onDidClientConnect = onDidClientConnect;\n\t}\n\n\tcreateConnection(id: string): IPCClient<string> {\n\t\tconst [pc, ps] = createProtocolPair();\n\t\tconst client = new TestIPCClient(pc, id);\n\n\t\tthis.onDidClientConnect.fire({\n\t\t\tprotocol: ps,\n\t\t\tonDidClientDisconnect: client.onDidDisconnect\n\t\t});\n\n\t\treturn client;\n\t}\n}\n\nconst TestChannelId = 'testchannel';\n\ninterface ITestService {\n\tmarco(): Promise<string>;\n\terror(message: string): Promise<void>;\n\tneverComplete(): Promise<void>;\n\tneverCompleteCT(cancellationToken: CancellationToken): Promise<void>;\n\tbuffersLength(buffers: VSBuffer[]): Promise<number>;\n\tmarshall(uri: URI): Promise<URI>;\n\tcontext(): Promise<unknown>;\n\n\tonPong: Event<string>;\n}\n\nclass TestService implements ITestService {\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tprivate readonly _onPong = new Emitter<string>();\n\treadonly onPong = this._onPong.event;\n\n\tmarco(): Promise<string> {\n\t\treturn Promise.resolve('polo');\n\t}\n\n\terror(message: string): Promise<void> {\n\t\treturn Promise.reject(new Error(message));\n\t}\n\n\tneverComplete(): Promise<void> {\n\t\treturn new Promise(_ => { });\n\t}\n\n\tneverCompleteCT(cancellationToken: CancellationToken): Promise<void> {\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\treturn Promise.reject(canceled());\n\t\t}\n\n\t\treturn new Promise((_, e) => this.disposables.add(cancellationToken.onCancellationRequested(() => e(canceled()))));\n\t}\n\n\tbuffersLength(buffers: VSBuffer[]): Promise<number> {\n\t\treturn Promise.resolve(buffers.reduce((r, b) => r + b.buffer.length, 0));\n\t}\n\n\tping(msg: string): void {\n\t\tthis._onPong.fire(msg);\n\t}\n\n\tmarshall(uri: URI): Promise<URI> {\n\t\treturn Promise.resolve(uri);\n\t}\n\n\tcontext(context?: unknown): Promise<unknown> {\n\t\treturn Promise.resolve(context);\n\t}\n\n\tdispose() {\n\t\tthis.disposables.dispose();\n\t}\n}\n\nclass TestChannel implements IServerChannel {\n\n\tconstructor(private service: ITestService) { }\n\n\tcall(_: unknown, command: string, arg: any, cancellationToken: CancellationToken): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'marco': return this.service.marco();\n\t\t\tcase 'error': return this.service.error(arg);\n\t\t\tcase 'neverComplete': return this.service.neverComplete();\n\t\t\tcase 'neverCompleteCT': return this.service.neverCompleteCT(cancellationToken);\n\t\t\tcase 'buffersLength': return this.service.buffersLength(arg);\n\t\t\tdefault: return Promise.reject(new Error('not implemented'));\n\t\t}\n\t}\n\n\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onPong': return this.service.onPong;\n\t\t\tdefault: throw new Error('not implemented');\n\t\t}\n\t}\n}\n\nclass TestChannelClient implements ITestService {\n\n\tget onPong(): Event<string> {\n\t\treturn this.channel.listen('onPong');\n\t}\n\n\tconstructor(private channel: IChannel) { }\n\n\tmarco(): Promise<string> {\n\t\treturn this.channel.call('marco');\n\t}\n\n\terror(message: string): Promise<void> {\n\t\treturn this.channel.call('error', message);\n\t}\n\n\tneverComplete(): Promise<void> {\n\t\treturn this.channel.call('neverComplete');\n\t}\n\n\tneverCompleteCT(cancellationToken: CancellationToken): Promise<void> {\n\t\treturn this.channel.call('neverCompleteCT', undefined, cancellationToken);\n\t}\n\n\tbuffersLength(buffers: VSBuffer[]): Promise<number> {\n\t\treturn this.channel.call('buffersLength', buffers);\n\t}\n\n\tmarshall(uri: URI): Promise<URI> {\n\t\treturn this.channel.call('marshall', uri);\n\t}\n\n\tcontext(): Promise<unknown> {\n\t\treturn this.channel.call('context');\n\t}\n}\n\nsuite('Base IPC', function () {\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('createProtocolPair', async function () {\n\t\tconst [clientProtocol, serverProtocol] = createProtocolPair();\n\n\t\tconst b1 = VSBuffer.alloc(0);\n\t\tclientProtocol.send(b1);\n\n\t\tconst b3 = VSBuffer.alloc(0);\n\t\tserverProtocol.send(b3);\n\n\t\tconst b2 = await Event.toPromise(serverProtocol.onMessage);\n\t\tconst b4 = await Event.toPromise(clientProtocol.onMessage);\n\n\t\tassert.strictEqual(b1, b2);\n\t\tassert.strictEqual(b3, b4);\n\t});\n\n\tsuite('one to one', function () {\n\t\tlet server: IPCServer;\n\t\tlet client: IPCClient;\n\t\tlet service: TestService;\n\t\tlet ipcService: ITestService;\n\n\t\tsetup(function () {\n\t\t\tservice = store.add(new TestService());\n\t\t\tconst testServer = store.add(new TestIPCServer());\n\t\t\tserver = testServer;\n\n\t\t\tserver.registerChannel(TestChannelId, new TestChannel(service));\n\n\t\t\tclient = store.add(testServer.createConnection('client1'));\n\t\t\tipcService = new TestChannelClient(client.getChannel(TestChannelId));\n\t\t});\n\n\t\ttest('call success', async function () {\n\t\t\tconst r = await ipcService.marco();\n\t\t\treturn assert.strictEqual(r, 'polo');\n\t\t});\n\n\t\ttest('call error', async function () {\n\t\t\ttry {\n\t\t\t\tawait ipcService.error('nice error');\n\t\t\t\treturn assert.fail('should not reach here');\n\t\t\t} catch (err) {\n\t\t\t\treturn assert.strictEqual(err.message, 'nice error');\n\t\t\t}\n\t\t});\n\n\t\ttest('cancel call with cancelled cancellation token', async function () {\n\t\t\ttry {\n\t\t\t\tawait ipcService.neverCompleteCT(CancellationToken.Cancelled);\n\t\t\t\treturn assert.fail('should not reach here');\n\t\t\t} catch (err) {\n\t\t\t\treturn assert(err.message === 'Canceled');\n\t\t\t}\n\t\t});\n\n\t\ttest('cancel call with cancellation token (sync)', function () {\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = ipcService.neverCompleteCT(cts.token).then(\n\t\t\t\t_ => assert.fail('should not reach here'),\n\t\t\t\terr => assert(err.message === 'Canceled')\n\t\t\t);\n\n\t\t\tcts.cancel();\n\n\t\t\treturn promise;\n\t\t});\n\n\t\ttest('cancel call with cancellation token (async)', function () {\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = ipcService.neverCompleteCT(cts.token).then(\n\t\t\t\t_ => assert.fail('should not reach here'),\n\t\t\t\terr => assert(err.message === 'Canceled')\n\t\t\t);\n\n\t\t\tsetTimeout(() => cts.cancel());\n\n\t\t\treturn promise;\n\t\t});\n\n\t\ttest('listen to events', async function () {\n\t\t\tconst messages: string[] = [];\n\n\t\t\tstore.add(ipcService.onPong(msg => messages.push(msg)));\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, []);\n\t\t\tservice.ping('hello');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello']);\n\t\t\tservice.ping('world');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello', 'world']);\n\t\t});\n\n\t\ttest('buffers in arrays', async function () {\n\t\t\tconst r = await ipcService.buffersLength([VSBuffer.alloc(2), VSBuffer.alloc(3)]);\n\t\t\treturn assert.strictEqual(r, 5);\n\t\t});\n\n\t\ttest('round trips numbers', () => {\n\t\t\tconst input = [\n\t\t\t\t0,\n\t\t\t\t1,\n\t\t\t\t-1,\n\t\t\t\t12345,\n\t\t\t\t-12345,\n\t\t\t\t42.6,\n\t\t\t\t123412341234\n\t\t\t];\n\n\t\t\tconst writer = new BufferWriter();\n\t\t\tserialize(writer, input);\n\t\t\tassert.deepStrictEqual(deserialize(new BufferReader(writer.buffer)), input);\n\t\t});\n\t});\n\n\tsuite('one to one (proxy)', function () {\n\t\tlet server: IPCServer;\n\t\tlet client: IPCClient;\n\t\tlet service: TestService;\n\t\tlet ipcService: ITestService;\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tsetup(function () {\n\t\t\tservice = store.add(new TestService());\n\t\t\tconst testServer = disposables.add(new TestIPCServer());\n\t\t\tserver = testServer;\n\n\t\t\tserver.registerChannel(TestChannelId, ProxyChannel.fromService(service, disposables));\n\n\t\t\tclient = disposables.add(testServer.createConnection('client1'));\n\t\t\tipcService = ProxyChannel.toService(client.getChannel(TestChannelId));\n\t\t});\n\n\t\tteardown(function () {\n\t\t\tdisposables.clear();\n\t\t});\n\n\t\ttest('call success', async function () {\n\t\t\tconst r = await ipcService.marco();\n\t\t\treturn assert.strictEqual(r, 'polo');\n\t\t});\n\n\t\ttest('call error', async function () {\n\t\t\ttry {\n\t\t\t\tawait ipcService.error('nice error');\n\t\t\t\treturn assert.fail('should not reach here');\n\t\t\t} catch (err) {\n\t\t\t\treturn assert.strictEqual(err.message, 'nice error');\n\t\t\t}\n\t\t});\n\n\t\ttest('listen to events', async function () {\n\t\t\tconst messages: string[] = [];\n\n\t\t\tdisposables.add(ipcService.onPong(msg => messages.push(msg)));\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, []);\n\t\t\tservice.ping('hello');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello']);\n\t\t\tservice.ping('world');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(messages, ['hello', 'world']);\n\t\t});\n\n\t\ttest('marshalling uri', async function () {\n\t\t\tconst uri = URI.file('foobar');\n\t\t\tconst r = await ipcService.marshall(uri);\n\t\t\tassert.ok(r instanceof URI);\n\t\t\treturn assert.ok(isEqual(r, uri));\n\t\t});\n\n\t\ttest('buffers in arrays', async function () {\n\t\t\tconst r = await ipcService.buffersLength([VSBuffer.alloc(2), VSBuffer.alloc(3)]);\n\t\t\treturn assert.strictEqual(r, 5);\n\t\t});\n\t});\n\n\tsuite('one to one (proxy, extra context)', function () {\n\t\tlet server: IPCServer;\n\t\tlet client: IPCClient;\n\t\tlet service: TestService;\n\t\tlet ipcService: ITestService;\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tsetup(function () {\n\t\t\tservice = store.add(new TestService());\n\t\t\tconst testServer = disposables.add(new TestIPCServer());\n\t\t\tserver = testServer;\n\n\t\t\tserver.registerChannel(TestChannelId, ProxyChannel.fromService(service, disposables));\n\n\t\t\tclient = disposables.add(testServer.createConnection('client1'));\n\t\t\tipcService = ProxyChannel.toService(client.getChannel(TestChannelId), { context: 'Super Context' });\n\t\t});\n\n\t\tteardown(function () {\n\t\t\tdisposables.clear();\n\t\t});\n\n\t\ttest('call extra context', async function () {\n\t\t\tconst r = await ipcService.context();\n\t\t\treturn assert.strictEqual(r, 'Super Context');\n\t\t});\n\t});\n\n\tsuite('one to many', function () {\n\t\ttest('all clients get pinged', async function () {\n\t\t\tconst service = store.add(new TestService());\n\t\t\tconst channel = new TestChannel(service);\n\t\t\tconst server = store.add(new TestIPCServer());\n\t\t\tserver.registerChannel('channel', channel);\n\n\t\t\tlet client1GotPinged = false;\n\t\t\tconst client1 = store.add(server.createConnection('client1'));\n\t\t\tconst ipcService1 = new TestChannelClient(client1.getChannel('channel'));\n\t\t\tstore.add(ipcService1.onPong(() => client1GotPinged = true));\n\n\t\t\tlet client2GotPinged = false;\n\t\t\tconst client2 = store.add(server.createConnection('client2'));\n\t\t\tconst ipcService2 = new TestChannelClient(client2.getChannel('channel'));\n\t\t\tstore.add(ipcService2.onPong(() => client2GotPinged = true));\n\n\t\t\tawait timeout(1);\n\t\t\tservice.ping('hello');\n\n\t\t\tawait timeout(1);\n\t\t\tassert(client1GotPinged, 'client 1 got pinged');\n\t\t\tassert(client2GotPinged, 'client 2 got pinged');\n\t\t});\n\n\t\ttest('server gets pings from all clients (broadcast channel)', async function () {\n\t\t\tconst server = store.add(new TestIPCServer());\n\n\t\t\tconst client1 = server.createConnection('client1');\n\t\t\tconst clientService1 = store.add(new TestService());\n\t\t\tconst clientChannel1 = new TestChannel(clientService1);\n\t\t\tclient1.registerChannel('channel', clientChannel1);\n\n\t\t\tconst pings: string[] = [];\n\t\t\tconst channel = server.getChannel('channel', () => true);\n\t\t\tconst service = new TestChannelClient(channel);\n\t\t\tstore.add(service.onPong(msg => pings.push(msg)));\n\n\t\t\tawait timeout(1);\n\t\t\tclientService1.ping('hello 1');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1']);\n\n\t\t\tconst client2 = server.createConnection('client2');\n\t\t\tconst clientService2 = store.add(new TestService());\n\t\t\tconst clientChannel2 = new TestChannel(clientService2);\n\t\t\tclient2.registerChannel('channel', clientChannel2);\n\n\t\t\tawait timeout(1);\n\t\t\tclientService2.ping('hello 2');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1', 'hello 2']);\n\n\t\t\tclient1.dispose();\n\t\t\tclientService1.ping('hello 1');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1', 'hello 2']);\n\n\t\t\tawait timeout(1);\n\t\t\tclientService2.ping('hello again 2');\n\n\t\t\tawait timeout(1);\n\t\t\tassert.deepStrictEqual(pings, ['hello 1', 'hello 2', 'hello again 2']);\n\n\t\t\tclient2.dispose();\n\t\t});\n\t});\n});\n"],
  "mappings": "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",
  "names": []
}
