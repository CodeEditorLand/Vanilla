{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/test/node/ipc.cp.integrationTest.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Event } from '../../../../common/event.js';\nimport { IChannel } from '../../common/ipc.js';\nimport { Client } from '../../node/ipc.cp.js';\nimport { ITestService, TestServiceClient } from './testService.js';\nimport { FileAccess } from '../../../../common/network.js';\n\nfunction createClient(): Client {\n\treturn new Client(FileAccess.asFileUri('bootstrap-fork').fsPath, {\n\t\tserverName: 'TestServer',\n\t\tenv: { VSCODE_AMD_ENTRYPOINT: 'vs/base/parts/ipc/test/node/testApp', verbose: true }\n\t});\n}\n\nsuite('IPC, Child Process', function () {\n\tthis.slow(2000);\n\tthis.timeout(10000);\n\n\tlet client: Client;\n\tlet channel: IChannel;\n\tlet service: ITestService;\n\n\tsetup(() => {\n\t\tclient = createClient();\n\t\tchannel = client.getChannel('test');\n\t\tservice = new TestServiceClient(channel);\n\t});\n\n\tteardown(() => {\n\t\tclient.dispose();\n\t});\n\n\ttest('createChannel', async () => {\n\t\tconst result = await service.pong('ping');\n\t\tassert.strictEqual(result.incoming, 'ping');\n\t\tassert.strictEqual(result.outgoing, 'pong');\n\t});\n\n\ttest('events', async () => {\n\t\tconst event = Event.toPromise(Event.once(service.onMarco));\n\t\tconst promise = service.marco();\n\n\t\tconst [promiseResult, eventResult] = await Promise.all([promise, event]);\n\n\t\tassert.strictEqual(promiseResult, 'polo');\n\t\tassert.strictEqual(eventResult.answer, 'polo');\n\t});\n\n\ttest('event dispose', async () => {\n\t\tlet count = 0;\n\t\tconst disposable = service.onMarco(() => count++);\n\n\t\tconst answer = await service.marco();\n\t\tassert.strictEqual(answer, 'polo');\n\t\tassert.strictEqual(count, 1);\n\n\t\tconst answer_1 = await service.marco();\n\t\tassert.strictEqual(answer_1, 'polo');\n\t\tassert.strictEqual(count, 2);\n\t\tdisposable.dispose();\n\n\t\tconst answer_2 = await service.marco();\n\t\tassert.strictEqual(answer_2, 'polo');\n\t\tassert.strictEqual(count, 2);\n\t});\n});\n"],
  "mappings": ";;AAKA,OAAO,YAAY;AACnB,SAAS,aAAa;AACtB,SAAS,gBAAgB;AACzB,SAAS,cAAc;AACvB,SAAS,cAAc,yBAAyB;AAChD,SAAS,kBAAkB;AAE3B,SAAS,eAAuB;AAC/B,SAAO,IAAI,OAAO,WAAW,UAAU,gBAAgB,EAAE,QAAQ;AAAA,IAChE,YAAY;AAAA,IACZ,KAAK,EAAE,uBAAuB,uCAAuC,SAAS,KAAK;AAAA,EACpF,CAAC;AACF;AALS;AAOT,MAAM,sBAAsB,WAAY;AACvC,OAAK,KAAK,GAAI;AACd,OAAK,QAAQ,GAAK;AAElB,MAAI;AACJ,MAAI;AACJ,MAAI;AAEJ,QAAM,MAAM;AACX,aAAS,aAAa;AACtB,cAAU,OAAO,WAAW,MAAM;AAClC,cAAU,IAAI,kBAAkB,OAAO;AAAA,EACxC,CAAC;AAED,WAAS,MAAM;AACd,WAAO,QAAQ;AAAA,EAChB,CAAC;AAED,OAAK,iBAAiB,YAAY;AACjC,UAAM,SAAS,MAAM,QAAQ,KAAK,MAAM;AACxC,WAAO,YAAY,OAAO,UAAU,MAAM;AAC1C,WAAO,YAAY,OAAO,UAAU,MAAM;AAAA,EAC3C,CAAC;AAED,OAAK,UAAU,YAAY;AAC1B,UAAM,QAAQ,MAAM,UAAU,MAAM,KAAK,QAAQ,OAAO,CAAC;AACzD,UAAM,UAAU,QAAQ,MAAM;AAE9B,UAAM,CAAC,eAAe,WAAW,IAAI,MAAM,QAAQ,IAAI,CAAC,SAAS,KAAK,CAAC;AAEvE,WAAO,YAAY,eAAe,MAAM;AACxC,WAAO,YAAY,YAAY,QAAQ,MAAM;AAAA,EAC9C,CAAC;AAED,OAAK,iBAAiB,YAAY;AACjC,QAAI,QAAQ;AACZ,UAAM,aAAa,QAAQ,QAAQ,MAAM,OAAO;AAEhD,UAAM,SAAS,MAAM,QAAQ,MAAM;AACnC,WAAO,YAAY,QAAQ,MAAM;AACjC,WAAO,YAAY,OAAO,CAAC;AAE3B,UAAM,WAAW,MAAM,QAAQ,MAAM;AACrC,WAAO,YAAY,UAAU,MAAM;AACnC,WAAO,YAAY,OAAO,CAAC;AAC3B,eAAW,QAAQ;AAEnB,UAAM,WAAW,MAAM,QAAQ,MAAM;AACrC,WAAO,YAAY,UAAU,MAAM;AACnC,WAAO,YAAY,OAAO,CAAC;AAAA,EAC5B,CAAC;AACF,CAAC;",
  "names": []
}
