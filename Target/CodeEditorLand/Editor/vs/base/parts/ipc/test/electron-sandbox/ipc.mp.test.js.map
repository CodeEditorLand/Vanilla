{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/ipc/test/electron-sandbox/ipc.mp.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport assert from 'assert';\nimport { Client as MessagePortClient } from '../../browser/ipc.mp.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../test/common/utils.js';\n\nsuite('IPC, MessagePorts', () => {\n\n\ttest('message port close event', async () => {\n\t\tconst { port1, port2 } = new MessageChannel();\n\n\t\tconst client1 = new MessagePortClient(port1, 'client1');\n\t\tconst client2 = new MessagePortClient(port2, 'client2');\n\n\t\t// This test ensures that Electron's API for the close event\n\t\t// does not break because we rely on it to dispose client\n\t\t// connections from the server.\n\t\t//\n\t\t// This event is not provided by browser MessagePort API though.\n\t\tconst whenClosed = new Promise<boolean>(resolve => port1.addEventListener('close', () => resolve(true)));\n\n\t\tclient2.dispose();\n\n\t\tassert.ok(await whenClosed);\n\n\t\tclient1.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "AAKA,OAAO,YAAY;AACnB,SAAS,UAAU,yBAAyB;AAC5C,SAAS,+CAA+C;AAExD,MAAM,qBAAqB,MAAM;AAEhC,OAAK,4BAA4B,YAAY;AAC5C,UAAM,EAAE,OAAO,MAAM,IAAI,IAAI,eAAe;AAE5C,UAAM,UAAU,IAAI,kBAAkB,OAAO,SAAS;AACtD,UAAM,UAAU,IAAI,kBAAkB,OAAO,SAAS;AAOtD,UAAM,aAAa,IAAI,QAAiB,aAAW,MAAM,iBAAiB,SAAS,MAAM,QAAQ,IAAI,CAAC,CAAC;AAEvG,YAAQ,QAAQ;AAEhB,WAAO,GAAG,MAAM,UAAU;AAE1B,YAAQ,QAAQ;AAAA,EACjB,CAAC;AAED,0CAAwC;AACzC,CAAC;",
  "names": []
}
