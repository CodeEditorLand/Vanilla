{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/sandbox/node/electronTypes.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface MessagePortMain extends NodeJS.EventEmitter {\n\n\t// Docs: https://electronjs.org/docs/api/message-port-main\n\n\t/**\n\t * Emitted when the remote end of a MessagePortMain object becomes disconnected.\n\t */\n\ton(event: 'close', listener: Function): this;\n\toff(event: 'close', listener: Function): this;\n\tonce(event: 'close', listener: Function): this;\n\taddListener(event: 'close', listener: Function): this;\n\tremoveListener(event: 'close', listener: Function): this;\n\t/**\n\t * Emitted when a MessagePortMain object receives a message.\n\t */\n\ton(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\toff(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\tonce(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\taddListener(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\tremoveListener(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\t/**\n\t * Disconnects the port, so it is no longer active.\n\t */\n\tclose(): void;\n\t/**\n\t * Sends a message from the port, and optionally, transfers ownership of objects to\n\t * other browsing contexts.\n\t */\n\tpostMessage(message: any, transfer?: MessagePortMain[]): void;\n\t/**\n\t * Starts the sending of messages queued on the port. Messages will be queued until\n\t * this method is called.\n\t */\n\tstart(): void;\n}\n\nexport interface MessageEvent {\n\tdata: any;\n\tports: MessagePortMain[];\n}\n\nexport interface ParentPort extends NodeJS.EventEmitter {\n\n\t// Docs: https://electronjs.org/docs/api/parent-port\n\n\t/**\n\t * Emitted when the process receives a message. Messages received on this port will\n\t * be queued up until a handler is registered for this event.\n\t */\n\ton(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\toff(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\tonce(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\taddListener(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\tremoveListener(event: 'message', listener: (messageEvent: MessageEvent) => void): this;\n\t/**\n\t * Sends a message from the process to its parent.\n\t */\n\tpostMessage(message: any): void;\n}\n\nexport interface UtilityNodeJSProcess extends NodeJS.Process {\n\n\t/**\n\t * A `Electron.ParentPort` property if this is a `UtilityProcess` (or `null`\n\t * otherwise) allowing communication with the parent process.\n\t */\n\tparentPort: ParentPort;\n}\n\nexport function isUtilityProcess(process: NodeJS.Process): process is UtilityNodeJSProcess {\n\treturn !!(process as UtilityNodeJSProcess).parentPort;\n}\n"],
  "mappings": ";;AA0EO,SAAS,iBAAiB,SAA0D;AAC1F,SAAO,CAAC,CAAE,QAAiC;AAC5C;AAFgB;",
  "names": []
}
