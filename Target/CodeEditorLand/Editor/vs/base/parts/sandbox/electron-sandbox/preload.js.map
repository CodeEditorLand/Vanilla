{
  "version": 3,
  "sources": ["../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/sandbox/electron-sandbox/preload.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// @ts-check\n(function () {\n\t'use strict';\n\n\t/**\n\t * @import { ISandboxConfiguration }  from '../common/sandboxTypes'\n\t * @import { IpcRenderer }  from './electronTypes'\n\t * @import { IpcRendererEvent }  from 'electron'\n\t * @import { ISandboxNodeProcess }  from './globals'\n\t */\n\n\tconst { ipcRenderer, webFrame, contextBridge, webUtils } = require('electron');\n\n\t//#region Utilities\n\n\t/**\n\t * @param {string} channel\n\t * @returns {true | never}\n\t */\n\tfunction validateIPC(channel) {\n\t\tif (!channel || !channel.startsWith('vscode:')) {\n\t\t\tthrow new Error(`Unsupported event IPC channel '${channel}'`);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * @param {string} key the name of the process argument to parse\n\t * @returns {string | undefined}\n\t */\n\tfunction parseArgv(key) {\n\t\tfor (const arg of process.argv) {\n\t\t\tif (arg.indexOf(`--${key}=`) === 0) {\n\t\t\t\treturn arg.split('=')[1];\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t//#endregion\n\n\t//#region Resolve Configuration\n\n\t/** @type {ISandboxConfiguration | undefined} */\n\tlet configuration = undefined;\n\n\t/** @type {Promise<ISandboxConfiguration>} */\n\tconst resolveConfiguration = (async () => {\n\t\tconst windowConfigIpcChannel = parseArgv('vscode-window-config');\n\t\tif (!windowConfigIpcChannel) {\n\t\t\tthrow new Error('Preload: did not find expected vscode-window-config in renderer process arguments list.');\n\t\t}\n\n\t\ttry {\n\t\t\tvalidateIPC(windowConfigIpcChannel);\n\n\t\t\t// Resolve configuration from electron-main\n\t\t\tconst resolvedConfiguration = configuration = await ipcRenderer.invoke(windowConfigIpcChannel);\n\n\t\t\t// Apply `userEnv` directly\n\t\t\tObject.assign(process.env, resolvedConfiguration.userEnv);\n\n\t\t\t// Apply zoom level early before even building the\n\t\t\t// window DOM elements to avoid UI flicker. We always\n\t\t\t// have to set the zoom level from within the window\n\t\t\t// because Chrome has it's own way of remembering zoom\n\t\t\t// settings per origin (if vscode-file:// is used) and\n\t\t\t// we want to ensure that the user configuration wins.\n\t\t\twebFrame.setZoomLevel(resolvedConfiguration.zoomLevel ?? 0);\n\n\t\t\treturn resolvedConfiguration;\n\t\t} catch (error) {\n\t\t\tthrow new Error(`Preload: unable to fetch vscode-window-config: ${error}`);\n\t\t}\n\t})();\n\n\t//#endregion\n\n\t//#region Resolve Shell Environment\n\n\t/**\n\t * If VSCode is not run from a terminal, we should resolve additional\n\t * shell specific environment from the OS shell to ensure we are seeing\n\t * all development related environment variables. We do this from the\n\t * main process because it may involve spawning a shell.\n\t *\n\t * @type {Promise<typeof process.env>}\n\t */\n\tconst resolveShellEnv = (async () => {\n\n\t\t// Resolve `userEnv` from configuration and\n\t\t// `shellEnv` from the main side\n\t\tconst [userEnv, shellEnv] = await Promise.all([\n\t\t\t(async () => (await resolveConfiguration).userEnv)(),\n\t\t\tipcRenderer.invoke('vscode:fetchShellEnv')\n\t\t]);\n\n\t\treturn { ...process.env, ...shellEnv, ...userEnv };\n\t})();\n\n\t//#endregion\n\n\t//#region Globals Definition\n\n\t// #######################################################################\n\t// ###                                                                 ###\n\t// ###       !!! DO NOT USE GET/SET PROPERTIES ANYWHERE HERE !!!       ###\n\t// ###       !!!  UNLESS THE ACCESS IS WITHOUT SIDE EFFECTS  !!!       ###\n\t// ###       (https://github.com/electron/electron/issues/25516)       ###\n\t// ###                                                                 ###\n\t// #######################################################################\n\n\t/**\n\t * @type {import('./globals')}\n\t */\n\tconst globals = {\n\n\t\t/**\n\t\t * A minimal set of methods exposed from Electron's `ipcRenderer`\n\t\t * to support communication to main process.\n\t\t *\n\t\t * @type {IpcRenderer}\n\t\t */\n\n\t\tipcRenderer: {\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {any[]} args\n\t\t\t */\n\t\t\tsend(channel, ...args) {\n\t\t\t\tif (validateIPC(channel)) {\n\t\t\t\t\tipcRenderer.send(channel, ...args);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {any[]} args\n\t\t\t * @returns {Promise<any>}\n\t\t\t */\n\t\t\tinvoke(channel, ...args) {\n\t\t\t\tvalidateIPC(channel);\n\n\t\t\t\treturn ipcRenderer.invoke(channel, ...args);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {(event: IpcRendererEvent, ...args: any[]) => void} listener\n\t\t\t * @returns {IpcRenderer}\n\t\t\t */\n\t\t\ton(channel, listener) {\n\t\t\t\tvalidateIPC(channel);\n\n\t\t\t\tipcRenderer.on(channel, listener);\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {(event: IpcRendererEvent, ...args: any[]) => void} listener\n\t\t\t * @returns {IpcRenderer}\n\t\t\t */\n\t\t\tonce(channel, listener) {\n\t\t\t\tvalidateIPC(channel);\n\n\t\t\t\tipcRenderer.once(channel, listener);\n\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} channel\n\t\t\t * @param {(event: IpcRendererEvent, ...args: any[]) => void} listener\n\t\t\t * @returns {IpcRenderer}\n\t\t\t */\n\t\t\tremoveListener(channel, listener) {\n\t\t\t\tvalidateIPC(channel);\n\n\t\t\t\tipcRenderer.removeListener(channel, listener);\n\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * @type {import('./globals').IpcMessagePort}\n\t\t */\n\t\tipcMessagePort: {\n\n\t\t\t/**\n\t\t\t * @param {string} responseChannel\n\t\t\t * @param {string} nonce\n\t\t\t */\n\t\t\tacquire(responseChannel, nonce) {\n\t\t\t\tif (validateIPC(responseChannel)) {\n\t\t\t\t\tconst responseListener = (/** @type {IpcRendererEvent} */ e, /** @type {string} */ responseNonce) => {\n\t\t\t\t\t\t// validate that the nonce from the response is the same\n\t\t\t\t\t\t// as when requested. and if so, use `postMessage` to\n\t\t\t\t\t\t// send the `MessagePort` safely over, even when context\n\t\t\t\t\t\t// isolation is enabled\n\t\t\t\t\t\tif (nonce === responseNonce) {\n\t\t\t\t\t\t\tipcRenderer.off(responseChannel, responseListener);\n\t\t\t\t\t\t\twindow.postMessage(nonce, '*', e.ports);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// handle reply from main\n\t\t\t\t\tipcRenderer.on(responseChannel, responseListener);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Support for subset of methods of Electron's `webFrame` type.\n\t\t *\n\t\t * @type {import('./electronTypes').WebFrame}\n\t\t */\n\t\twebFrame: {\n\n\t\t\t/**\n\t\t\t * @param {number} level\n\t\t\t */\n\t\t\tsetZoomLevel(level) {\n\t\t\t\tif (typeof level === 'number') {\n\t\t\t\t\twebFrame.setZoomLevel(level);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Support for subset of Electron's `webUtils` type.\n\t\t */\n\t\twebUtils: {\n\n\t\t\t/**\n\t\t\t * @param {File} file\n\t\t\t */\n\t\t\tgetPathForFile(file) {\n\t\t\t\treturn webUtils.getPathForFile(file);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Support for a subset of access to node.js global `process`.\n\t\t *\n\t\t * Note: when `sandbox` is enabled, the only properties available\n\t\t * are https://github.com/electron/electron/blob/master/docs/api/process.md#sandbox\n\t\t *\n\t\t * @type {ISandboxNodeProcess}\n\t\t */\n\t\tprocess: {\n\t\t\tget platform() { return process.platform; },\n\t\t\tget arch() { return process.arch; },\n\t\t\tget env() { return { ...process.env }; },\n\t\t\tget versions() { return process.versions; },\n\t\t\tget type() { return 'renderer'; },\n\t\t\tget execPath() { return process.execPath; },\n\n\t\t\t/**\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tcwd() {\n\t\t\t\treturn process.env['VSCODE_CWD'] || process.execPath.substr(0, process.execPath.lastIndexOf(process.platform === 'win32' ? '\\\\' : '/'));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @returns {Promise<typeof process.env>}\n\t\t\t */\n\t\t\tshellEnv() {\n\t\t\t\treturn resolveShellEnv;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @returns {Promise<import('electron').ProcessMemoryInfo>}\n\t\t\t */\n\t\t\tgetProcessMemoryInfo() {\n\t\t\t\treturn process.getProcessMemoryInfo();\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @param {string} type\n\t\t\t * @param {Function} callback\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\ton(type, callback) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tprocess.on(type, callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Some information about the context we are running in.\n\t\t *\n\t\t * @type {import('./globals').ISandboxContext}\n\t\t */\n\t\tcontext: {\n\n\t\t\t/**\n\t\t\t * A configuration object made accessible from the main side\n\t\t\t * to configure the sandbox browser window.\n\t\t\t *\n\t\t\t * Note: intentionally not using a getter here because the\n\t\t\t * actual value will be set after `resolveConfiguration`\n\t\t\t * has finished.\n\t\t\t *\n\t\t\t * @returns {ISandboxConfiguration | undefined}\n\t\t\t */\n\t\t\tconfiguration() {\n\t\t\t\treturn configuration;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Allows to await the resolution of the configuration object.\n\t\t\t *\n\t\t\t * @returns {Promise<ISandboxConfiguration>}\n\t\t\t */\n\t\t\tasync resolveConfiguration() {\n\t\t\t\treturn resolveConfiguration;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Use `contextBridge` APIs to expose globals to VSCode\n\t// only if context isolation is enabled, otherwise just\n\t// add to the DOM global.\n\tif (process.contextIsolated) {\n\t\ttry {\n\t\t\tcontextBridge.exposeInMainWorld('vscode', globals);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t} else {\n\t\t// @ts-ignore\n\t\twindow.vscode = globals;\n\t}\n}());\n"],
  "mappings": "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",
  "names": []
}
