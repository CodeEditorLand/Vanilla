{
  "version": 3,
  "sources": ["../../../../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/base/parts/request/test/browser/request.test.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// eslint-disable-next-line local/code-import-patterns\nimport * as http from 'http';\n// eslint-disable-next-line local/code-import-patterns\nimport { AddressInfo } from 'net';\nimport assert from 'assert';\nimport { CancellationToken, CancellationTokenSource } from '../../../../common/cancellation.js';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../test/common/utils.js';\nimport { request } from '../../browser/request.js';\nimport { streamToBuffer } from '../../../../common/buffer.js';\nimport { flakySuite } from '../../../../test/common/testUtils.js';\n\nflakySuite('Request', () => {\n\n\tlet port: number;\n\tlet server: http.Server;\n\n\tsetup(async () => {\n\t\tport = await new Promise<number>((resolvePort, rejectPort) => {\n\t\t\tserver = http.createServer((req, res) => {\n\t\t\t\tif (req.url === '/noreply') {\n\t\t\t\t\treturn; // never respond\n\t\t\t\t}\n\t\t\t\tres.setHeader('Content-Type', 'application/json');\n\t\t\t\tif (req.headers['echo-header']) {\n\t\t\t\t\tres.setHeader('echo-header', req.headers['echo-header']);\n\t\t\t\t}\n\t\t\t\tconst data: Buffer[] = [];\n\t\t\t\treq.on('data', chunk => data.push(chunk));\n\t\t\t\treq.on('end', () => {\n\t\t\t\t\tres.end(JSON.stringify({\n\t\t\t\t\t\tmethod: req.method,\n\t\t\t\t\t\turl: req.url,\n\t\t\t\t\t\tdata: Buffer.concat(data).toString()\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}).listen(0, '127.0.0.1', () => {\n\t\t\t\tconst address = server.address();\n\t\t\t\tresolvePort((address as AddressInfo).port);\n\t\t\t}).on('error', err => {\n\t\t\t\trejectPort(err);\n\t\t\t});\n\t\t});\n\t});\n\n\tteardown(async () => {\n\t\tawait new Promise<void>((resolve, reject) => {\n\t\t\tserver.close(err => err ? reject(err) : resolve());\n\t\t});\n\t});\n\n\ttest('GET', async () => {\n\t\tconst context = await request({\n\t\t\turl: `http://127.0.0.1:${port}`,\n\t\t\theaders: {\n\t\t\t\t'echo-header': 'echo-value'\n\t\t\t}\n\t\t}, CancellationToken.None);\n\t\tassert.strictEqual(context.res.statusCode, 200);\n\t\tassert.strictEqual(context.res.headers['content-type'], 'application/json');\n\t\tassert.strictEqual(context.res.headers['echo-header'], 'echo-value');\n\t\tconst buffer = await streamToBuffer(context.stream);\n\t\tconst body = JSON.parse(buffer.toString());\n\t\tassert.strictEqual(body.method, 'GET');\n\t\tassert.strictEqual(body.url, '/');\n\t});\n\n\ttest('POST', async () => {\n\t\tconst context = await request({\n\t\t\ttype: 'POST',\n\t\t\turl: `http://127.0.0.1:${port}/postpath`,\n\t\t\tdata: 'Some data',\n\t\t}, CancellationToken.None);\n\t\tassert.strictEqual(context.res.statusCode, 200);\n\t\tassert.strictEqual(context.res.headers['content-type'], 'application/json');\n\t\tconst buffer = await streamToBuffer(context.stream);\n\t\tconst body = JSON.parse(buffer.toString());\n\t\tassert.strictEqual(body.method, 'POST');\n\t\tassert.strictEqual(body.url, '/postpath');\n\t\tassert.strictEqual(body.data, 'Some data');\n\t});\n\n\ttest('timeout', async () => {\n\t\ttry {\n\t\t\tawait request({\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: `http://127.0.0.1:${port}/noreply`,\n\t\t\t\ttimeout: 123,\n\t\t\t}, CancellationToken.None);\n\t\t\tassert.fail('Should fail with timeout');\n\t\t} catch (err) {\n\t\t\tassert.strictEqual(err.message, 'Fetch timeout: 123ms');\n\t\t}\n\t});\n\n\ttest('cancel', async () => {\n\t\ttry {\n\t\t\tconst source = new CancellationTokenSource();\n\t\t\tconst res = request({\n\t\t\t\ttype: 'GET',\n\t\t\t\turl: `http://127.0.0.1:${port}/noreply`,\n\t\t\t}, source.token);\n\t\t\tawait new Promise(resolve => setTimeout(resolve, 100));\n\t\t\tsource.cancel();\n\t\t\tawait res;\n\t\t\tassert.fail('Should fail with cancellation');\n\t\t} catch (err) {\n\t\t\tassert.strictEqual(err.message, 'Canceled');\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"],
  "mappings": "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",
  "names": []
}
