import{bufferToStream as i,VSBuffer as u}from"../../../common/buffer.js";import"../../../common/cancellation.js";import{canceled as o}from"../../../common/errors.js";import{OfflineError as c}from"../common/request.js";async function R(e,r){if(r.isCancellationRequested)throw o();const a=new AbortController,t=r.onCancellationRequested(()=>a.abort()),n=e.timeout?AbortSignal.any([a.signal,AbortSignal.timeout(e.timeout)]):a.signal;try{const s=await fetch(e.url||"",{method:e.type||"GET",headers:f(e),body:e.data,signal:n});return{res:{statusCode:s.status,headers:d(s)},stream:i(u.wrap(new Uint8Array(await s.arrayBuffer())))}}catch(s){throw navigator.onLine?s?.name==="AbortError"?o():s?.name==="TimeoutError"?new Error(`Fetch timeout: ${e.timeout}ms`):s:new c}finally{t.dispose()}}function f(e){if(e.headers||e.user||e.password||e.proxyAuthorization){const r=new Headers;e:for(const a in e.headers){switch(a.toLowerCase()){case"user-agent":case"accept-encoding":case"content-length":continue e}const t=e.headers[a];if(typeof t=="string")r.set(a,t);else if(Array.isArray(t))for(const n of t)r.append(a,n)}return(e.user||e.password)&&r.set("Authorization","Basic "+btoa(`${e.user||""}:${e.password||""}`)),e.proxyAuthorization&&r.set("Proxy-Authorization",e.proxyAuthorization),r}}function d(e){const r=Object.create(null);return e.headers.forEach((a,t)=>{r[t]?Array.isArray(r[t])?r[t].push(a):r[t]=[r[t],a]:r[t]=a}),r}export{R as request};
