{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/server.cli.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport * as url from 'url';\nimport * as cp from 'child_process';\nimport * as http from 'http';\nimport { cwd } from '../../base/common/process.js';\nimport { dirname, extname, resolve, join } from '../../base/common/path.js';\nimport { parseArgs, buildHelpMessage, buildVersionMessage, OPTIONS, OptionDescriptions, ErrorReporter } from '../../platform/environment/node/argv.js';\nimport { NativeParsedArgs } from '../../platform/environment/common/argv.js';\nimport { createWaitMarkerFileSync } from '../../platform/environment/node/wait.js';\nimport { PipeCommand } from '../../workbench/api/node/extHostCLIServer.js';\nimport { hasStdinWithoutTty, getStdinFilePath, readFromStdin } from '../../platform/environment/node/stdin.js';\nimport { DeferredPromise } from '../../base/common/async.js';\n\n/*\n * Implements a standalone CLI app that opens VS Code from a remote terminal.\n *  - In integrated terminals for remote windows this connects to the remote server though a pipe.\n *    The pipe is passed in env VSCODE_IPC_HOOK_CLI.\n *  - In external terminals for WSL this calls VS Code on the Windows side.\n *    The VS Code desktop executable path is passed in env VSCODE_CLIENT_COMMAND.\n */\n\n\ninterface ProductDescription {\n\tproductName: string;\n\tversion: string;\n\tcommit: string;\n\texecutableName: string;\n}\n\ninterface RemoteParsedArgs extends NativeParsedArgs { 'gitCredential'?: string; 'openExternal'?: boolean }\n\n\nconst isSupportedForCmd = (optionId: keyof RemoteParsedArgs) => {\n\tswitch (optionId) {\n\t\tcase 'user-data-dir':\n\t\tcase 'extensions-dir':\n\t\tcase 'export-default-configuration':\n\t\tcase 'install-source':\n\t\tcase 'enable-smoke-test-driver':\n\t\tcase 'extensions-download-dir':\n\t\tcase 'builtin-extensions-dir':\n\t\tcase 'telemetry':\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn true;\n\t}\n};\n\nconst isSupportedForPipe = (optionId: keyof RemoteParsedArgs) => {\n\tswitch (optionId) {\n\t\tcase 'version':\n\t\tcase 'help':\n\t\tcase 'folder-uri':\n\t\tcase 'file-uri':\n\t\tcase 'add':\n\t\tcase 'diff':\n\t\tcase 'merge':\n\t\tcase 'wait':\n\t\tcase 'goto':\n\t\tcase 'reuse-window':\n\t\tcase 'new-window':\n\t\tcase 'status':\n\t\tcase 'install-extension':\n\t\tcase 'uninstall-extension':\n\t\tcase 'update-extensions':\n\t\tcase 'list-extensions':\n\t\tcase 'force':\n\t\tcase 'show-versions':\n\t\tcase 'category':\n\t\tcase 'verbose':\n\t\tcase 'remote':\n\t\tcase 'locate-shell-integration-path':\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\n\nconst cliPipe = process.env['VSCODE_IPC_HOOK_CLI'] as string;\nconst cliCommand = process.env['VSCODE_CLIENT_COMMAND'] as string;\nconst cliCommandCwd = process.env['VSCODE_CLIENT_COMMAND_CWD'] as string;\nconst cliRemoteAuthority = process.env['VSCODE_CLI_AUTHORITY'] as string;\nconst cliStdInFilePath = process.env['VSCODE_STDIN_FILE_PATH'] as string;\n\nexport async function main(desc: ProductDescription, args: string[]): Promise<void> {\n\tif (!cliPipe && !cliCommand) {\n\t\tconsole.log('Command is only available in WSL or inside a Visual Studio Code terminal.');\n\t\treturn;\n\t}\n\n\t// take the local options and remove the ones that don't apply\n\tconst options: OptionDescriptions<Required<RemoteParsedArgs>> = { ...OPTIONS, gitCredential: { type: 'string' }, openExternal: { type: 'boolean' } };\n\tconst isSupported = cliCommand ? isSupportedForCmd : isSupportedForPipe;\n\tfor (const optionId in OPTIONS) {\n\t\tconst optId = <keyof RemoteParsedArgs>optionId;\n\t\tif (!isSupported(optId)) {\n\t\t\tdelete options[optId];\n\t\t}\n\t}\n\n\tif (cliPipe) {\n\t\toptions['openExternal'] = { type: 'boolean' };\n\t}\n\n\tconst errorReporter: ErrorReporter = {\n\t\tonMultipleValues: (id: string, usedValue: string) => {\n\t\t\tconsole.error(`Option '${id}' can only be defined once. Using value ${usedValue}.`);\n\t\t},\n\t\tonEmptyValue: (id) => {\n\t\t\tconsole.error(`Ignoring option '${id}': Value must not be empty.`);\n\t\t},\n\t\tonUnknownOption: (id: string) => {\n\t\t\tconsole.error(`Ignoring option '${id}': not supported for ${desc.executableName}.`);\n\t\t},\n\t\tonDeprecatedOption: (deprecatedOption: string, message: string) => {\n\t\t\tconsole.warn(`Option '${deprecatedOption}' is deprecated: ${message}`);\n\t\t}\n\t};\n\n\tconst parsedArgs = parseArgs(args, options, errorReporter);\n\tconst mapFileUri = cliRemoteAuthority ? mapFileToRemoteUri : (uri: string) => uri;\n\n\tconst verbose = !!parsedArgs['verbose'];\n\n\tif (parsedArgs.help) {\n\t\tconsole.log(buildHelpMessage(desc.productName, desc.executableName, desc.version, options));\n\t\treturn;\n\t}\n\tif (parsedArgs.version) {\n\t\tconsole.log(buildVersionMessage(desc.version, desc.commit));\n\t\treturn;\n\t}\n\tif (parsedArgs['locate-shell-integration-path']) {\n\t\tlet file: string;\n\t\tswitch (parsedArgs['locate-shell-integration-path']) {\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"`\n\t\t\tcase 'bash': file = 'shellIntegration-bash.sh'; break;\n\t\t\t// Usage: `if ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }`\n\t\t\tcase 'pwsh': file = 'shellIntegration.ps1'; break;\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"`\n\t\t\tcase 'zsh': file = 'shellIntegration-rc.zsh'; break;\n\t\t\t// Usage: `string match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)`\n\t\t\tcase 'fish': file = 'fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish'; break;\n\t\t\tdefault: throw new Error('Error using --locate-shell-integration-path: Invalid shell type');\n\t\t}\n\t\tconsole.log(resolve(__dirname, '../..', 'workbench', 'contrib', 'terminal', 'browser', 'media', file));\n\t\treturn;\n\t}\n\tif (cliPipe) {\n\t\tif (parsedArgs['openExternal']) {\n\t\t\topenInBrowser(parsedArgs['_'], verbose);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tlet remote: string | null | undefined = parsedArgs.remote;\n\tif (remote === 'local' || remote === 'false' || remote === '') {\n\t\tremote = null; // null represent a local window\n\t}\n\n\tconst folderURIs = (parsedArgs['folder-uri'] || []).map(mapFileUri);\n\tparsedArgs['folder-uri'] = folderURIs;\n\n\tconst fileURIs = (parsedArgs['file-uri'] || []).map(mapFileUri);\n\tparsedArgs['file-uri'] = fileURIs;\n\n\tconst inputPaths = parsedArgs['_'];\n\tlet hasReadStdinArg = false;\n\tfor (const input of inputPaths) {\n\t\tif (input === '-') {\n\t\t\thasReadStdinArg = true;\n\t\t} else {\n\t\t\ttranslatePath(input, mapFileUri, folderURIs, fileURIs);\n\t\t}\n\t}\n\n\tparsedArgs['_'] = [];\n\n\tlet readFromStdinPromise: Promise<void> | undefined;\n\n\tif (hasReadStdinArg && hasStdinWithoutTty()) {\n\t\ttry {\n\t\t\tlet stdinFilePath = cliStdInFilePath;\n\t\t\tif (!stdinFilePath) {\n\t\t\t\tstdinFilePath = getStdinFilePath();\n\t\t\t\tconst readFromStdinDone = new DeferredPromise<void>();\n\t\t\t\tawait readFromStdin(stdinFilePath, verbose, () => readFromStdinDone.complete()); // throws error if file can not be written\n\t\t\t\tif (!parsedArgs.wait) {\n\t\t\t\t\t// if `--wait` is not provided, we keep this process alive\n\t\t\t\t\t// for at least as long as the stdin stream is open to\n\t\t\t\t\t// ensure that we read all the data.\n\t\t\t\t\treadFromStdinPromise = readFromStdinDone.p;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Make sure to open tmp file\n\t\t\ttranslatePath(stdinFilePath, mapFileUri, folderURIs, fileURIs);\n\n\t\t\t// Ignore adding this to history\n\t\t\tparsedArgs['skip-add-to-recently-opened'] = true;\n\n\t\t\tconsole.log(`Reading from stdin via: ${stdinFilePath}`);\n\t\t} catch (e) {\n\t\t\tconsole.log(`Failed to create file to read via stdin: ${e.toString()}`);\n\t\t}\n\t}\n\n\tif (parsedArgs.extensionDevelopmentPath) {\n\t\tparsedArgs.extensionDevelopmentPath = parsedArgs.extensionDevelopmentPath.map(p => mapFileUri(pathToURI(p).href));\n\t}\n\n\tif (parsedArgs.extensionTestsPath) {\n\t\tparsedArgs.extensionTestsPath = mapFileUri(pathToURI(parsedArgs['extensionTestsPath']).href);\n\t}\n\n\tconst crashReporterDirectory = parsedArgs['crash-reporter-directory'];\n\tif (crashReporterDirectory !== undefined && !crashReporterDirectory.match(/^([a-zA-Z]:[\\\\\\/])/)) {\n\t\tconsole.log(`The crash reporter directory '${crashReporterDirectory}' must be an absolute Windows path (e.g. c:/crashes)`);\n\t\treturn;\n\t}\n\n\tif (cliCommand) {\n\t\tif (parsedArgs['install-extension'] !== undefined || parsedArgs['uninstall-extension'] !== undefined || parsedArgs['list-extensions'] || parsedArgs['update-extensions']) {\n\t\t\tconst cmdLine: string[] = [];\n\t\t\tparsedArgs['install-extension']?.forEach(id => cmdLine.push('--install-extension', id));\n\t\t\tparsedArgs['uninstall-extension']?.forEach(id => cmdLine.push('--uninstall-extension', id));\n\t\t\t['list-extensions', 'force', 'show-versions', 'category'].forEach(opt => {\n\t\t\t\tconst value = parsedArgs[<keyof NativeParsedArgs>opt];\n\t\t\t\tif (value !== undefined) {\n\t\t\t\t\tcmdLine.push(`--${opt}=${value}`);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (parsedArgs['update-extensions']) {\n\t\t\t\tcmdLine.push('--update-extensions');\n\t\t\t}\n\n\t\t\tconst childProcess = cp.fork(join(__dirname, '../../../server-main.js'), cmdLine, { stdio: 'inherit' });\n\t\t\tchildProcess.on('error', err => console.log(err));\n\t\t\treturn;\n\t\t}\n\n\t\tconst newCommandline: string[] = [];\n\t\tfor (const key in parsedArgs) {\n\t\t\tconst val = parsedArgs[key as keyof typeof parsedArgs];\n\t\t\tif (typeof val === 'boolean') {\n\t\t\t\tif (val) {\n\t\t\t\t\tnewCommandline.push('--' + key);\n\t\t\t\t}\n\t\t\t} else if (Array.isArray(val)) {\n\t\t\t\tfor (const entry of val) {\n\t\t\t\t\tnewCommandline.push(`--${key}=${entry.toString()}`);\n\t\t\t\t}\n\t\t\t} else if (val) {\n\t\t\t\tnewCommandline.push(`--${key}=${val.toString()}`);\n\t\t\t}\n\t\t}\n\t\tif (remote !== null) {\n\t\t\tnewCommandline.push(`--remote=${remote || cliRemoteAuthority}`);\n\t\t}\n\n\t\tconst ext = extname(cliCommand);\n\t\tif (ext === '.bat' || ext === '.cmd') {\n\t\t\tconst processCwd = cliCommandCwd || cwd();\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log(`Invoking: cmd.exe /C ${cliCommand} ${newCommandline.join(' ')} in ${processCwd}`);\n\t\t\t}\n\t\t\tcp.spawn('cmd.exe', ['/C', cliCommand, ...newCommandline], {\n\t\t\t\tstdio: 'inherit',\n\t\t\t\tcwd: processCwd\n\t\t\t});\n\t\t} else {\n\t\t\tconst cliCwd = dirname(cliCommand);\n\t\t\tconst env = { ...process.env, ELECTRON_RUN_AS_NODE: '1' };\n\t\t\tnewCommandline.unshift('resources/app/out/cli.js');\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log(`Invoking: cd \"${cliCwd}\" && ELECTRON_RUN_AS_NODE=1 \"${cliCommand}\" \"${newCommandline.join('\" \"')}\"`);\n\t\t\t}\n\t\t\tif (runningInWSL2()) {\n\t\t\t\tif (verbose) {\n\t\t\t\t\tconsole.log(`Using pipes for output.`);\n\t\t\t\t}\n\t\t\t\tconst childProcess = cp.spawn(cliCommand, newCommandline, { cwd: cliCwd, env, stdio: ['inherit', 'pipe', 'pipe'] });\n\t\t\t\tchildProcess.stdout.on('data', data => process.stdout.write(data));\n\t\t\t\tchildProcess.stderr.on('data', data => process.stderr.write(data));\n\t\t\t} else {\n\t\t\t\tcp.spawn(cliCommand, newCommandline, { cwd: cliCwd, env, stdio: 'inherit' });\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (parsedArgs.status) {\n\t\t\tsendToPipe({\n\t\t\t\ttype: 'status'\n\t\t\t}, verbose).then((res: string) => {\n\t\t\t\tconsole.log(res);\n\t\t\t}).catch(e => {\n\t\t\t\tconsole.error('Error when requesting status:', e);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (parsedArgs['install-extension'] !== undefined || parsedArgs['uninstall-extension'] !== undefined || parsedArgs['list-extensions'] || parsedArgs['update-extensions']) {\n\t\t\tsendToPipe({\n\t\t\t\ttype: 'extensionManagement',\n\t\t\t\tlist: parsedArgs['list-extensions'] ? { showVersions: parsedArgs['show-versions'], category: parsedArgs['category'] } : undefined,\n\t\t\t\tinstall: asExtensionIdOrVSIX(parsedArgs['install-extension']),\n\t\t\t\tuninstall: asExtensionIdOrVSIX(parsedArgs['uninstall-extension']),\n\t\t\t\tforce: parsedArgs['force']\n\t\t\t}, verbose).then((res: string) => {\n\t\t\t\tconsole.log(res);\n\t\t\t}).catch(e => {\n\t\t\t\tconsole.error('Error when invoking the extension management command:', e);\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tlet waitMarkerFilePath: string | undefined = undefined;\n\t\tif (parsedArgs['wait']) {\n\t\t\tif (!fileURIs.length) {\n\t\t\t\tconsole.log('At least one file must be provided to wait for.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twaitMarkerFilePath = createWaitMarkerFileSync(verbose);\n\t\t}\n\n\t\tsendToPipe({\n\t\t\ttype: 'open',\n\t\t\tfileURIs,\n\t\t\tfolderURIs,\n\t\t\tdiffMode: parsedArgs.diff,\n\t\t\tmergeMode: parsedArgs.merge,\n\t\t\taddMode: parsedArgs.add,\n\t\t\tgotoLineMode: parsedArgs.goto,\n\t\t\tforceReuseWindow: parsedArgs['reuse-window'],\n\t\t\tforceNewWindow: parsedArgs['new-window'],\n\t\t\twaitMarkerFilePath,\n\t\t\tremoteAuthority: remote\n\t\t}, verbose).catch(e => {\n\t\t\tconsole.error('Error when invoking the open command:', e);\n\t\t});\n\n\t\tif (waitMarkerFilePath) {\n\t\t\twaitForFileDeleted(waitMarkerFilePath);\n\t\t}\n\n\t\tif (readFromStdinPromise) {\n\t\t\tawait readFromStdinPromise;\n\t\t}\n\t}\n}\n\nfunction runningInWSL2(): boolean {\n\tif (!!process.env['WSL_DISTRO_NAME']) {\n\t\ttry {\n\t\t\treturn cp.execSync('uname -r', { encoding: 'utf8' }).includes('-microsoft-');\n\t\t} catch (_e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\treturn false;\n}\n\nasync function waitForFileDeleted(path: string) {\n\twhile (fs.existsSync(path)) {\n\t\tawait new Promise(res => setTimeout(res, 1000));\n\t}\n}\n\nfunction openInBrowser(args: string[], verbose: boolean) {\n\tconst uris: string[] = [];\n\tfor (const location of args) {\n\t\ttry {\n\t\t\tif (/^(http|https|file):\\/\\//.test(location)) {\n\t\t\t\turis.push(url.parse(location).href);\n\t\t\t} else {\n\t\t\t\turis.push(pathToURI(location).href);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(`Invalid url: ${location}`);\n\t\t}\n\t}\n\tif (uris.length) {\n\t\tsendToPipe({\n\t\t\ttype: 'openExternal',\n\t\t\turis\n\t\t}, verbose).catch(e => {\n\t\t\tconsole.error('Error when invoking the open external command:', e);\n\t\t});\n\t}\n}\n\nfunction sendToPipe(args: PipeCommand, verbose: boolean): Promise<any> {\n\tif (verbose) {\n\t\tconsole.log(JSON.stringify(args, null, '  '));\n\t}\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst message = JSON.stringify(args);\n\t\tif (!cliPipe) {\n\t\t\tconsole.log('Message ' + message);\n\t\t\tresolve('');\n\t\t\treturn;\n\t\t}\n\n\t\tconst opts: http.RequestOptions = {\n\t\t\tsocketPath: cliPipe,\n\t\t\tpath: '/',\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/json',\n\t\t\t\t'accept': 'application/json'\n\t\t\t}\n\t\t};\n\n\t\tconst req = http.request(opts, res => {\n\t\t\tif (res.headers['content-type'] !== 'application/json') {\n\t\t\t\treject('Error in response: Invalid content type: Expected \\'application/json\\', is: ' + res.headers['content-type']);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst chunks: string[] = [];\n\t\t\tres.setEncoding('utf8');\n\t\t\tres.on('data', chunk => {\n\t\t\t\tchunks.push(chunk);\n\t\t\t});\n\t\t\tres.on('error', (err) => fatal('Error in response.', err));\n\t\t\tres.on('end', () => {\n\t\t\t\tconst content = chunks.join('');\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = JSON.parse(content);\n\t\t\t\t\tif (res.statusCode === 200) {\n\t\t\t\t\t\tresolve(obj);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(obj);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject('Error in response: Unable to parse response as JSON: ' + content);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treq.on('error', (err) => fatal('Error in request.', err));\n\t\treq.write(message);\n\t\treq.end();\n\t});\n}\n\nfunction asExtensionIdOrVSIX(inputs: string[] | undefined) {\n\treturn inputs?.map(input => /\\.vsix$/i.test(input) ? pathToURI(input).href : input);\n}\n\nfunction fatal(message: string, err: any): void {\n\tconsole.error('Unable to connect to VS Code server: ' + message);\n\tconsole.error(err);\n\tprocess.exit(1);\n}\n\nconst preferredCwd = process.env.PWD || cwd(); // prefer process.env.PWD as it does not follow symlinks\n\nfunction pathToURI(input: string): url.URL {\n\tinput = input.trim();\n\tinput = resolve(preferredCwd, input);\n\n\treturn url.pathToFileURL(input);\n}\n\nfunction translatePath(input: string, mapFileUri: (input: string) => string, folderURIS: string[], fileURIS: string[]) {\n\tconst url = pathToURI(input);\n\tconst mappedUri = mapFileUri(url.href);\n\ttry {\n\t\tconst stat = fs.lstatSync(fs.realpathSync(input));\n\n\t\tif (stat.isFile()) {\n\t\t\tfileURIS.push(mappedUri);\n\t\t} else if (stat.isDirectory()) {\n\t\t\tfolderURIS.push(mappedUri);\n\t\t} else if (input === '/dev/null') {\n\t\t\t// handle /dev/null passed to us by external tools such as `git difftool`\n\t\t\tfileURIS.push(mappedUri);\n\t\t}\n\t} catch (e) {\n\t\tif (e.code === 'ENOENT') {\n\t\t\tfileURIS.push(mappedUri);\n\t\t} else {\n\t\t\tconsole.log(`Problem accessing file ${input}. Ignoring file`, e);\n\t\t}\n\t}\n}\n\nfunction mapFileToRemoteUri(uri: string): string {\n\treturn uri.replace(/^file:\\/\\//, 'vscode-remote://' + cliRemoteAuthority);\n}\n\nconst [, , productName, version, commit, executableName, ...remainingArgs] = process.argv;\nmain({ productName, version, commit, executableName }, remainingArgs).then(null, err => {\n\tconsole.error(err.message || err.stack || err);\n});\n"],
  "mappings": "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",
  "names": ["resolve", "url"]
}
