{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/server.cli.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from \"child_process\";\nimport * as fs from \"fs\";\nimport * as http from \"http\";\nimport * as url from \"url\";\nimport { DeferredPromise } from \"../../base/common/async.js\";\nimport { dirname, extname, join, resolve } from \"../../base/common/path.js\";\nimport { cwd } from \"../../base/common/process.js\";\nimport type { NativeParsedArgs } from \"../../platform/environment/common/argv.js\";\nimport {\n\ttype ErrorReporter,\n\tOPTIONS,\n\ttype OptionDescriptions,\n\tbuildHelpMessage,\n\tbuildVersionMessage,\n\tparseArgs,\n} from \"../../platform/environment/node/argv.js\";\nimport {\n\tgetStdinFilePath,\n\thasStdinWithoutTty,\n\treadFromStdin,\n} from \"../../platform/environment/node/stdin.js\";\nimport { createWaitMarkerFileSync } from \"../../platform/environment/node/wait.js\";\nimport type { PipeCommand } from \"../../workbench/api/node/extHostCLIServer.js\";\n\n/*\n * Implements a standalone CLI app that opens VS Code from a remote terminal.\n *  - In integrated terminals for remote windows this connects to the remote server though a pipe.\n *    The pipe is passed in env VSCODE_IPC_HOOK_CLI.\n *  - In external terminals for WSL this calls VS Code on the Windows side.\n *    The VS Code desktop executable path is passed in env VSCODE_CLIENT_COMMAND.\n */\n\ninterface ProductDescription {\n\tproductName: string;\n\tversion: string;\n\tcommit: string;\n\texecutableName: string;\n}\n\ninterface RemoteParsedArgs extends NativeParsedArgs {\n\tgitCredential?: string;\n\topenExternal?: boolean;\n}\n\nconst isSupportedForCmd = (optionId: keyof RemoteParsedArgs) => {\n\tswitch (optionId) {\n\t\tcase \"user-data-dir\":\n\t\tcase \"extensions-dir\":\n\t\tcase \"export-default-configuration\":\n\t\tcase \"install-source\":\n\t\tcase \"enable-smoke-test-driver\":\n\t\tcase \"extensions-download-dir\":\n\t\tcase \"builtin-extensions-dir\":\n\t\tcase \"telemetry\":\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn true;\n\t}\n};\n\nconst isSupportedForPipe = (optionId: keyof RemoteParsedArgs) => {\n\tswitch (optionId) {\n\t\tcase \"version\":\n\t\tcase \"help\":\n\t\tcase \"folder-uri\":\n\t\tcase \"file-uri\":\n\t\tcase \"add\":\n\t\tcase \"diff\":\n\t\tcase \"merge\":\n\t\tcase \"wait\":\n\t\tcase \"goto\":\n\t\tcase \"reuse-window\":\n\t\tcase \"new-window\":\n\t\tcase \"status\":\n\t\tcase \"install-extension\":\n\t\tcase \"uninstall-extension\":\n\t\tcase \"update-extensions\":\n\t\tcase \"list-extensions\":\n\t\tcase \"force\":\n\t\tcase \"show-versions\":\n\t\tcase \"category\":\n\t\tcase \"verbose\":\n\t\tcase \"remote\":\n\t\tcase \"locate-shell-integration-path\":\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t}\n};\n\nconst cliPipe = process.env[\"VSCODE_IPC_HOOK_CLI\"] as string;\nconst cliCommand = process.env[\"VSCODE_CLIENT_COMMAND\"] as string;\nconst cliCommandCwd = process.env[\"VSCODE_CLIENT_COMMAND_CWD\"] as string;\nconst cliRemoteAuthority = process.env[\"VSCODE_CLI_AUTHORITY\"] as string;\nconst cliStdInFilePath = process.env[\"VSCODE_STDIN_FILE_PATH\"] as string;\n\nexport async function main(\n\tdesc: ProductDescription,\n\targs: string[],\n): Promise<void> {\n\tif (!cliPipe && !cliCommand) {\n\t\tconsole.log(\n\t\t\t\"Command is only available in WSL or inside a Visual Studio Code terminal.\",\n\t\t);\n\t\treturn;\n\t}\n\n\t// take the local options and remove the ones that don't apply\n\tconst options: OptionDescriptions<Required<RemoteParsedArgs>> = {\n\t\t...OPTIONS,\n\t\tgitCredential: { type: \"string\" },\n\t\topenExternal: { type: \"boolean\" },\n\t};\n\tconst isSupported = cliCommand ? isSupportedForCmd : isSupportedForPipe;\n\tfor (const optionId in OPTIONS) {\n\t\tconst optId = <keyof RemoteParsedArgs>optionId;\n\t\tif (!isSupported(optId)) {\n\t\t\tdelete options[optId];\n\t\t}\n\t}\n\n\tif (cliPipe) {\n\t\toptions[\"openExternal\"] = { type: \"boolean\" };\n\t}\n\n\tconst errorReporter: ErrorReporter = {\n\t\tonMultipleValues: (id: string, usedValue: string) => {\n\t\t\tconsole.error(\n\t\t\t\t`Option '${id}' can only be defined once. Using value ${usedValue}.`,\n\t\t\t);\n\t\t},\n\t\tonEmptyValue: (id) => {\n\t\t\tconsole.error(`Ignoring option '${id}': Value must not be empty.`);\n\t\t},\n\t\tonUnknownOption: (id: string) => {\n\t\t\tconsole.error(\n\t\t\t\t`Ignoring option '${id}': not supported for ${desc.executableName}.`,\n\t\t\t);\n\t\t},\n\t\tonDeprecatedOption: (deprecatedOption: string, message: string) => {\n\t\t\tconsole.warn(\n\t\t\t\t`Option '${deprecatedOption}' is deprecated: ${message}`,\n\t\t\t);\n\t\t},\n\t};\n\n\tconst parsedArgs = parseArgs(args, options, errorReporter);\n\tconst mapFileUri = cliRemoteAuthority\n\t\t? mapFileToRemoteUri\n\t\t: (uri: string) => uri;\n\n\tconst verbose = !!parsedArgs[\"verbose\"];\n\n\tif (parsedArgs.help) {\n\t\tconsole.log(\n\t\t\tbuildHelpMessage(\n\t\t\t\tdesc.productName,\n\t\t\t\tdesc.executableName,\n\t\t\t\tdesc.version,\n\t\t\t\toptions,\n\t\t\t),\n\t\t);\n\t\treturn;\n\t}\n\tif (parsedArgs.version) {\n\t\tconsole.log(buildVersionMessage(desc.version, desc.commit));\n\t\treturn;\n\t}\n\tif (parsedArgs[\"locate-shell-integration-path\"]) {\n\t\tlet file: string;\n\t\tswitch (parsedArgs[\"locate-shell-integration-path\"]) {\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"`\n\t\t\tcase \"bash\":\n\t\t\t\tfile = \"shellIntegration-bash.sh\";\n\t\t\t\tbreak;\n\t\t\t// Usage: `if ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }`\n\t\t\tcase \"pwsh\":\n\t\t\t\tfile = \"shellIntegration.ps1\";\n\t\t\t\tbreak;\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"`\n\t\t\tcase \"zsh\":\n\t\t\t\tfile = \"shellIntegration-rc.zsh\";\n\t\t\t\tbreak;\n\t\t\t// Usage: `string match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)`\n\t\t\tcase \"fish\":\n\t\t\t\tfile = \"fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Error using --locate-shell-integration-path: Invalid shell type\",\n\t\t\t\t);\n\t\t}\n\t\tconsole.log(\n\t\t\tresolve(\n\t\t\t\t__dirname,\n\t\t\t\t\"../..\",\n\t\t\t\t\"workbench\",\n\t\t\t\t\"contrib\",\n\t\t\t\t\"terminal\",\n\t\t\t\t\"browser\",\n\t\t\t\t\"media\",\n\t\t\t\tfile,\n\t\t\t),\n\t\t);\n\t\treturn;\n\t}\n\tif (cliPipe) {\n\t\tif (parsedArgs[\"openExternal\"]) {\n\t\t\topenInBrowser(parsedArgs[\"_\"], verbose);\n\t\t\treturn;\n\t\t}\n\t}\n\n\tlet remote: string | null | undefined = parsedArgs.remote;\n\tif (remote === \"local\" || remote === \"false\" || remote === \"\") {\n\t\tremote = null; // null represent a local window\n\t}\n\n\tconst folderURIs = (parsedArgs[\"folder-uri\"] || []).map(mapFileUri);\n\tparsedArgs[\"folder-uri\"] = folderURIs;\n\n\tconst fileURIs = (parsedArgs[\"file-uri\"] || []).map(mapFileUri);\n\tparsedArgs[\"file-uri\"] = fileURIs;\n\n\tconst inputPaths = parsedArgs[\"_\"];\n\tlet hasReadStdinArg = false;\n\tfor (const input of inputPaths) {\n\t\tif (input === \"-\") {\n\t\t\thasReadStdinArg = true;\n\t\t} else {\n\t\t\ttranslatePath(input, mapFileUri, folderURIs, fileURIs);\n\t\t}\n\t}\n\n\tparsedArgs[\"_\"] = [];\n\n\tlet readFromStdinPromise: Promise<void> | undefined;\n\n\tif (hasReadStdinArg && hasStdinWithoutTty()) {\n\t\ttry {\n\t\t\tlet stdinFilePath = cliStdInFilePath;\n\t\t\tif (!stdinFilePath) {\n\t\t\t\tstdinFilePath = getStdinFilePath();\n\t\t\t\tconst readFromStdinDone = new DeferredPromise<void>();\n\t\t\t\tawait readFromStdin(stdinFilePath, verbose, () =>\n\t\t\t\t\treadFromStdinDone.complete(),\n\t\t\t\t); // throws error if file can not be written\n\t\t\t\tif (!parsedArgs.wait) {\n\t\t\t\t\t// if `--wait` is not provided, we keep this process alive\n\t\t\t\t\t// for at least as long as the stdin stream is open to\n\t\t\t\t\t// ensure that we read all the data.\n\t\t\t\t\treadFromStdinPromise = readFromStdinDone.p;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Make sure to open tmp file\n\t\t\ttranslatePath(stdinFilePath, mapFileUri, folderURIs, fileURIs);\n\n\t\t\t// Ignore adding this to history\n\t\t\tparsedArgs[\"skip-add-to-recently-opened\"] = true;\n\n\t\t\tconsole.log(`Reading from stdin via: ${stdinFilePath}`);\n\t\t} catch (e) {\n\t\t\tconsole.log(\n\t\t\t\t`Failed to create file to read via stdin: ${e.toString()}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tif (parsedArgs.extensionDevelopmentPath) {\n\t\tparsedArgs.extensionDevelopmentPath =\n\t\t\tparsedArgs.extensionDevelopmentPath.map((p) =>\n\t\t\t\tmapFileUri(pathToURI(p).href),\n\t\t\t);\n\t}\n\n\tif (parsedArgs.extensionTestsPath) {\n\t\tparsedArgs.extensionTestsPath = mapFileUri(\n\t\t\tpathToURI(parsedArgs[\"extensionTestsPath\"]).href,\n\t\t);\n\t}\n\n\tconst crashReporterDirectory = parsedArgs[\"crash-reporter-directory\"];\n\tif (\n\t\tcrashReporterDirectory !== undefined &&\n\t\t!crashReporterDirectory.match(/^([a-zA-Z]:[\\\\/])/)\n\t) {\n\t\tconsole.log(\n\t\t\t`The crash reporter directory '${crashReporterDirectory}' must be an absolute Windows path (e.g. c:/crashes)`,\n\t\t);\n\t\treturn;\n\t}\n\n\tif (cliCommand) {\n\t\tif (\n\t\t\tparsedArgs[\"install-extension\"] !== undefined ||\n\t\t\tparsedArgs[\"uninstall-extension\"] !== undefined ||\n\t\t\tparsedArgs[\"list-extensions\"] ||\n\t\t\tparsedArgs[\"update-extensions\"]\n\t\t) {\n\t\t\tconst cmdLine: string[] = [];\n\t\t\tparsedArgs[\"install-extension\"]?.forEach((id) =>\n\t\t\t\tcmdLine.push(\"--install-extension\", id),\n\t\t\t);\n\t\t\tparsedArgs[\"uninstall-extension\"]?.forEach((id) =>\n\t\t\t\tcmdLine.push(\"--uninstall-extension\", id),\n\t\t\t);\n\t\t\t[\"list-extensions\", \"force\", \"show-versions\", \"category\"].forEach(\n\t\t\t\t(opt) => {\n\t\t\t\t\tconst value = parsedArgs[<keyof NativeParsedArgs>opt];\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\tcmdLine.push(`--${opt}=${value}`);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (parsedArgs[\"update-extensions\"]) {\n\t\t\t\tcmdLine.push(\"--update-extensions\");\n\t\t\t}\n\n\t\t\tconst childProcess = cp.fork(\n\t\t\t\tjoin(__dirname, \"../../../server-main.js\"),\n\t\t\t\tcmdLine,\n\t\t\t\t{ stdio: \"inherit\" },\n\t\t\t);\n\t\t\tchildProcess.on(\"error\", (err) => console.log(err));\n\t\t\treturn;\n\t\t}\n\n\t\tconst newCommandline: string[] = [];\n\t\tfor (const key in parsedArgs) {\n\t\t\tconst val = parsedArgs[key as keyof typeof parsedArgs];\n\t\t\tif (typeof val === \"boolean\") {\n\t\t\t\tif (val) {\n\t\t\t\t\tnewCommandline.push(\"--\" + key);\n\t\t\t\t}\n\t\t\t} else if (Array.isArray(val)) {\n\t\t\t\tfor (const entry of val) {\n\t\t\t\t\tnewCommandline.push(`--${key}=${entry.toString()}`);\n\t\t\t\t}\n\t\t\t} else if (val) {\n\t\t\t\tnewCommandline.push(`--${key}=${val.toString()}`);\n\t\t\t}\n\t\t}\n\t\tif (remote !== null) {\n\t\t\tnewCommandline.push(`--remote=${remote || cliRemoteAuthority}`);\n\t\t}\n\n\t\tconst ext = extname(cliCommand);\n\t\tif (ext === \".bat\" || ext === \".cmd\") {\n\t\t\tconst processCwd = cliCommandCwd || cwd();\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Invoking: cmd.exe /C ${cliCommand} ${newCommandline.join(\" \")} in ${processCwd}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcp.spawn(\"cmd.exe\", [\"/C\", cliCommand, ...newCommandline], {\n\t\t\t\tstdio: \"inherit\",\n\t\t\t\tcwd: processCwd,\n\t\t\t});\n\t\t} else {\n\t\t\tconst cliCwd = dirname(cliCommand);\n\t\t\tconst env = { ...process.env, ELECTRON_RUN_AS_NODE: \"1\" };\n\t\t\tnewCommandline.unshift(\"resources/app/out/cli.js\");\n\t\t\tif (verbose) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t`Invoking: cd \"${cliCwd}\" && ELECTRON_RUN_AS_NODE=1 \"${cliCommand}\" \"${newCommandline.join('\" \"')}\"`,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (runningInWSL2()) {\n\t\t\t\tif (verbose) {\n\t\t\t\t\tconsole.log(`Using pipes for output.`);\n\t\t\t\t}\n\t\t\t\tconst childProcess = cp.spawn(cliCommand, newCommandline, {\n\t\t\t\t\tcwd: cliCwd,\n\t\t\t\t\tenv,\n\t\t\t\t\tstdio: [\"inherit\", \"pipe\", \"pipe\"],\n\t\t\t\t});\n\t\t\t\tchildProcess.stdout.on(\"data\", (data) =>\n\t\t\t\t\tprocess.stdout.write(data),\n\t\t\t\t);\n\t\t\t\tchildProcess.stderr.on(\"data\", (data) =>\n\t\t\t\t\tprocess.stderr.write(data),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tcp.spawn(cliCommand, newCommandline, {\n\t\t\t\t\tcwd: cliCwd,\n\t\t\t\t\tenv,\n\t\t\t\t\tstdio: \"inherit\",\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (parsedArgs.status) {\n\t\t\tsendToPipe(\n\t\t\t\t{\n\t\t\t\t\ttype: \"status\",\n\t\t\t\t},\n\t\t\t\tverbose,\n\t\t\t)\n\t\t\t\t.then((res: string) => {\n\t\t\t\t\tconsole.log(res);\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(\"Error when requesting status:\", e);\n\t\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (\n\t\t\tparsedArgs[\"install-extension\"] !== undefined ||\n\t\t\tparsedArgs[\"uninstall-extension\"] !== undefined ||\n\t\t\tparsedArgs[\"list-extensions\"] ||\n\t\t\tparsedArgs[\"update-extensions\"]\n\t\t) {\n\t\t\tsendToPipe(\n\t\t\t\t{\n\t\t\t\t\ttype: \"extensionManagement\",\n\t\t\t\t\tlist: parsedArgs[\"list-extensions\"]\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tshowVersions: parsedArgs[\"show-versions\"],\n\t\t\t\t\t\t\t\tcategory: parsedArgs[\"category\"],\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tinstall: asExtensionIdOrVSIX(\n\t\t\t\t\t\tparsedArgs[\"install-extension\"],\n\t\t\t\t\t),\n\t\t\t\t\tuninstall: asExtensionIdOrVSIX(\n\t\t\t\t\t\tparsedArgs[\"uninstall-extension\"],\n\t\t\t\t\t),\n\t\t\t\t\tforce: parsedArgs[\"force\"],\n\t\t\t\t},\n\t\t\t\tverbose,\n\t\t\t)\n\t\t\t\t.then((res: string) => {\n\t\t\t\t\tconsole.log(res);\n\t\t\t\t})\n\t\t\t\t.catch((e) => {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\"Error when invoking the extension management command:\",\n\t\t\t\t\t\te,\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tlet waitMarkerFilePath: string | undefined;\n\t\tif (parsedArgs[\"wait\"]) {\n\t\t\tif (!fileURIs.length) {\n\t\t\t\tconsole.log(\"At least one file must be provided to wait for.\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twaitMarkerFilePath = createWaitMarkerFileSync(verbose);\n\t\t}\n\n\t\tsendToPipe(\n\t\t\t{\n\t\t\t\ttype: \"open\",\n\t\t\t\tfileURIs,\n\t\t\t\tfolderURIs,\n\t\t\t\tdiffMode: parsedArgs.diff,\n\t\t\t\tmergeMode: parsedArgs.merge,\n\t\t\t\taddMode: parsedArgs.add,\n\t\t\t\tgotoLineMode: parsedArgs.goto,\n\t\t\t\tforceReuseWindow: parsedArgs[\"reuse-window\"],\n\t\t\t\tforceNewWindow: parsedArgs[\"new-window\"],\n\t\t\t\twaitMarkerFilePath,\n\t\t\t\tremoteAuthority: remote,\n\t\t\t},\n\t\t\tverbose,\n\t\t).catch((e) => {\n\t\t\tconsole.error(\"Error when invoking the open command:\", e);\n\t\t});\n\n\t\tif (waitMarkerFilePath) {\n\t\t\twaitForFileDeleted(waitMarkerFilePath);\n\t\t}\n\n\t\tif (readFromStdinPromise) {\n\t\t\tawait readFromStdinPromise;\n\t\t}\n\t}\n}\n\nfunction runningInWSL2(): boolean {\n\tif (!!process.env[\"WSL_DISTRO_NAME\"]) {\n\t\ttry {\n\t\t\treturn cp\n\t\t\t\t.execSync(\"uname -r\", { encoding: \"utf8\" })\n\t\t\t\t.includes(\"-microsoft-\");\n\t\t} catch (_e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\treturn false;\n}\n\nasync function waitForFileDeleted(path: string) {\n\twhile (fs.existsSync(path)) {\n\t\tawait new Promise((res) => setTimeout(res, 1000));\n\t}\n}\n\nfunction openInBrowser(args: string[], verbose: boolean) {\n\tconst uris: string[] = [];\n\tfor (const location of args) {\n\t\ttry {\n\t\t\tif (/^(http|https|file):\\/\\//.test(location)) {\n\t\t\t\turis.push(url.parse(location).href);\n\t\t\t} else {\n\t\t\t\turis.push(pathToURI(location).href);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.log(`Invalid url: ${location}`);\n\t\t}\n\t}\n\tif (uris.length) {\n\t\tsendToPipe(\n\t\t\t{\n\t\t\t\ttype: \"openExternal\",\n\t\t\t\turis,\n\t\t\t},\n\t\t\tverbose,\n\t\t).catch((e) => {\n\t\t\tconsole.error(\"Error when invoking the open external command:\", e);\n\t\t});\n\t}\n}\n\nfunction sendToPipe(args: PipeCommand, verbose: boolean): Promise<any> {\n\tif (verbose) {\n\t\tconsole.log(JSON.stringify(args, null, \"  \"));\n\t}\n\treturn new Promise<string>((resolve, reject) => {\n\t\tconst message = JSON.stringify(args);\n\t\tif (!cliPipe) {\n\t\t\tconsole.log(\"Message \" + message);\n\t\t\tresolve(\"\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst opts: http.RequestOptions = {\n\t\t\tsocketPath: cliPipe,\n\t\t\tpath: \"/\",\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"content-type\": \"application/json\",\n\t\t\t\taccept: \"application/json\",\n\t\t\t},\n\t\t};\n\n\t\tconst req = http.request(opts, (res) => {\n\t\t\tif (res.headers[\"content-type\"] !== \"application/json\") {\n\t\t\t\treject(\n\t\t\t\t\t\"Error in response: Invalid content type: Expected 'application/json', is: \" +\n\t\t\t\t\t\tres.headers[\"content-type\"],\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst chunks: string[] = [];\n\t\t\tres.setEncoding(\"utf8\");\n\t\t\tres.on(\"data\", (chunk) => {\n\t\t\t\tchunks.push(chunk);\n\t\t\t});\n\t\t\tres.on(\"error\", (err) => fatal(\"Error in response.\", err));\n\t\t\tres.on(\"end\", () => {\n\t\t\t\tconst content = chunks.join(\"\");\n\t\t\t\ttry {\n\t\t\t\t\tconst obj = JSON.parse(content);\n\t\t\t\t\tif (res.statusCode === 200) {\n\t\t\t\t\t\tresolve(obj);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(obj);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(\n\t\t\t\t\t\t\"Error in response: Unable to parse response as JSON: \" +\n\t\t\t\t\t\t\tcontent,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treq.on(\"error\", (err) => fatal(\"Error in request.\", err));\n\t\treq.write(message);\n\t\treq.end();\n\t});\n}\n\nfunction asExtensionIdOrVSIX(inputs: string[] | undefined) {\n\treturn inputs?.map((input) =>\n\t\t/\\.vsix$/i.test(input) ? pathToURI(input).href : input,\n\t);\n}\n\nfunction fatal(message: string, err: any): void {\n\tconsole.error(\"Unable to connect to VS Code server: \" + message);\n\tconsole.error(err);\n\tprocess.exit(1);\n}\n\nconst preferredCwd = process.env.PWD || cwd(); // prefer process.env.PWD as it does not follow symlinks\n\nfunction pathToURI(input: string): url.URL {\n\tinput = input.trim();\n\tinput = resolve(preferredCwd, input);\n\n\treturn url.pathToFileURL(input);\n}\n\nfunction translatePath(\n\tinput: string,\n\tmapFileUri: (input: string) => string,\n\tfolderURIS: string[],\n\tfileURIS: string[],\n) {\n\tconst url = pathToURI(input);\n\tconst mappedUri = mapFileUri(url.href);\n\ttry {\n\t\tconst stat = fs.lstatSync(fs.realpathSync(input));\n\n\t\tif (stat.isFile()) {\n\t\t\tfileURIS.push(mappedUri);\n\t\t} else if (stat.isDirectory()) {\n\t\t\tfolderURIS.push(mappedUri);\n\t\t} else if (input === \"/dev/null\") {\n\t\t\t// handle /dev/null passed to us by external tools such as `git difftool`\n\t\t\tfileURIS.push(mappedUri);\n\t\t}\n\t} catch (e) {\n\t\tif (e.code === \"ENOENT\") {\n\t\t\tfileURIS.push(mappedUri);\n\t\t} else {\n\t\t\tconsole.log(`Problem accessing file ${input}. Ignoring file`, e);\n\t\t}\n\t}\n}\n\nfunction mapFileToRemoteUri(uri: string): string {\n\treturn uri.replace(/^file:\\/\\//, \"vscode-remote://\" + cliRemoteAuthority);\n}\n\nconst [, , productName, version, commit, executableName, ...remainingArgs] =\n\tprocess.argv;\nmain({ productName, version, commit, executableName }, remainingArgs).then(\n\tnull,\n\t(err) => {\n\t\tconsole.error(err.message || err.stack || err);\n\t},\n);\n"],
  "mappings": "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",
  "names": ["resolve", "url"]
}
