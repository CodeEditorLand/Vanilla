import"../../base/common/event.js";import{delimiter as m,posix as a}from"../../base/common/path.js";import{URI as i}from"../../base/common/uri.js";import"../../base/common/uriIpc.js";import"../../platform/files/common/files.js";import"../../platform/files/common/watcher.js";import{DiskFileSystemProvider as c}from"../../platform/files/node/diskFileSystemProvider.js";import{AbstractDiskFileSystemProviderChannel as f,AbstractSessionFileWatcher as l}from"../../platform/files/node/diskFileSystemProviderServer.js";import"../../platform/log/common/log.js";import"../../platform/remote/common/remoteAgentEnvironment.js";import{createURITransformer as v}from"../../workbench/api/node/uriTransformer.js";import"./serverEnvironmentService.js";class L extends f{constructor(r,e){super(new c(r),r);this.environmentService=e;this._register(this.provider)}uriTransformerCache=new Map;getUriTransformer(r){let e=this.uriTransformerCache.get(r.remoteAuthority);return e||(e=v(r.remoteAuthority),this.uriTransformerCache.set(r.remoteAuthority,e)),e}transformIncoming(r,e,n=!1){if(n&&e.path==="/vscode-resource"&&e.query){const o=JSON.parse(e.query).requestResourcePath;return i.from({scheme:"file",path:o})}return i.revive(r.transformIncoming(e))}createSessionFileWatcher(r,e){return new p(r,e,this.logService,this.environmentService)}}class p extends l{constructor(t,r,e,n){super(t,r,e,n)}getRecursiveWatcherOptions(t){const r=t.args["file-watcher-polling"];if(r){const e=r.split(m),n=Number(e[0]);if(n>0)return{usePolling:e.length>1?e.slice(1):!0,pollingInterval:n}}}getExtraExcludes(t){if(t.extensionsPath)return[a.join(t.extensionsPath,"**")]}}export{L as RemoteAgentFileSystemProviderChannel};
