import"../../base/common/event.js";import{URI as n}from"../../base/common/uri.js";import"../../base/common/uriIpc.js";import"../../platform/files/common/files.js";import"../../platform/log/common/log.js";import{createURITransformer as a}from"../../workbench/api/node/uriTransformer.js";import"../../platform/remote/common/remoteAgentEnvironment.js";import{DiskFileSystemProvider as c}from"../../platform/files/node/diskFileSystemProvider.js";import{posix as f,delimiter as v}from"../../base/common/path.js";import"./serverEnvironmentService.js";import{AbstractDiskFileSystemProviderChannel as p,AbstractSessionFileWatcher as u}from"../../platform/files/node/diskFileSystemProviderServer.js";import"../../platform/files/common/watcher.js";import"../../platform/configuration/common/configuration.js";class N extends p{constructor(r,e,i){super(new c(r),r);this.environmentService=e;this.configurationService=i;this._register(this.provider)}uriTransformerCache=new Map;getUriTransformer(r){let e=this.uriTransformerCache.get(r.remoteAuthority);return e||(e=a(r.remoteAuthority),this.uriTransformerCache.set(r.remoteAuthority,e)),e}transformIncoming(r,e,i=!1){if(i&&e.path==="/vscode-resource"&&e.query){const o=JSON.parse(e.query).requestResourcePath;return n.from({scheme:"file",path:o})}return n.revive(r.transformIncoming(e))}createSessionFileWatcher(r,e){return new h(r,e,this.logService,this.environmentService,this.configurationService)}}class h extends u{constructor(t,r,e,i,o){super(t,r,e,i,o)}getRecursiveWatcherOptions(t){const r=super.getRecursiveWatcherOptions(t),e=t.args["file-watcher-polling"];if(e){const i=e.split(v),o=Number(i[0]);if(o>0){const m=i.length>1?i.slice(1):!0;return{...r,usePolling:m,pollingInterval:o}}}return r}getExtraExcludes(t){if(t.extensionsPath)return[f.join(t.extensionsPath,"**")]}}export{N as RemoteAgentFileSystemProviderChannel};
