import{delimiter as m,posix as a}from"../../base/common/path.js";import{URI as i}from"../../base/common/uri.js";import{DiskFileSystemProvider as c}from"../../platform/files/node/diskFileSystemProvider.js";import{AbstractDiskFileSystemProviderChannel as p,AbstractSessionFileWatcher as f}from"../../platform/files/node/diskFileSystemProviderServer.js";import{createURITransformer as l}from"../../workbench/api/node/uriTransformer.js";class S extends p{constructor(r,e){super(new c(r),r);this.environmentService=e;this._register(this.provider)}uriTransformerCache=new Map;getUriTransformer(r){let e=this.uriTransformerCache.get(r.remoteAuthority);return e||(e=l(r.remoteAuthority),this.uriTransformerCache.set(r.remoteAuthority,e)),e}transformIncoming(r,e,o=!1){if(o&&e.path==="/vscode-resource"&&e.query){const n=JSON.parse(e.query).requestResourcePath;return i.from({scheme:"file",path:n})}return i.revive(r.transformIncoming(e))}createSessionFileWatcher(r,e){return new v(r,e,this.logService,this.environmentService)}}class v extends f{constructor(t,r,e,o){super(t,r,e,o)}getRecursiveWatcherOptions(t){const r=t.args["file-watcher-polling"];if(r){const e=r.split(m),o=Number(e[0]);if(o>0)return{usePolling:e.length>1?e.slice(1):!0,pollingInterval:o}}}getExtraExcludes(t){if(t.extensionsPath)return[a.join(t.extensionsPath,"**")]}}export{S as RemoteAgentFileSystemProviderChannel};
