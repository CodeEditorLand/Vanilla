import"../../base/common/event.js";import{URI as o}from"../../base/common/uri.js";import"../../base/common/uriIpc.js";import"../../platform/files/common/files.js";import"../../platform/log/common/log.js";import{createURITransformer as m}from"../../workbench/api/node/uriTransformer.js";import"../../platform/remote/common/remoteAgentEnvironment.js";import{DiskFileSystemProvider as a}from"../../platform/files/node/diskFileSystemProvider.js";import{posix as c,delimiter as f}from"../../base/common/path.js";import"./serverEnvironmentService.js";import{AbstractDiskFileSystemProviderChannel as v,AbstractSessionFileWatcher as u}from"../../platform/files/node/diskFileSystemProviderServer.js";import"../../platform/files/common/watcher.js";import"../../platform/configuration/common/configuration.js";class D extends v{constructor(r,e,i){super(new a(r),r);this.environmentService=e;this.configurationService=i;this._register(this.provider)}uriTransformerCache=new Map;getUriTransformer(r){let e=this.uriTransformerCache.get(r.remoteAuthority);return e||(e=m(r.remoteAuthority),this.uriTransformerCache.set(r.remoteAuthority,e)),e}transformIncoming(r,e,i=!1){if(i&&e.path==="/vscode-resource"&&e.query){const n=JSON.parse(e.query).requestResourcePath;return o.from({scheme:"file",path:n})}return o.revive(r.transformIncoming(e))}createSessionFileWatcher(r,e){return new l(r,e,this.logService,this.environmentService,this.configurationService)}}class l extends u{constructor(t,r,e,i,n){super(t,r,e,i)}getRecursiveWatcherOptions(t){const r=t.args["file-watcher-polling"];if(r){const e=r.split(f),i=Number(e[0]);if(i>0)return{usePolling:e.length>1?e.slice(1):!0,pollingInterval:i}}}getExtraExcludes(t){if(t.extensionsPath)return[c.join(t.extensionsPath,"**")]}}export{D as RemoteAgentFileSystemProviderChannel};
