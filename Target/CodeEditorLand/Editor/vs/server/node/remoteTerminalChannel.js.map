{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteTerminalChannel.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as os from \"os\";\nimport { promiseWithResolvers } from \"../../base/common/async.js\";\nimport { Emitter, Event } from \"../../base/common/event.js\";\nimport { Disposable } from \"../../base/common/lifecycle.js\";\nimport { cloneAndChange } from \"../../base/common/objects.js\";\nimport * as path from \"../../base/common/path.js\";\nimport * as platform from \"../../base/common/platform.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport type { IURITransformer } from \"../../base/common/uriIpc.js\";\nimport type { IServerChannel } from \"../../base/parts/ipc/common/ipc.js\";\nimport { createRandomIPCHandle } from \"../../base/parts/ipc/node/ipc.net.js\";\nimport type { IConfigurationService } from \"../../platform/configuration/common/configuration.js\";\nimport type { IExtensionManagementService } from \"../../platform/extensionManagement/common/extensionManagement.js\";\nimport type { ILogService } from \"../../platform/log/common/log.js\";\nimport type { IProductService } from \"../../platform/product/common/productService.js\";\nimport type { RemoteAgentConnectionContext } from \"../../platform/remote/common/remoteAgentEnvironment.js\";\nimport type { IEnvironmentVariableCollection } from \"../../platform/terminal/common/environmentVariable.js\";\nimport { MergedEnvironmentVariableCollection } from \"../../platform/terminal/common/environmentVariableCollection.js\";\nimport {\n\tdeserializeEnvironmentDescriptionMap,\n\tdeserializeEnvironmentVariableCollection,\n} from \"../../platform/terminal/common/environmentVariableShared.js\";\nimport type {\n\tIPtyHostService,\n\tIShellLaunchConfig,\n\tITerminalProfile,\n} from \"../../platform/terminal/common/terminal.js\";\nimport { shouldUseEnvironmentVariableCollection } from \"../../platform/terminal/common/terminalEnvironment.js\";\nimport type {\n\tIGetTerminalLayoutInfoArgs,\n\tISetTerminalLayoutInfoArgs,\n} from \"../../platform/terminal/common/terminalProcess.js\";\nimport type { IWorkspaceFolder } from \"../../platform/workspace/common/workspace.js\";\nimport {\n\tCLIServerBase,\n\ttype ICommandsExecuter,\n} from \"../../workbench/api/node/extHostCLIServer.js\";\nimport { createURITransformer } from \"../../workbench/api/node/uriTransformer.js\";\nimport {\n\ttype ICreateTerminalProcessArguments,\n\ttype ICreateTerminalProcessResult,\n\ttype IWorkspaceFolderData,\n\tRemoteTerminalChannelEvent,\n\tRemoteTerminalChannelRequest,\n} from \"../../workbench/contrib/terminal/common/remote/terminal.js\";\nimport * as terminalEnvironment from \"../../workbench/contrib/terminal/common/terminalEnvironment.js\";\nimport { AbstractVariableResolverService } from \"../../workbench/services/configurationResolver/common/variableResolver.js\";\nimport { buildUserEnvironment } from \"./extensionHostConnection.js\";\nimport type { IServerEnvironmentService } from \"./serverEnvironmentService.js\";\n\nclass CustomVariableResolver extends AbstractVariableResolverService {\n\tconstructor(\n\t\tenv: platform.IProcessEnvironment,\n\t\tworkspaceFolders: IWorkspaceFolder[],\n\t\tactiveFileResource: URI | undefined,\n\t\tresolvedVariables: { [name: string]: string },\n\t\textensionService: IExtensionManagementService,\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tgetFolderUri: (folderName: string): URI | undefined => {\n\t\t\t\t\tconst found = workspaceFolders.filter(\n\t\t\t\t\t\t(f) => f.name === folderName,\n\t\t\t\t\t);\n\t\t\t\t\tif (found && found.length > 0) {\n\t\t\t\t\t\treturn found[0].uri;\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tgetWorkspaceFolderCount: (): number => {\n\t\t\t\t\treturn workspaceFolders.length;\n\t\t\t\t},\n\t\t\t\tgetConfigurationValue: (\n\t\t\t\t\tfolderUri: URI,\n\t\t\t\t\tsection: string,\n\t\t\t\t): string | undefined => {\n\t\t\t\t\treturn resolvedVariables[`config:${section}`];\n\t\t\t\t},\n\t\t\t\tgetExecPath: (): string | undefined => {\n\t\t\t\t\treturn env[\"VSCODE_EXEC_PATH\"];\n\t\t\t\t},\n\t\t\t\tgetAppRoot: (): string | undefined => {\n\t\t\t\t\treturn env[\"VSCODE_CWD\"];\n\t\t\t\t},\n\t\t\t\tgetFilePath: (): string | undefined => {\n\t\t\t\t\tif (activeFileResource) {\n\t\t\t\t\t\treturn path.normalize(activeFileResource.fsPath);\n\t\t\t\t\t}\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tgetSelectedText: (): string | undefined => {\n\t\t\t\t\treturn resolvedVariables[\"selectedText\"];\n\t\t\t\t},\n\t\t\t\tgetLineNumber: (): string | undefined => {\n\t\t\t\t\treturn resolvedVariables[\"lineNumber\"];\n\t\t\t\t},\n\t\t\t\tgetExtension: async (id) => {\n\t\t\t\t\tconst installed = await extensionService.getInstalled();\n\t\t\t\t\tconst found = installed.find((e) => e.identifier.id === id);\n\t\t\t\t\treturn found && { extensionLocation: found.location };\n\t\t\t\t},\n\t\t\t},\n\t\t\tundefined,\n\t\t\tPromise.resolve(os.homedir()),\n\t\t\tPromise.resolve(env),\n\t\t);\n\t}\n}\n\nexport class RemoteTerminalChannel\n\textends Disposable\n\timplements IServerChannel<RemoteAgentConnectionContext>\n{\n\tprivate _lastReqId = 0;\n\tprivate readonly _pendingCommands = new Map<\n\t\tnumber,\n\t\t{\n\t\t\tresolve: (data: any) => void;\n\t\t\treject: (err: any) => void;\n\t\t\turiTransformer: IURITransformer;\n\t\t}\n\t>();\n\n\tprivate readonly _onExecuteCommand = this._register(\n\t\tnew Emitter<{\n\t\t\treqId: number;\n\t\t\tpersistentProcessId: number;\n\t\t\tcommandId: string;\n\t\t\tcommandArgs: any[];\n\t\t}>(),\n\t);\n\treadonly onExecuteCommand = this._onExecuteCommand.event;\n\n\tconstructor(\n\t\tprivate readonly _environmentService: IServerEnvironmentService,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _ptyHostService: IPtyHostService,\n\t\tprivate readonly _productService: IProductService,\n\t\tprivate readonly _extensionManagementService: IExtensionManagementService,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tasync call(\n\t\tctx: RemoteAgentConnectionContext,\n\t\tcommand: RemoteTerminalChannelRequest,\n\t\targs?: any,\n\t): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase RemoteTerminalChannelRequest.RestartPtyHost:\n\t\t\t\treturn this._ptyHostService.restartPtyHost.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\n\t\t\tcase RemoteTerminalChannelRequest.CreateProcess: {\n\t\t\t\tconst uriTransformer = createURITransformer(\n\t\t\t\t\tctx.remoteAuthority,\n\t\t\t\t);\n\t\t\t\treturn this._createProcess(\n\t\t\t\t\turiTransformer,\n\t\t\t\t\t<ICreateTerminalProcessArguments>args,\n\t\t\t\t);\n\t\t\t}\n\t\t\tcase RemoteTerminalChannelRequest.AttachToProcess:\n\t\t\t\treturn this._ptyHostService.attachToProcess.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.DetachFromProcess:\n\t\t\t\treturn this._ptyHostService.detachFromProcess.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\n\t\t\tcase RemoteTerminalChannelRequest.ListProcesses:\n\t\t\t\treturn this._ptyHostService.listProcesses.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.GetLatency:\n\t\t\t\treturn this._ptyHostService.getLatency.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.GetPerformanceMarks:\n\t\t\t\treturn this._ptyHostService.getPerformanceMarks.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.OrphanQuestionReply:\n\t\t\t\treturn this._ptyHostService.orphanQuestionReply.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.AcceptPtyHostResolvedVariables:\n\t\t\t\treturn this._ptyHostService.acceptPtyHostResolvedVariables.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\n\t\t\tcase RemoteTerminalChannelRequest.Start:\n\t\t\t\treturn this._ptyHostService.start.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.Input:\n\t\t\t\treturn this._ptyHostService.input.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.AcknowledgeDataEvent:\n\t\t\t\treturn this._ptyHostService.acknowledgeDataEvent.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.Shutdown:\n\t\t\t\treturn this._ptyHostService.shutdown.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.Resize:\n\t\t\t\treturn this._ptyHostService.resize.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.ClearBuffer:\n\t\t\t\treturn this._ptyHostService.clearBuffer.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.GetInitialCwd:\n\t\t\t\treturn this._ptyHostService.getInitialCwd.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.GetCwd:\n\t\t\t\treturn this._ptyHostService.getCwd.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\n\t\t\tcase RemoteTerminalChannelRequest.ProcessBinary:\n\t\t\t\treturn this._ptyHostService.processBinary.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\n\t\t\tcase RemoteTerminalChannelRequest.SendCommandResult:\n\t\t\t\treturn this._sendCommandResult(args[0], args[1], args[2]);\n\t\t\tcase RemoteTerminalChannelRequest.InstallAutoReply:\n\t\t\t\treturn this._ptyHostService.installAutoReply.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.UninstallAllAutoReplies:\n\t\t\t\treturn this._ptyHostService.uninstallAllAutoReplies.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.GetDefaultSystemShell:\n\t\t\t\treturn this._getDefaultSystemShell.apply(this, args);\n\t\t\tcase RemoteTerminalChannelRequest.GetProfiles:\n\t\t\t\treturn this._getProfiles.apply(this, args);\n\t\t\tcase RemoteTerminalChannelRequest.GetEnvironment:\n\t\t\t\treturn this._getEnvironment();\n\t\t\tcase RemoteTerminalChannelRequest.GetWslPath:\n\t\t\t\treturn this._getWslPath(args[0], args[1]);\n\t\t\tcase RemoteTerminalChannelRequest.GetTerminalLayoutInfo:\n\t\t\t\treturn this._ptyHostService.getTerminalLayoutInfo(\n\t\t\t\t\t<IGetTerminalLayoutInfoArgs>args,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.SetTerminalLayoutInfo:\n\t\t\t\treturn this._ptyHostService.setTerminalLayoutInfo(\n\t\t\t\t\t<ISetTerminalLayoutInfoArgs>args,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.SerializeTerminalState:\n\t\t\t\treturn this._ptyHostService.serializeTerminalState.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.ReviveTerminalProcesses:\n\t\t\t\treturn this._ptyHostService.reviveTerminalProcesses.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.GetRevivedPtyNewId:\n\t\t\t\treturn this._ptyHostService.getRevivedPtyNewId.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.SetUnicodeVersion:\n\t\t\t\treturn this._ptyHostService.setUnicodeVersion.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.ReduceConnectionGraceTime:\n\t\t\t\treturn this._reduceConnectionGraceTime();\n\t\t\tcase RemoteTerminalChannelRequest.UpdateIcon:\n\t\t\t\treturn this._ptyHostService.updateIcon.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.UpdateTitle:\n\t\t\t\treturn this._ptyHostService.updateTitle.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.UpdateProperty:\n\t\t\t\treturn this._ptyHostService.updateProperty.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.RefreshProperty:\n\t\t\t\treturn this._ptyHostService.refreshProperty.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.RequestDetachInstance:\n\t\t\t\treturn this._ptyHostService.requestDetachInstance(\n\t\t\t\t\targs[0],\n\t\t\t\t\targs[1],\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.AcceptDetachedInstance:\n\t\t\t\treturn this._ptyHostService.acceptDetachInstanceReply(\n\t\t\t\t\targs[0],\n\t\t\t\t\targs[1],\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.FreePortKillProcess:\n\t\t\t\treturn this._ptyHostService.freePortKillProcess.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelRequest.AcceptDetachInstanceReply:\n\t\t\t\treturn this._ptyHostService.acceptDetachInstanceReply.apply(\n\t\t\t\t\tthis._ptyHostService,\n\t\t\t\t\targs,\n\t\t\t\t);\n\t\t}\n\n\t\t// @ts-expect-error Assert command is the `never` type to ensure all messages are handled\n\t\tthrow new Error(`IPC Command ${command} not found`);\n\t}\n\n\tlisten(_: any, event: RemoteTerminalChannelEvent, arg: any): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase RemoteTerminalChannelEvent.OnPtyHostExitEvent:\n\t\t\t\treturn this._ptyHostService.onPtyHostExit || Event.None;\n\t\t\tcase RemoteTerminalChannelEvent.OnPtyHostStartEvent:\n\t\t\t\treturn this._ptyHostService.onPtyHostStart || Event.None;\n\t\t\tcase RemoteTerminalChannelEvent.OnPtyHostUnresponsiveEvent:\n\t\t\t\treturn this._ptyHostService.onPtyHostUnresponsive || Event.None;\n\t\t\tcase RemoteTerminalChannelEvent.OnPtyHostResponsiveEvent:\n\t\t\t\treturn this._ptyHostService.onPtyHostResponsive || Event.None;\n\t\t\tcase RemoteTerminalChannelEvent.OnPtyHostRequestResolveVariablesEvent:\n\t\t\t\treturn (\n\t\t\t\t\tthis._ptyHostService.onPtyHostRequestResolveVariables ||\n\t\t\t\t\tEvent.None\n\t\t\t\t);\n\t\t\tcase RemoteTerminalChannelEvent.OnProcessDataEvent:\n\t\t\t\treturn this._ptyHostService.onProcessData;\n\t\t\tcase RemoteTerminalChannelEvent.OnProcessReadyEvent:\n\t\t\t\treturn this._ptyHostService.onProcessReady;\n\t\t\tcase RemoteTerminalChannelEvent.OnProcessExitEvent:\n\t\t\t\treturn this._ptyHostService.onProcessExit;\n\t\t\tcase RemoteTerminalChannelEvent.OnProcessReplayEvent:\n\t\t\t\treturn this._ptyHostService.onProcessReplay;\n\t\t\tcase RemoteTerminalChannelEvent.OnProcessOrphanQuestion:\n\t\t\t\treturn this._ptyHostService.onProcessOrphanQuestion;\n\t\t\tcase RemoteTerminalChannelEvent.OnExecuteCommand:\n\t\t\t\treturn this.onExecuteCommand;\n\t\t\tcase RemoteTerminalChannelEvent.OnDidRequestDetach:\n\t\t\t\treturn this._ptyHostService.onDidRequestDetach || Event.None;\n\t\t\tcase RemoteTerminalChannelEvent.OnDidChangeProperty:\n\t\t\t\treturn this._ptyHostService.onDidChangeProperty;\n\t\t}\n\n\t\t// @ts-expect-error Assert event is the `never` type to ensure all messages are handled\n\t\tthrow new Error(`IPC Command ${event} not found`);\n\t}\n\n\tprivate async _createProcess(\n\t\turiTransformer: IURITransformer,\n\t\targs: ICreateTerminalProcessArguments,\n\t): Promise<ICreateTerminalProcessResult> {\n\t\tconst shellLaunchConfig: IShellLaunchConfig = {\n\t\t\tname: args.shellLaunchConfig.name,\n\t\t\texecutable: args.shellLaunchConfig.executable,\n\t\t\targs: args.shellLaunchConfig.args,\n\t\t\tcwd:\n\t\t\t\ttypeof args.shellLaunchConfig.cwd === \"string\" ||\n\t\t\t\ttypeof args.shellLaunchConfig.cwd === \"undefined\"\n\t\t\t\t\t? args.shellLaunchConfig.cwd\n\t\t\t\t\t: URI.revive(\n\t\t\t\t\t\t\turiTransformer.transformIncoming(\n\t\t\t\t\t\t\t\targs.shellLaunchConfig.cwd,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\tenv: args.shellLaunchConfig.env,\n\t\t\tuseShellEnvironment: args.shellLaunchConfig.useShellEnvironment,\n\t\t\treconnectionProperties:\n\t\t\t\targs.shellLaunchConfig.reconnectionProperties,\n\t\t\ttype: args.shellLaunchConfig.type,\n\t\t\tisFeatureTerminal: args.shellLaunchConfig.isFeatureTerminal,\n\t\t};\n\n\t\tconst baseEnv = await buildUserEnvironment(\n\t\t\targs.resolverEnv,\n\t\t\t!!args.shellLaunchConfig.useShellEnvironment,\n\t\t\tplatform.language,\n\t\t\tthis._environmentService,\n\t\t\tthis._logService,\n\t\t\tthis._configurationService,\n\t\t);\n\t\tthis._logService.trace(\"baseEnv\", baseEnv);\n\n\t\tconst reviveWorkspaceFolder = (\n\t\t\tworkspaceData: IWorkspaceFolderData,\n\t\t): IWorkspaceFolder => {\n\t\t\treturn {\n\t\t\t\turi: URI.revive(\n\t\t\t\t\turiTransformer.transformIncoming(workspaceData.uri),\n\t\t\t\t),\n\t\t\t\tname: workspaceData.name,\n\t\t\t\tindex: workspaceData.index,\n\t\t\t\ttoResource: () => {\n\t\t\t\t\tthrow new Error(\"Not implemented\");\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\t\tconst workspaceFolders = args.workspaceFolders.map(\n\t\t\treviveWorkspaceFolder,\n\t\t);\n\t\tconst activeWorkspaceFolder = args.activeWorkspaceFolder\n\t\t\t? reviveWorkspaceFolder(args.activeWorkspaceFolder)\n\t\t\t: undefined;\n\t\tconst activeFileResource = args.activeFileResource\n\t\t\t? URI.revive(\n\t\t\t\t\turiTransformer.transformIncoming(args.activeFileResource),\n\t\t\t\t)\n\t\t\t: undefined;\n\t\tconst customVariableResolver = new CustomVariableResolver(\n\t\t\tbaseEnv,\n\t\t\tworkspaceFolders,\n\t\t\tactiveFileResource,\n\t\t\targs.resolvedVariables,\n\t\t\tthis._extensionManagementService,\n\t\t);\n\t\tconst variableResolver = terminalEnvironment.createVariableResolver(\n\t\t\tactiveWorkspaceFolder,\n\t\t\tprocess.env,\n\t\t\tcustomVariableResolver,\n\t\t);\n\n\t\t// Get the initial cwd\n\t\tconst initialCwd = await terminalEnvironment.getCwd(\n\t\t\tshellLaunchConfig,\n\t\t\tos.homedir(),\n\t\t\tvariableResolver,\n\t\t\tactiveWorkspaceFolder?.uri,\n\t\t\targs.configuration[\"terminal.integrated.cwd\"],\n\t\t\tthis._logService,\n\t\t);\n\t\tshellLaunchConfig.cwd = initialCwd;\n\n\t\tconst envPlatformKey = platform.isWindows\n\t\t\t? \"terminal.integrated.env.windows\"\n\t\t\t: platform.isMacintosh\n\t\t\t\t? \"terminal.integrated.env.osx\"\n\t\t\t\t: \"terminal.integrated.env.linux\";\n\t\tconst envFromConfig = args.configuration[envPlatformKey];\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(\n\t\t\tshellLaunchConfig,\n\t\t\tenvFromConfig,\n\t\t\tvariableResolver,\n\t\t\tthis._productService.version,\n\t\t\targs.configuration[\"terminal.integrated.detectLocale\"],\n\t\t\tbaseEnv,\n\t\t);\n\n\t\t// Apply extension environment variable collections to the environment\n\t\tif (shouldUseEnvironmentVariableCollection(shellLaunchConfig)) {\n\t\t\tconst entries: [string, IEnvironmentVariableCollection][] = [];\n\t\t\tfor (const [k, v, d] of args.envVariableCollections) {\n\t\t\t\tentries.push([\n\t\t\t\t\tk,\n\t\t\t\t\t{\n\t\t\t\t\t\tmap: deserializeEnvironmentVariableCollection(v),\n\t\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap(d),\n\t\t\t\t\t},\n\t\t\t\t]);\n\t\t\t}\n\t\t\tconst envVariableCollections = new Map<\n\t\t\t\tstring,\n\t\t\t\tIEnvironmentVariableCollection\n\t\t\t>(entries);\n\t\t\tconst mergedCollection = new MergedEnvironmentVariableCollection(\n\t\t\t\tenvVariableCollections,\n\t\t\t);\n\t\t\tconst workspaceFolder = activeWorkspaceFolder\n\t\t\t\t? (activeWorkspaceFolder ?? undefined)\n\t\t\t\t: undefined;\n\t\t\tawait mergedCollection.applyToProcessEnvironment(\n\t\t\t\tenv,\n\t\t\t\t{ workspaceFolder },\n\t\t\t\tvariableResolver,\n\t\t\t);\n\t\t}\n\n\t\t// Fork the process and listen for messages\n\t\tthis._logService.debug(`Terminal process launching on remote agent`, {\n\t\t\tshellLaunchConfig,\n\t\t\tinitialCwd,\n\t\t\tcols: args.cols,\n\t\t\trows: args.rows,\n\t\t\tenv,\n\t\t});\n\n\t\t// Setup the CLI server to support forwarding commands run from the CLI\n\t\tconst ipcHandlePath = createRandomIPCHandle();\n\t\tenv.VSCODE_IPC_HOOK_CLI = ipcHandlePath;\n\n\t\tconst persistentProcessId = await this._ptyHostService.createProcess(\n\t\t\tshellLaunchConfig,\n\t\t\tinitialCwd,\n\t\t\targs.cols,\n\t\t\targs.rows,\n\t\t\targs.unicodeVersion,\n\t\t\tenv,\n\t\t\tbaseEnv,\n\t\t\targs.options,\n\t\t\targs.shouldPersistTerminal,\n\t\t\targs.workspaceId,\n\t\t\targs.workspaceName,\n\t\t);\n\t\tconst commandsExecuter: ICommandsExecuter = {\n\t\t\texecuteCommand: <T>(id: string, ...args: any[]): Promise<T> =>\n\t\t\t\tthis._executeCommand(\n\t\t\t\t\tpersistentProcessId,\n\t\t\t\t\tid,\n\t\t\t\t\targs,\n\t\t\t\t\turiTransformer,\n\t\t\t\t),\n\t\t};\n\t\tconst cliServer = new CLIServerBase(\n\t\t\tcommandsExecuter,\n\t\t\tthis._logService,\n\t\t\tipcHandlePath,\n\t\t);\n\t\tthis._ptyHostService.onProcessExit(\n\t\t\t(e) => e.id === persistentProcessId && cliServer.dispose(),\n\t\t);\n\n\t\treturn {\n\t\t\tpersistentTerminalId: persistentProcessId,\n\t\t\tresolvedShellLaunchConfig: shellLaunchConfig,\n\t\t};\n\t}\n\n\tprivate _executeCommand<T>(\n\t\tpersistentProcessId: number,\n\t\tcommandId: string,\n\t\tcommandArgs: any[],\n\t\turiTransformer: IURITransformer,\n\t): Promise<T> {\n\t\tconst { resolve, reject, promise } = promiseWithResolvers<T>();\n\n\t\tconst reqId = ++this._lastReqId;\n\t\tthis._pendingCommands.set(reqId, { resolve, reject, uriTransformer });\n\n\t\tconst serializedCommandArgs = cloneAndChange(commandArgs, (obj) => {\n\t\t\tif (obj && obj.$mid === 1) {\n\t\t\t\t// this is UriComponents\n\t\t\t\treturn uriTransformer.transformOutgoing(obj);\n\t\t\t}\n\t\t\tif (obj && obj instanceof URI) {\n\t\t\t\treturn uriTransformer.transformOutgoingURI(obj);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t\tthis._onExecuteCommand.fire({\n\t\t\treqId,\n\t\t\tpersistentProcessId,\n\t\t\tcommandId,\n\t\t\tcommandArgs: serializedCommandArgs,\n\t\t});\n\n\t\treturn promise;\n\t}\n\n\tprivate _sendCommandResult(\n\t\treqId: number,\n\t\tisError: boolean,\n\t\tserializedPayload: any,\n\t): void {\n\t\tconst data = this._pendingCommands.get(reqId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingCommands.delete(reqId);\n\t\tconst payload = cloneAndChange(serializedPayload, (obj) => {\n\t\t\tif (obj && obj.$mid === 1) {\n\t\t\t\t// this is UriComponents\n\t\t\t\treturn data.uriTransformer.transformIncoming(obj);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t\tif (isError) {\n\t\t\tdata.reject(payload);\n\t\t} else {\n\t\t\tdata.resolve(payload);\n\t\t}\n\t}\n\n\tprivate _getDefaultSystemShell(\n\t\tosOverride?: platform.OperatingSystem,\n\t): Promise<string> {\n\t\treturn this._ptyHostService.getDefaultSystemShell(osOverride);\n\t}\n\n\tprivate async _getProfiles(\n\t\tworkspaceId: string,\n\t\tprofiles: unknown,\n\t\tdefaultProfile: unknown,\n\t\tincludeDetectedProfiles?: boolean,\n\t): Promise<ITerminalProfile[]> {\n\t\treturn (\n\t\t\tthis._ptyHostService.getProfiles(\n\t\t\t\tworkspaceId,\n\t\t\t\tprofiles,\n\t\t\t\tdefaultProfile,\n\t\t\t\tincludeDetectedProfiles,\n\t\t\t) || []\n\t\t);\n\t}\n\n\tprivate _getEnvironment(): platform.IProcessEnvironment {\n\t\treturn { ...process.env };\n\t}\n\n\tprivate _getWslPath(\n\t\toriginal: string,\n\t\tdirection: \"unix-to-win\" | \"win-to-unix\",\n\t): Promise<string> {\n\t\treturn this._ptyHostService.getWslPath(original, direction);\n\t}\n\n\tprivate _reduceConnectionGraceTime(): Promise<void> {\n\t\treturn this._ptyHostService.reduceConnectionGraceTime();\n\t}\n}\n"],
  "mappings": "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",
  "names": ["args"]
}
