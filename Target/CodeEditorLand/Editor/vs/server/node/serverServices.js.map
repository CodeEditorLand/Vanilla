{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/serverServices.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from 'os';\nimport { Emitter, Event } from '../../base/common/event.js';\nimport { DisposableStore, toDisposable } from '../../base/common/lifecycle.js';\nimport { Schemas } from '../../base/common/network.js';\nimport * as path from '../../base/common/path.js';\nimport { IURITransformer } from '../../base/common/uriIpc.js';\nimport { getMachineId, getSqmMachineId, getdevDeviceId } from '../../base/node/id.js';\nimport { Promises } from '../../base/node/pfs.js';\nimport { ClientConnectionEvent, IMessagePassingProtocol, IPCServer, StaticRouter } from '../../base/parts/ipc/common/ipc.js';\nimport { ProtocolConstants } from '../../base/parts/ipc/common/ipc.net.js';\nimport { IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { ConfigurationService } from '../../platform/configuration/common/configurationService.js';\nimport { ExtensionHostDebugBroadcastChannel } from '../../platform/debug/common/extensionHostDebugIpc.js';\nimport { IDownloadService } from '../../platform/download/common/download.js';\nimport { DownloadServiceChannelClient } from '../../platform/download/common/downloadIpc.js';\nimport { IEnvironmentService, INativeEnvironmentService } from '../../platform/environment/common/environment.js';\nimport { ExtensionGalleryServiceWithNoStorageService } from '../../platform/extensionManagement/common/extensionGalleryService.js';\nimport { IExtensionGalleryService } from '../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from '../../platform/extensionManagement/node/extensionSignatureVerificationService.js';\nimport { ExtensionManagementCLI } from '../../platform/extensionManagement/common/extensionManagementCLI.js';\nimport { ExtensionManagementChannel } from '../../platform/extensionManagement/common/extensionManagementIpc.js';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from '../../platform/extensionManagement/node/extensionManagementService.js';\nimport { IFileService } from '../../platform/files/common/files.js';\nimport { FileService } from '../../platform/files/common/fileService.js';\nimport { DiskFileSystemProvider } from '../../platform/files/node/diskFileSystemProvider.js';\nimport { SyncDescriptor } from '../../platform/instantiation/common/descriptors.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { InstantiationService } from '../../platform/instantiation/common/instantiationService.js';\nimport { ServiceCollection } from '../../platform/instantiation/common/serviceCollection.js';\nimport { ILanguagePackService } from '../../platform/languagePacks/common/languagePacks.js';\nimport { NativeLanguagePackService } from '../../platform/languagePacks/node/languagePacks.js';\nimport { AbstractLogger, DEFAULT_LOG_LEVEL, getLogLevel, ILoggerService, ILogService, log, LogLevel, LogLevelToString } from '../../platform/log/common/log.js';\nimport product from '../../platform/product/common/product.js';\nimport { IProductService } from '../../platform/product/common/productService.js';\nimport { RemoteAgentConnectionContext } from '../../platform/remote/common/remoteAgentEnvironment.js';\nimport { IRequestService } from '../../platform/request/common/request.js';\nimport { RequestChannel } from '../../platform/request/common/requestIpc.js';\nimport { RequestService } from '../../platform/request/node/requestService.js';\nimport { resolveCommonProperties } from '../../platform/telemetry/common/commonProperties.js';\nimport { ITelemetryService, TelemetryLevel } from '../../platform/telemetry/common/telemetry.js';\nimport { ITelemetryServiceConfig } from '../../platform/telemetry/common/telemetryService.js';\nimport { getPiiPathsFromEnvironment, isInternalTelemetry, isLoggingOnly, ITelemetryAppender, NullAppender, supportsTelemetry } from '../../platform/telemetry/common/telemetryUtils.js';\nimport ErrorTelemetry from '../../platform/telemetry/node/errorTelemetry.js';\nimport { IPtyService, TerminalSettingId } from '../../platform/terminal/common/terminal.js';\nimport { PtyHostService } from '../../platform/terminal/node/ptyHostService.js';\nimport { IUriIdentityService } from '../../platform/uriIdentity/common/uriIdentity.js';\nimport { UriIdentityService } from '../../platform/uriIdentity/common/uriIdentityService.js';\nimport { RemoteAgentEnvironmentChannel } from './remoteAgentEnvironmentImpl.js';\nimport { RemoteAgentFileSystemProviderChannel } from './remoteFileSystemProviderServer.js';\nimport { ServerTelemetryChannel } from '../../platform/telemetry/common/remoteTelemetryChannel.js';\nimport { IServerTelemetryService, ServerNullTelemetryService, ServerTelemetryService } from '../../platform/telemetry/common/serverTelemetryService.js';\nimport { RemoteTerminalChannel } from './remoteTerminalChannel.js';\nimport { createURITransformer } from '../../workbench/api/node/uriTransformer.js';\nimport { ServerConnectionToken } from './serverConnectionToken.js';\nimport { ServerEnvironmentService, ServerParsedArgs } from './serverEnvironmentService.js';\nimport { REMOTE_TERMINAL_CHANNEL_NAME } from '../../workbench/contrib/terminal/common/remote/remoteTerminalChannel.js';\nimport { REMOTE_FILE_SYSTEM_CHANNEL_NAME } from '../../workbench/services/remote/common/remoteFileSystemProviderClient.js';\nimport { ExtensionHostStatusService, IExtensionHostStatusService } from './extensionHostStatusService.js';\nimport { IExtensionsScannerService } from '../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { ExtensionsScannerService } from './extensionsScannerService.js';\nimport { IExtensionsProfileScannerService } from '../../platform/extensionManagement/common/extensionsProfileScannerService.js';\nimport { IUserDataProfilesService } from '../../platform/userDataProfile/common/userDataProfile.js';\nimport { NullPolicyService } from '../../platform/policy/common/policy.js';\nimport { OneDataSystemAppender } from '../../platform/telemetry/node/1dsAppender.js';\nimport { LoggerService } from '../../platform/log/node/loggerService.js';\nimport { ServerUserDataProfilesService } from '../../platform/userDataProfile/node/userDataProfile.js';\nimport { ExtensionsProfileScannerService } from '../../platform/extensionManagement/node/extensionsProfileScannerService.js';\nimport { LogService } from '../../platform/log/common/logService.js';\nimport { LoggerChannel } from '../../platform/log/common/logIpc.js';\nimport { localize } from '../../nls.js';\nimport { RemoteExtensionsScannerChannel, RemoteExtensionsScannerService } from './remoteExtensionsScanner.js';\nimport { RemoteExtensionsScannerChannelName } from '../../platform/remote/common/remoteExtensionsScanner.js';\nimport { RemoteUserDataProfilesServiceChannel } from '../../platform/userDataProfile/common/userDataProfileIpc.js';\nimport { NodePtyHostStarter } from '../../platform/terminal/node/nodePtyHostStarter.js';\nimport { CSSDevelopmentService, ICSSDevelopmentService } from '../../platform/cssDev/node/cssDevService.js';\n\nconst eventPrefix = 'monacoworkbench';\n\nexport async function setupServerServices(connectionToken: ServerConnectionToken, args: ServerParsedArgs, REMOTE_DATA_FOLDER: string, disposables: DisposableStore) {\n\tconst services = new ServiceCollection();\n\tconst socketServer = new SocketServer<RemoteAgentConnectionContext>();\n\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\tservices.set(IProductService, productService);\n\n\tconst environmentService = new ServerEnvironmentService(args, productService);\n\tservices.set(IEnvironmentService, environmentService);\n\tservices.set(INativeEnvironmentService, environmentService);\n\n\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\tservices.set(ILoggerService, loggerService);\n\tsocketServer.registerChannel('logger', new LoggerChannel(loggerService, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority)));\n\n\tconst logger = loggerService.createLogger('remoteagent', { name: localize('remoteExtensionLog', \"Server\") });\n\tconst logService = new LogService(logger, [new ServerLogger(getLogLevel(environmentService))]);\n\tservices.set(ILogService, logService);\n\tsetTimeout(() => cleanupOlderLogs(environmentService.logsHome.with({ scheme: Schemas.file }).fsPath).then(null, err => logService.error(err)), 10000);\n\tlogService.onDidChangeLogLevel(logLevel => log(logService, logLevel, `Log level changed to ${LogLevelToString(logService.getLevel())}`));\n\n\tlogService.trace(`Remote configuration data at ${REMOTE_DATA_FOLDER}`);\n\tlogService.trace('process arguments:', environmentService.args);\n\tif (Array.isArray(productService.serverGreeting)) {\n\t\tlogService.info(`\\n\\n${productService.serverGreeting.join('\\n')}\\n\\n`);\n\t}\n\n\t// ExtensionHost Debug broadcast service\n\tsocketServer.registerChannel(ExtensionHostDebugBroadcastChannel.ChannelName, new ExtensionHostDebugBroadcastChannel());\n\n\t// TODO: @Sandy @Joao need dynamic context based router\n\tconst router = new StaticRouter<RemoteAgentConnectionContext>(ctx => ctx.clientId === 'renderer');\n\n\t// Files\n\tconst fileService = disposables.add(new FileService(logService));\n\tservices.set(IFileService, fileService);\n\tfileService.registerProvider(Schemas.file, disposables.add(new DiskFileSystemProvider(logService)));\n\n\t// URI Identity\n\tconst uriIdentityService = new UriIdentityService(fileService);\n\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t// Configuration\n\tconst configurationService = new ConfigurationService(environmentService.machineSettingsResource, fileService, new NullPolicyService(), logService);\n\tservices.set(IConfigurationService, configurationService);\n\n\t// User Data Profiles\n\tconst userDataProfilesService = new ServerUserDataProfilesService(uriIdentityService, environmentService, fileService, logService);\n\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\tsocketServer.registerChannel('userDataProfiles', new RemoteUserDataProfilesServiceChannel(userDataProfilesService, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority)));\n\n\t// Dev Only: CSS service (for ESM)\n\tservices.set(ICSSDevelopmentService, new SyncDescriptor(CSSDevelopmentService, undefined, true));\n\n\t// Initialize\n\tconst [, , machineId, sqmId, devDeviceId] = await Promise.all([\n\t\tconfigurationService.initialize(),\n\t\tuserDataProfilesService.init(),\n\t\tgetMachineId(logService.error.bind(logService)),\n\t\tgetSqmMachineId(logService.error.bind(logService)),\n\t\tgetdevDeviceId(logService.error.bind(logService))\n\t]);\n\n\tconst extensionHostStatusService = new ExtensionHostStatusService();\n\tservices.set(IExtensionHostStatusService, extensionHostStatusService);\n\n\t// Request\n\tconst requestService = new RequestService(configurationService, environmentService, logService);\n\tservices.set(IRequestService, requestService);\n\n\tlet oneDsAppender: ITelemetryAppender = NullAppender;\n\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\tif (supportsTelemetry(productService, environmentService)) {\n\t\tif (!isLoggingOnly(productService, environmentService) && productService.aiConfig?.ariaKey) {\n\t\t\toneDsAppender = new OneDataSystemAppender(requestService, isInternal, eventPrefix, null, productService.aiConfig.ariaKey);\n\t\t\tdisposables.add(toDisposable(() => oneDsAppender?.flush())); // Ensure the AI appender is disposed so that it flushes remaining data\n\t\t}\n\n\t\tconst config: ITelemetryServiceConfig = {\n\t\t\tappenders: [oneDsAppender],\n\t\t\tcommonProperties: resolveCommonProperties(release(), hostname(), process.arch, productService.commit, productService.version + '-remote', machineId, sqmId, devDeviceId, isInternal, 'remoteAgent'),\n\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService)\n\t\t};\n\t\tconst initialTelemetryLevelArg = environmentService.args['telemetry-level'];\n\t\tlet injectedTelemetryLevel: TelemetryLevel = TelemetryLevel.USAGE;\n\t\t// Convert the passed in CLI argument into a telemetry level for the telemetry service\n\t\tif (initialTelemetryLevelArg === 'all') {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.USAGE;\n\t\t} else if (initialTelemetryLevelArg === 'error') {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.ERROR;\n\t\t} else if (initialTelemetryLevelArg === 'crash') {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.CRASH;\n\t\t} else if (initialTelemetryLevelArg !== undefined) {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.NONE;\n\t\t}\n\t\tservices.set(IServerTelemetryService, new SyncDescriptor(ServerTelemetryService, [config, injectedTelemetryLevel]));\n\t} else {\n\t\tservices.set(IServerTelemetryService, ServerNullTelemetryService);\n\t}\n\n\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryServiceWithNoStorageService));\n\n\tconst downloadChannel = socketServer.getChannel('download', router);\n\tservices.set(IDownloadService, new DownloadServiceChannelClient(downloadChannel, () => getUriTransformer('renderer') /* TODO: @Sandy @Joao need dynamic context based router */));\n\n\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService));\n\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService));\n\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService));\n\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService));\n\n\tconst instantiationService: IInstantiationService = new InstantiationService(services);\n\tservices.set(ILanguagePackService, instantiationService.createInstance(NativeLanguagePackService));\n\n\tconst ptyHostStarter = instantiationService.createInstance(\n\t\tNodePtyHostStarter,\n\t\t{\n\t\t\tgraceTime: ProtocolConstants.ReconnectionGraceTime,\n\t\t\tshortGraceTime: ProtocolConstants.ReconnectionShortGraceTime,\n\t\t\tscrollback: configurationService.getValue<number>(TerminalSettingId.PersistentSessionScrollback) ?? 100\n\t\t}\n\t);\n\tconst ptyHostService = instantiationService.createInstance(PtyHostService, ptyHostStarter);\n\tservices.set(IPtyService, ptyHostService);\n\n\tinstantiationService.invokeFunction(accessor => {\n\t\tconst extensionManagementService = accessor.get(INativeServerExtensionManagementService);\n\t\tconst extensionsScannerService = accessor.get(IExtensionsScannerService);\n\t\tconst extensionGalleryService = accessor.get(IExtensionGalleryService);\n\t\tconst languagePackService = accessor.get(ILanguagePackService);\n\t\tconst remoteExtensionEnvironmentChannel = new RemoteAgentEnvironmentChannel(connectionToken, environmentService, userDataProfilesService, extensionHostStatusService);\n\t\tsocketServer.registerChannel('remoteextensionsenvironment', remoteExtensionEnvironmentChannel);\n\n\t\tconst telemetryChannel = new ServerTelemetryChannel(accessor.get(IServerTelemetryService), oneDsAppender);\n\t\tsocketServer.registerChannel('telemetry', telemetryChannel);\n\n\t\tsocketServer.registerChannel(REMOTE_TERMINAL_CHANNEL_NAME, new RemoteTerminalChannel(environmentService, logService, ptyHostService, productService, extensionManagementService, configurationService));\n\n\t\tconst remoteExtensionsScanner = new RemoteExtensionsScannerService(instantiationService.createInstance(ExtensionManagementCLI, logService), environmentService, userDataProfilesService, extensionsScannerService, logService, extensionGalleryService, languagePackService);\n\t\tsocketServer.registerChannel(RemoteExtensionsScannerChannelName, new RemoteExtensionsScannerChannel(remoteExtensionsScanner, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority)));\n\n\t\tconst remoteFileSystemChannel = disposables.add(new RemoteAgentFileSystemProviderChannel(logService, environmentService, configurationService));\n\t\tsocketServer.registerChannel(REMOTE_FILE_SYSTEM_CHANNEL_NAME, remoteFileSystemChannel);\n\n\t\tsocketServer.registerChannel('request', new RequestChannel(accessor.get(IRequestService)));\n\n\t\tconst channel = new ExtensionManagementChannel(extensionManagementService, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority));\n\t\tsocketServer.registerChannel('extensions', channel);\n\n\t\t// clean up extensions folder\n\t\tremoteExtensionsScanner.whenExtensionsReady().then(() => extensionManagementService.cleanUp());\n\n\t\tdisposables.add(new ErrorTelemetry(accessor.get(ITelemetryService)));\n\n\t\treturn {\n\t\t\ttelemetryService: accessor.get(ITelemetryService)\n\t\t};\n\t});\n\n\treturn { socketServer, instantiationService };\n}\n\nconst _uriTransformerCache: { [remoteAuthority: string]: IURITransformer } = Object.create(null);\n\nfunction getUriTransformer(remoteAuthority: string): IURITransformer {\n\tif (!_uriTransformerCache[remoteAuthority]) {\n\t\t_uriTransformerCache[remoteAuthority] = createURITransformer(remoteAuthority);\n\t}\n\treturn _uriTransformerCache[remoteAuthority];\n}\n\nexport class SocketServer<TContext = string> extends IPCServer<TContext> {\n\n\tprivate _onDidConnectEmitter: Emitter<ClientConnectionEvent>;\n\n\tconstructor() {\n\t\tconst emitter = new Emitter<ClientConnectionEvent>();\n\t\tsuper(emitter.event);\n\t\tthis._onDidConnectEmitter = emitter;\n\t}\n\n\tpublic acceptConnection(protocol: IMessagePassingProtocol, onDidClientDisconnect: Event<void>): void {\n\t\tthis._onDidConnectEmitter.fire({ protocol, onDidClientDisconnect });\n\t}\n}\n\nclass ServerLogger extends AbstractLogger {\n\tprivate useColors: boolean;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t\tthis.useColors = Boolean(process.stdout.isTTY);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.warn(`\\x1b[93m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.error(`\\x1b[91m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.error(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tflush(): void {\n\t\t// noop\n\t}\n}\n\nfunction now(): string {\n\tconst date = new Date();\n\treturn `${twodigits(date.getHours())}:${twodigits(date.getMinutes())}:${twodigits(date.getSeconds())}`;\n}\n\nfunction twodigits(n: number): string {\n\tif (n < 10) {\n\t\treturn `0${n}`;\n\t}\n\treturn String(n);\n}\n\n/**\n * Cleans up older logs, while keeping the 10 most recent ones.\n */\nasync function cleanupOlderLogs(logsPath: string): Promise<void> {\n\tconst currentLog = path.basename(logsPath);\n\tconst logsRoot = path.dirname(logsPath);\n\tconst children = await Promises.readdir(logsRoot);\n\tconst allSessions = children.filter(name => /^\\d{8}T\\d{6}$/.test(name));\n\tconst oldSessions = allSessions.sort().filter((d) => d !== currentLog);\n\tconst toDelete = oldSessions.slice(0, Math.max(0, oldSessions.length - 9));\n\n\tawait Promise.all(toDelete.map(name => Promises.rm(path.join(logsRoot, name))));\n}\n"],
  "mappings": "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",
  "names": []
}
