{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteFileSystemProviderServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from '../../base/common/event.js';\nimport { URI, UriComponents } from '../../base/common/uri.js';\nimport { IURITransformer } from '../../base/common/uriIpc.js';\nimport { IFileChange } from '../../platform/files/common/files.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { createURITransformer } from '../../workbench/api/node/uriTransformer.js';\nimport { RemoteAgentConnectionContext } from '../../platform/remote/common/remoteAgentEnvironment.js';\nimport { DiskFileSystemProvider } from '../../platform/files/node/diskFileSystemProvider.js';\nimport { posix, delimiter } from '../../base/common/path.js';\nimport { IServerEnvironmentService } from './serverEnvironmentService.js';\nimport { AbstractDiskFileSystemProviderChannel, AbstractSessionFileWatcher, ISessionFileWatcher } from '../../platform/files/node/diskFileSystemProviderServer.js';\nimport { IRecursiveWatcherOptions } from '../../platform/files/common/watcher.js';\n\nexport class RemoteAgentFileSystemProviderChannel extends AbstractDiskFileSystemProviderChannel<RemoteAgentConnectionContext> {\n\n\tprivate readonly uriTransformerCache = new Map<string, IURITransformer>();\n\n\tconstructor(\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IServerEnvironmentService\n\t) {\n\t\tsuper(new DiskFileSystemProvider(logService), logService);\n\n\t\tthis._register(this.provider);\n\t}\n\n\tprotected override getUriTransformer(ctx: RemoteAgentConnectionContext): IURITransformer {\n\t\tlet transformer = this.uriTransformerCache.get(ctx.remoteAuthority);\n\t\tif (!transformer) {\n\t\t\ttransformer = createURITransformer(ctx.remoteAuthority);\n\t\t\tthis.uriTransformerCache.set(ctx.remoteAuthority, transformer);\n\t\t}\n\n\t\treturn transformer;\n\t}\n\n\tprotected override transformIncoming(uriTransformer: IURITransformer, _resource: UriComponents, supportVSCodeResource = false): URI {\n\t\tif (supportVSCodeResource && _resource.path === '/vscode-resource' && _resource.query) {\n\t\t\tconst requestResourcePath = JSON.parse(_resource.query).requestResourcePath;\n\n\t\t\treturn URI.from({ scheme: 'file', path: requestResourcePath });\n\t\t}\n\n\t\treturn URI.revive(uriTransformer.transformIncoming(_resource));\n\t}\n\n\t//#region File Watching\n\n\tprotected createSessionFileWatcher(uriTransformer: IURITransformer, emitter: Emitter<IFileChange[] | string>): ISessionFileWatcher {\n\t\treturn new SessionFileWatcher(uriTransformer, emitter, this.logService, this.environmentService);\n\t}\n\n\t//#endregion\n}\n\nclass SessionFileWatcher extends AbstractSessionFileWatcher {\n\n\tconstructor(\n\t\turiTransformer: IURITransformer,\n\t\tsessionEmitter: Emitter<IFileChange[] | string>,\n\t\tlogService: ILogService,\n\t\tenvironmentService: IServerEnvironmentService\n\t) {\n\t\tsuper(uriTransformer, sessionEmitter, logService, environmentService);\n\t}\n\n\tprotected override getRecursiveWatcherOptions(environmentService: IServerEnvironmentService): IRecursiveWatcherOptions | undefined {\n\t\tconst fileWatcherPolling = environmentService.args['file-watcher-polling'];\n\t\tif (fileWatcherPolling) {\n\t\t\tconst segments = fileWatcherPolling.split(delimiter);\n\t\t\tconst pollingInterval = Number(segments[0]);\n\t\t\tif (pollingInterval > 0) {\n\t\t\t\tconst usePolling = segments.length > 1 ? segments.slice(1) : true;\n\t\t\t\treturn { usePolling, pollingInterval };\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected override getExtraExcludes(environmentService: IServerEnvironmentService): string[] | undefined {\n\t\tif (environmentService.extensionsPath) {\n\t\t\t// when opening the $HOME folder, we end up watching the extension folder\n\t\t\t// so simply exclude watching the extensions folder\n\t\t\treturn [posix.join(environmentService.extensionsPath, '**')];\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": ";;AAKA,SAAS,eAAe;AACxB,SAAS,KAAK,qBAAqB;AACnC,SAAS,uBAAuB;AAChC,SAAS,mBAAmB;AAC5B,SAAS,mBAAmB;AAC5B,SAAS,4BAA4B;AACrC,SAAS,oCAAoC;AAC7C,SAAS,8BAA8B;AACvC,SAAS,OAAO,iBAAiB;AACjC,SAAS,iCAAiC;AAC1C,SAAS,uCAAuC,4BAA4B,2BAA2B;AACvG,SAAS,gCAAgC;AAElC,MAAM,6CAA6C,sCAAoE;AAAA,EAI7H,YACC,YACiB,oBAChB;AACD,UAAM,IAAI,uBAAuB,UAAU,GAAG,UAAU;AAFvC;AAIjB,SAAK,UAAU,KAAK,QAAQ;AAAA,EAC7B;AAAA,EA7BD,OAkB8H;AAAA;AAAA;AAAA,EAE5G,sBAAsB,oBAAI,IAA6B;AAAA,EAWrD,kBAAkB,KAAoD;AACxF,QAAI,cAAc,KAAK,oBAAoB,IAAI,IAAI,eAAe;AAClE,QAAI,CAAC,aAAa;AACjB,oBAAc,qBAAqB,IAAI,eAAe;AACtD,WAAK,oBAAoB,IAAI,IAAI,iBAAiB,WAAW;AAAA,IAC9D;AAEA,WAAO;AAAA,EACR;AAAA,EAEmB,kBAAkB,gBAAiC,WAA0B,wBAAwB,OAAY;AACnI,QAAI,yBAAyB,UAAU,SAAS,sBAAsB,UAAU,OAAO;AACtF,YAAM,sBAAsB,KAAK,MAAM,UAAU,KAAK,EAAE;AAExD,aAAO,IAAI,KAAK,EAAE,QAAQ,QAAQ,MAAM,oBAAoB,CAAC;AAAA,IAC9D;AAEA,WAAO,IAAI,OAAO,eAAe,kBAAkB,SAAS,CAAC;AAAA,EAC9D;AAAA;AAAA,EAIU,yBAAyB,gBAAiC,SAA+D;AAClI,WAAO,IAAI,mBAAmB,gBAAgB,SAAS,KAAK,YAAY,KAAK,kBAAkB;AAAA,EAChG;AAAA;AAGD;AAEA,MAAM,2BAA2B,2BAA2B;AAAA,EA5D5D,OA4D4D;AAAA;AAAA;AAAA,EAE3D,YACC,gBACA,gBACA,YACA,oBACC;AACD,UAAM,gBAAgB,gBAAgB,YAAY,kBAAkB;AAAA,EACrE;AAAA,EAEmB,2BAA2B,oBAAqF;AAClI,UAAM,qBAAqB,mBAAmB,KAAK,sBAAsB;AACzE,QAAI,oBAAoB;AACvB,YAAM,WAAW,mBAAmB,MAAM,SAAS;AACnD,YAAM,kBAAkB,OAAO,SAAS,CAAC,CAAC;AAC1C,UAAI,kBAAkB,GAAG;AACxB,cAAM,aAAa,SAAS,SAAS,IAAI,SAAS,MAAM,CAAC,IAAI;AAC7D,eAAO,EAAE,YAAY,gBAAgB;AAAA,MACtC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEmB,iBAAiB,oBAAqE;AACxG,QAAI,mBAAmB,gBAAgB;AAGtC,aAAO,CAAC,MAAM,KAAK,mBAAmB,gBAAgB,IAAI,CAAC;AAAA,IAC5D;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
