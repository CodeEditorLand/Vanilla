{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteFileSystemProviderServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Emitter } from \"../../base/common/event.js\";\nimport { delimiter, posix } from \"../../base/common/path.js\";\nimport { URI, type UriComponents } from \"../../base/common/uri.js\";\nimport type { IURITransformer } from \"../../base/common/uriIpc.js\";\nimport type { IFileChange } from \"../../platform/files/common/files.js\";\nimport type { IRecursiveWatcherOptions } from \"../../platform/files/common/watcher.js\";\nimport { DiskFileSystemProvider } from \"../../platform/files/node/diskFileSystemProvider.js\";\nimport {\n\tAbstractDiskFileSystemProviderChannel,\n\tAbstractSessionFileWatcher,\n\ttype ISessionFileWatcher,\n} from \"../../platform/files/node/diskFileSystemProviderServer.js\";\nimport type { ILogService } from \"../../platform/log/common/log.js\";\nimport type { RemoteAgentConnectionContext } from \"../../platform/remote/common/remoteAgentEnvironment.js\";\nimport { createURITransformer } from \"../../workbench/api/node/uriTransformer.js\";\nimport type { IServerEnvironmentService } from \"./serverEnvironmentService.js\";\n\nexport class RemoteAgentFileSystemProviderChannel extends AbstractDiskFileSystemProviderChannel<RemoteAgentConnectionContext> {\n\tprivate readonly uriTransformerCache = new Map<string, IURITransformer>();\n\n\tconstructor(\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IServerEnvironmentService,\n\t) {\n\t\tsuper(new DiskFileSystemProvider(logService), logService);\n\n\t\tthis._register(this.provider);\n\t}\n\n\tprotected override getUriTransformer(\n\t\tctx: RemoteAgentConnectionContext,\n\t): IURITransformer {\n\t\tlet transformer = this.uriTransformerCache.get(ctx.remoteAuthority);\n\t\tif (!transformer) {\n\t\t\ttransformer = createURITransformer(ctx.remoteAuthority);\n\t\t\tthis.uriTransformerCache.set(ctx.remoteAuthority, transformer);\n\t\t}\n\n\t\treturn transformer;\n\t}\n\n\tprotected override transformIncoming(\n\t\turiTransformer: IURITransformer,\n\t\t_resource: UriComponents,\n\t\tsupportVSCodeResource = false,\n\t): URI {\n\t\tif (\n\t\t\tsupportVSCodeResource &&\n\t\t\t_resource.path === \"/vscode-resource\" &&\n\t\t\t_resource.query\n\t\t) {\n\t\t\tconst requestResourcePath = JSON.parse(\n\t\t\t\t_resource.query,\n\t\t\t).requestResourcePath;\n\n\t\t\treturn URI.from({ scheme: \"file\", path: requestResourcePath });\n\t\t}\n\n\t\treturn URI.revive(uriTransformer.transformIncoming(_resource));\n\t}\n\n\t//#region File Watching\n\n\tprotected createSessionFileWatcher(\n\t\turiTransformer: IURITransformer,\n\t\temitter: Emitter<IFileChange[] | string>,\n\t): ISessionFileWatcher {\n\t\treturn new SessionFileWatcher(\n\t\t\turiTransformer,\n\t\t\temitter,\n\t\t\tthis.logService,\n\t\t\tthis.environmentService,\n\t\t);\n\t}\n\n\t//#endregion\n}\n\nclass SessionFileWatcher extends AbstractSessionFileWatcher {\n\tconstructor(\n\t\turiTransformer: IURITransformer,\n\t\tsessionEmitter: Emitter<IFileChange[] | string>,\n\t\tlogService: ILogService,\n\t\tenvironmentService: IServerEnvironmentService,\n\t) {\n\t\tsuper(uriTransformer, sessionEmitter, logService, environmentService);\n\t}\n\n\tprotected override getRecursiveWatcherOptions(\n\t\tenvironmentService: IServerEnvironmentService,\n\t): IRecursiveWatcherOptions | undefined {\n\t\tconst fileWatcherPolling =\n\t\t\tenvironmentService.args[\"file-watcher-polling\"];\n\t\tif (fileWatcherPolling) {\n\t\t\tconst segments = fileWatcherPolling.split(delimiter);\n\t\t\tconst pollingInterval = Number(segments[0]);\n\t\t\tif (pollingInterval > 0) {\n\t\t\t\tconst usePolling =\n\t\t\t\t\tsegments.length > 1 ? segments.slice(1) : true;\n\t\t\t\treturn { usePolling, pollingInterval };\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected override getExtraExcludes(\n\t\tenvironmentService: IServerEnvironmentService,\n\t): string[] | undefined {\n\t\tif (environmentService.extensionsPath) {\n\t\t\t// when opening the $HOME folder, we end up watching the extension folder\n\t\t\t// so simply exclude watching the extensions folder\n\t\t\treturn [posix.join(environmentService.extensionsPath, \"**\")];\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"],
  "mappings": ";;AAMA,SAAS,WAAW,aAAa;AACjC,SAAS,WAA+B;AAIxC,SAAS,8BAA8B;AACvC;AAAA,EACC;AAAA,EACA;AAAA,OAEM;AAGP,SAAS,4BAA4B;AAG9B,MAAM,6CAA6C,sCAAoE;AAAA,EAG7H,YACC,YACiB,oBAChB;AACD,UAAM,IAAI,uBAAuB,UAAU,GAAG,UAAU;AAFvC;AAIjB,SAAK,UAAU,KAAK,QAAQ;AAAA,EAC7B;AAAA,EAhCD,OAsB8H;AAAA;AAAA;AAAA,EAC5G,sBAAsB,oBAAI,IAA6B;AAAA,EAWrD,kBAClB,KACkB;AAClB,QAAI,cAAc,KAAK,oBAAoB,IAAI,IAAI,eAAe;AAClE,QAAI,CAAC,aAAa;AACjB,oBAAc,qBAAqB,IAAI,eAAe;AACtD,WAAK,oBAAoB,IAAI,IAAI,iBAAiB,WAAW;AAAA,IAC9D;AAEA,WAAO;AAAA,EACR;AAAA,EAEmB,kBAClB,gBACA,WACA,wBAAwB,OAClB;AACN,QACC,yBACA,UAAU,SAAS,sBACnB,UAAU,OACT;AACD,YAAM,sBAAsB,KAAK;AAAA,QAChC,UAAU;AAAA,MACX,EAAE;AAEF,aAAO,IAAI,KAAK,EAAE,QAAQ,QAAQ,MAAM,oBAAoB,CAAC;AAAA,IAC9D;AAEA,WAAO,IAAI,OAAO,eAAe,kBAAkB,SAAS,CAAC;AAAA,EAC9D;AAAA;AAAA,EAIU,yBACT,gBACA,SACsB;AACtB,WAAO,IAAI;AAAA,MACV;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,IACN;AAAA,EACD;AAAA;AAGD;AAEA,MAAM,2BAA2B,2BAA2B;AAAA,EAnF5D,OAmF4D;AAAA;AAAA;AAAA,EAC3D,YACC,gBACA,gBACA,YACA,oBACC;AACD,UAAM,gBAAgB,gBAAgB,YAAY,kBAAkB;AAAA,EACrE;AAAA,EAEmB,2BAClB,oBACuC;AACvC,UAAM,qBACL,mBAAmB,KAAK,sBAAsB;AAC/C,QAAI,oBAAoB;AACvB,YAAM,WAAW,mBAAmB,MAAM,SAAS;AACnD,YAAM,kBAAkB,OAAO,SAAS,CAAC,CAAC;AAC1C,UAAI,kBAAkB,GAAG;AACxB,cAAM,aACL,SAAS,SAAS,IAAI,SAAS,MAAM,CAAC,IAAI;AAC3C,eAAO,EAAE,YAAY,gBAAgB;AAAA,MACtC;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAAA,EAEmB,iBAClB,oBACuB;AACvB,QAAI,mBAAmB,gBAAgB;AAGtC,aAAO,CAAC,MAAM,KAAK,mBAAmB,gBAAgB,IAAI,CAAC;AAAA,IAC5D;AAEA,WAAO;AAAA,EACR;AACD;",
  "names": []
}
