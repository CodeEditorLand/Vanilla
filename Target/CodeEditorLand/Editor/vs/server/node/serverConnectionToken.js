import*as u from"fs";import*as l from"cookie";import{connectionTokenCookieName as f,connectionTokenQueryName as p}from"../../base/common/network.js";import*as k from"../../base/common/path.js";import{generateUuid as d}from"../../base/common/uuid.js";import{Promises as m}from"../../base/node/pfs.js";const c=/^[0-9A-Za-z_-]+$/;var y=(e=>(e[e.None=0]="None",e[e.Optional=1]="Optional",e[e.Mandatory=2]="Mandatory",e))(y||{});class h{type=0;validate(o){return!0}}class s{constructor(o){this.value=o}type=2;validate(o){return o===this.value}}class a{constructor(o){this.message=o}}async function v(n,o){const r=n["without-connection-token"],e=n["connection-token"],t=n["connection-token-file"];if(r)return typeof e<"u"||typeof t<"u"?new a("Please do not use the argument '--connection-token' or '--connection-token-file' at the same time as '--without-connection-token'."):new h;if(typeof t<"u"){if(typeof e<"u")return new a("Please do not use the argument '--connection-token' at the same time as '--connection-token-file'.");let i;try{i=u.readFileSync(t).toString().replace(/\r?\n$/,"")}catch{return new a(`Unable to read the connection token file at '${t}'.`)}return c.test(i)?new s(i):new a(`The connection token defined in '${t} does not adhere to the characters 0-9, a-z, A-Z, _, or -.`)}return typeof e<"u"?c.test(e)?new s(e):new a(`The connection token '${e} does not adhere to the characters 0-9, a-z, A-Z or -.`):new s(await o())}async function g(n){return v(n,async()=>{if(!n["user-data-dir"])return d();const r=k.join(n["user-data-dir"],"token");try{const i=(await u.promises.readFile(r)).toString().replace(/\r?\n$/,"");if(c.test(i))return i}catch{}const e=d();try{await m.writeFile(r,e,{mode:384})}catch{}return e})}function P(n,o,r){if(n.validate(r.query[p]))return!0;const e=l.parse(o.headers.cookie||"");return n.validate(e[f])}export{s as MandatoryServerConnectionToken,h as NoneServerConnectionToken,a as ServerConnectionTokenParseError,y as ServerConnectionTokenType,g as determineServerConnectionToken,v as parseServerConnectionToken,P as requestHasValidConnectionToken};
