{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteExtensionHostAgentServer.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as crypto from 'crypto';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as net from 'net';\nimport { performance } from 'perf_hooks';\nimport * as url from 'url';\nimport { LoaderStats, isESM } from '../../base/common/amd.js';\nimport { VSBuffer } from '../../base/common/buffer.js';\nimport { CharCode } from '../../base/common/charCode.js';\nimport { isSigPipeError, onUnexpectedError, setUnexpectedErrorHandler } from '../../base/common/errors.js';\nimport { isEqualOrParent } from '../../base/common/extpath.js';\nimport { Disposable, DisposableStore } from '../../base/common/lifecycle.js';\nimport { connectionTokenQueryName, FileAccess, getServerRootPath, Schemas } from '../../base/common/network.js';\nimport { dirname, join } from '../../base/common/path.js';\nimport * as perf from '../../base/common/performance.js';\nimport * as platform from '../../base/common/platform.js';\nimport { createRegExp, escapeRegExpCharacters } from '../../base/common/strings.js';\nimport { URI } from '../../base/common/uri.js';\nimport { generateUuid } from '../../base/common/uuid.js';\nimport { getOSReleaseInfo } from '../../base/node/osReleaseInfo.js';\nimport { findFreePort } from '../../base/node/ports.js';\nimport { addUNCHostToAllowlist, disableUNCAccessRestrictions } from '../../base/node/unc.js';\nimport { PersistentProtocol } from '../../base/parts/ipc/common/ipc.net.js';\nimport { NodeSocket, WebSocketNodeSocket } from '../../base/parts/ipc/node/ipc.net.js';\nimport { IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { IInstantiationService } from '../../platform/instantiation/common/instantiation.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { IProductService } from '../../platform/product/common/productService.js';\nimport { ConnectionType, ConnectionTypeRequest, ErrorMessage, HandshakeMessage, IRemoteExtensionHostStartParams, ITunnelConnectionStartParams, SignRequest } from '../../platform/remote/common/remoteAgentConnection.js';\nimport { RemoteAgentConnectionContext } from '../../platform/remote/common/remoteAgentEnvironment.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { ExtensionHostConnection } from './extensionHostConnection.js';\nimport { ManagementConnection } from './remoteExtensionManagement.js';\nimport { determineServerConnectionToken, requestHasValidConnectionToken as httpRequestHasValidConnectionToken, ServerConnectionToken, ServerConnectionTokenParseError, ServerConnectionTokenType } from './serverConnectionToken.js';\nimport { IServerEnvironmentService, ServerParsedArgs } from './serverEnvironmentService.js';\nimport { setupServerServices, SocketServer } from './serverServices.js';\nimport { CacheControl, serveError, serveFile, WebClientServer } from './webClientServer.js';\n// ESM-uncomment-begin\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\n// ESM-uncomment-end\n\nconst SHUTDOWN_TIMEOUT = 5 * 60 * 1000;\n\ndeclare module vsda {\n\t// the signer is a native module that for historical reasons uses a lower case class name\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class signer {\n\t\tsign(arg: string): string;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\texport class validator {\n\t\tcreateNewMessage(arg: string): string;\n\t\tvalidate(arg: string): 'ok' | 'error';\n\t}\n}\n\nclass RemoteExtensionHostAgentServer extends Disposable implements IServerAPI {\n\n\tprivate readonly _extHostConnections: { [reconnectionToken: string]: ExtensionHostConnection };\n\tprivate readonly _managementConnections: { [reconnectionToken: string]: ManagementConnection };\n\tprivate readonly _allReconnectionTokens: Set<string>;\n\tprivate readonly _webClientServer: WebClientServer | null;\n\tprivate readonly _webEndpointOriginChecker = WebEndpointOriginChecker.create(this._productService);\n\n\tprivate readonly _serverRootPath: string;\n\n\tprivate shutdownTimer: NodeJS.Timeout | undefined;\n\n\tconstructor(\n\t\tprivate readonly _socketServer: SocketServer<RemoteAgentConnectionContext>,\n\t\tprivate readonly _connectionToken: ServerConnectionToken,\n\t\tprivate readonly _vsdaMod: typeof vsda | null,\n\t\thasWebClient: boolean,\n\t\tserverBasePath: string | undefined,\n\t\t@IServerEnvironmentService private readonly _environmentService: IServerEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._serverRootPath = getServerRootPath(_productService, serverBasePath);\n\t\tthis._extHostConnections = Object.create(null);\n\t\tthis._managementConnections = Object.create(null);\n\t\tthis._allReconnectionTokens = new Set<string>();\n\t\tthis._webClientServer = (\n\t\t\thasWebClient\n\t\t\t\t? this._instantiationService.createInstance(WebClientServer, this._connectionToken, serverBasePath ?? '/', this._serverRootPath)\n\t\t\t\t: null\n\t\t);\n\t\tthis._logService.info(`Extension host agent started.`);\n\n\t\tthis._waitThenShutdown(true);\n\t}\n\n\tpublic async handleRequest(req: http.IncomingMessage, res: http.ServerResponse): Promise<void> {\n\t\t// Only serve GET requests\n\t\tif (req.method !== 'GET') {\n\t\t\treturn serveError(req, res, 405, `Unsupported method ${req.method}`);\n\t\t}\n\n\t\tif (!req.url) {\n\t\t\treturn serveError(req, res, 400, `Bad request.`);\n\t\t}\n\n\t\tconst parsedUrl = url.parse(req.url, true);\n\t\tlet pathname = parsedUrl.pathname;\n\n\t\tif (!pathname) {\n\t\t\treturn serveError(req, res, 400, `Bad request.`);\n\t\t}\n\n\t\t// for now accept all paths, with or without server root path\n\t\tif (pathname.startsWith(this._serverRootPath) && pathname.charCodeAt(this._serverRootPath.length) === CharCode.Slash) {\n\t\t\tpathname = pathname.substring(this._serverRootPath.length);\n\t\t}\n\n\t\t// Version\n\t\tif (pathname === '/version') {\n\t\t\tres.writeHead(200, { 'Content-Type': 'text/plain' });\n\t\t\treturn void res.end(this._productService.commit || '');\n\t\t}\n\n\t\t// Delay shutdown\n\t\tif (pathname === '/delay-shutdown') {\n\t\t\tthis._delayShutdown();\n\t\t\tres.writeHead(200);\n\t\t\treturn void res.end('OK');\n\t\t}\n\n\t\tif (!httpRequestHasValidConnectionToken(this._connectionToken, req, parsedUrl)) {\n\t\t\t// invalid connection token\n\t\t\treturn serveError(req, res, 403, `Forbidden.`);\n\t\t}\n\n\t\tif (pathname === '/vscode-remote-resource') {\n\t\t\t// Handle HTTP requests for resources rendered in the rich client (images, fonts, etc.)\n\t\t\t// These resources could be files shipped with extensions or even workspace files.\n\t\t\tconst desiredPath = parsedUrl.query['path'];\n\t\t\tif (typeof desiredPath !== 'string') {\n\t\t\t\treturn serveError(req, res, 400, `Bad request.`);\n\t\t\t}\n\n\t\t\tlet filePath: string;\n\t\t\ttry {\n\t\t\t\tfilePath = URI.from({ scheme: Schemas.file, path: desiredPath }).fsPath;\n\t\t\t} catch (err) {\n\t\t\t\treturn serveError(req, res, 400, `Bad request.`);\n\t\t\t}\n\n\t\t\tconst responseHeaders: Record<string, string> = Object.create(null);\n\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\tif (isEqualOrParent(filePath, this._environmentService.builtinExtensionsPath, !platform.isLinux)\n\t\t\t\t\t|| isEqualOrParent(filePath, this._environmentService.extensionsPath, !platform.isLinux)\n\t\t\t\t) {\n\t\t\t\t\tresponseHeaders['Cache-Control'] = 'public, max-age=31536000';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Allow cross origin requests from the web worker extension host\n\t\t\tresponseHeaders['Vary'] = 'Origin';\n\t\t\tconst requestOrigin = req.headers['origin'];\n\t\t\tif (requestOrigin && this._webEndpointOriginChecker.matches(requestOrigin)) {\n\t\t\t\tresponseHeaders['Access-Control-Allow-Origin'] = requestOrigin;\n\t\t\t}\n\t\t\treturn serveFile(filePath, CacheControl.ETAG, this._logService, req, res, responseHeaders);\n\t\t}\n\n\t\t// workbench web UI\n\t\tif (this._webClientServer) {\n\t\t\tthis._webClientServer.handle(req, res, parsedUrl);\n\t\t\treturn;\n\t\t}\n\n\t\tres.writeHead(404, { 'Content-Type': 'text/plain' });\n\t\treturn void res.end('Not found');\n\t}\n\n\tpublic handleUpgrade(req: http.IncomingMessage, socket: net.Socket) {\n\t\tlet reconnectionToken = generateUuid();\n\t\tlet isReconnection = false;\n\t\tlet skipWebSocketFrames = false;\n\n\t\tif (req.url) {\n\t\t\tconst query = url.parse(req.url, true).query;\n\t\t\tif (typeof query.reconnectionToken === 'string') {\n\t\t\t\treconnectionToken = query.reconnectionToken;\n\t\t\t}\n\t\t\tif (query.reconnection === 'true') {\n\t\t\t\tisReconnection = true;\n\t\t\t}\n\t\t\tif (query.skipWebSocketFrames === 'true') {\n\t\t\t\tskipWebSocketFrames = true;\n\t\t\t}\n\t\t}\n\n\t\tif (req.headers['upgrade'] === undefined || req.headers['upgrade'].toLowerCase() !== 'websocket') {\n\t\t\tsocket.end('HTTP/1.1 400 Bad Request');\n\t\t\treturn;\n\t\t}\n\n\t\t// https://tools.ietf.org/html/rfc6455#section-4\n\t\tconst requestNonce = req.headers['sec-websocket-key'];\n\t\tconst hash = crypto.createHash('sha1');// CodeQL [SM04514] SHA1 must be used here to respect the WebSocket protocol specification\n\t\thash.update(requestNonce + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11');\n\t\tconst responseNonce = hash.digest('base64');\n\n\t\tconst responseHeaders = [\n\t\t\t`HTTP/1.1 101 Switching Protocols`,\n\t\t\t`Upgrade: websocket`,\n\t\t\t`Connection: Upgrade`,\n\t\t\t`Sec-WebSocket-Accept: ${responseNonce}`\n\t\t];\n\n\t\t// See https://tools.ietf.org/html/rfc7692#page-12\n\t\tlet permessageDeflate = false;\n\t\tif (!skipWebSocketFrames && !this._environmentService.args['disable-websocket-compression'] && req.headers['sec-websocket-extensions']) {\n\t\t\tconst websocketExtensionOptions = Array.isArray(req.headers['sec-websocket-extensions']) ? req.headers['sec-websocket-extensions'] : [req.headers['sec-websocket-extensions']];\n\t\t\tfor (const websocketExtensionOption of websocketExtensionOptions) {\n\t\t\t\tif (/\\b((server_max_window_bits)|(server_no_context_takeover)|(client_no_context_takeover))\\b/.test(websocketExtensionOption)) {\n\t\t\t\t\t// sorry, the server does not support zlib parameter tweaks\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (/\\b(permessage-deflate)\\b/.test(websocketExtensionOption)) {\n\t\t\t\t\tpermessageDeflate = true;\n\t\t\t\t\tresponseHeaders.push(`Sec-WebSocket-Extensions: permessage-deflate`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (/\\b(x-webkit-deflate-frame)\\b/.test(websocketExtensionOption)) {\n\t\t\t\t\tpermessageDeflate = true;\n\t\t\t\t\tresponseHeaders.push(`Sec-WebSocket-Extensions: x-webkit-deflate-frame`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsocket.write(responseHeaders.join('\\r\\n') + '\\r\\n\\r\\n');\n\n\t\t// Never timeout this socket due to inactivity!\n\t\tsocket.setTimeout(0);\n\t\t// Disable Nagle's algorithm\n\t\tsocket.setNoDelay(true);\n\t\t// Finally!\n\n\t\tif (skipWebSocketFrames) {\n\t\t\tthis._handleWebSocketConnection(new NodeSocket(socket, `server-connection-${reconnectionToken}`), isReconnection, reconnectionToken);\n\t\t} else {\n\t\t\tthis._handleWebSocketConnection(new WebSocketNodeSocket(new NodeSocket(socket, `server-connection-${reconnectionToken}`), permessageDeflate, null, true), isReconnection, reconnectionToken);\n\t\t}\n\t}\n\n\tpublic handleServerError(err: Error): void {\n\t\tthis._logService.error(`Error occurred in server`);\n\t\tthis._logService.error(err);\n\t}\n\n\t// Eventually cleanup\n\n\tprivate _getRemoteAddress(socket: NodeSocket | WebSocketNodeSocket): string {\n\t\tlet _socket: net.Socket;\n\t\tif (socket instanceof NodeSocket) {\n\t\t\t_socket = socket.socket;\n\t\t} else {\n\t\t\t_socket = socket.socket.socket;\n\t\t}\n\t\treturn _socket.remoteAddress || `<unknown>`;\n\t}\n\n\tprivate async _rejectWebSocketConnection(logPrefix: string, protocol: PersistentProtocol, reason: string): Promise<void> {\n\t\tconst socket = protocol.getSocket();\n\t\tthis._logService.error(`${logPrefix} ${reason}.`);\n\t\tconst errMessage: ErrorMessage = {\n\t\t\ttype: 'error',\n\t\t\treason: reason\n\t\t};\n\t\tprotocol.sendControl(VSBuffer.fromString(JSON.stringify(errMessage)));\n\t\tprotocol.dispose();\n\t\tawait socket.drain();\n\t\tsocket.dispose();\n\t}\n\n\t/**\n\t * NOTE: Avoid using await in this method!\n\t * The problem is that await introduces a process.nextTick due to the implicit Promise.then\n\t * This can lead to some bytes being received and interpreted and a control message being emitted before the next listener has a chance to be registered.\n\t */\n\tprivate _handleWebSocketConnection(socket: NodeSocket | WebSocketNodeSocket, isReconnection: boolean, reconnectionToken: string): void {\n\t\tconst remoteAddress = this._getRemoteAddress(socket);\n\t\tconst logPrefix = `[${remoteAddress}][${reconnectionToken.substr(0, 8)}]`;\n\t\tconst protocol = new PersistentProtocol({ socket });\n\n\t\tconst validator = this._vsdaMod ? new this._vsdaMod.validator() : null;\n\t\tconst signer = this._vsdaMod ? new this._vsdaMod.signer() : null;\n\n\t\tconst enum State {\n\t\t\tWaitingForAuth,\n\t\t\tWaitingForConnectionType,\n\t\t\tDone,\n\t\t\tError\n\t\t}\n\t\tlet state = State.WaitingForAuth;\n\n\t\tconst rejectWebSocketConnection = (msg: string) => {\n\t\t\tstate = State.Error;\n\t\t\tlistener.dispose();\n\t\t\tthis._rejectWebSocketConnection(logPrefix, protocol, msg);\n\t\t};\n\n\t\tconst listener = protocol.onControlMessage((raw) => {\n\t\t\tif (state === State.WaitingForAuth) {\n\t\t\t\tlet msg1: HandshakeMessage;\n\t\t\t\ttry {\n\t\t\t\t\tmsg1 = <HandshakeMessage>JSON.parse(raw.toString());\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn rejectWebSocketConnection(`Malformed first message`);\n\t\t\t\t}\n\t\t\t\tif (msg1.type !== 'auth') {\n\t\t\t\t\treturn rejectWebSocketConnection(`Invalid first message`);\n\t\t\t\t}\n\n\t\t\t\tif (this._connectionToken.type === ServerConnectionTokenType.Mandatory && !this._connectionToken.validate(msg1.auth)) {\n\t\t\t\t\treturn rejectWebSocketConnection(`Unauthorized client refused: auth mismatch`);\n\t\t\t\t}\n\n\t\t\t\t// Send `sign` request\n\t\t\t\tlet signedData = generateUuid();\n\t\t\t\tif (signer) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsignedData = signer.sign(msg1.data);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet someText = generateUuid();\n\t\t\t\tif (validator) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsomeText = validator.createNewMessage(someText);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst signRequest: SignRequest = {\n\t\t\t\t\ttype: 'sign',\n\t\t\t\t\tdata: someText,\n\t\t\t\t\tsignedData: signedData\n\t\t\t\t};\n\t\t\t\tprotocol.sendControl(VSBuffer.fromString(JSON.stringify(signRequest)));\n\n\t\t\t\tstate = State.WaitingForConnectionType;\n\n\t\t\t} else if (state === State.WaitingForConnectionType) {\n\n\t\t\t\tlet msg2: HandshakeMessage;\n\t\t\t\ttry {\n\t\t\t\t\tmsg2 = <HandshakeMessage>JSON.parse(raw.toString());\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn rejectWebSocketConnection(`Malformed second message`);\n\t\t\t\t}\n\t\t\t\tif (msg2.type !== 'connectionType') {\n\t\t\t\t\treturn rejectWebSocketConnection(`Invalid second message`);\n\t\t\t\t}\n\t\t\t\tif (typeof msg2.signedData !== 'string') {\n\t\t\t\t\treturn rejectWebSocketConnection(`Invalid second message field type`);\n\t\t\t\t}\n\n\t\t\t\tconst rendererCommit = msg2.commit;\n\t\t\t\tconst myCommit = this._productService.commit;\n\t\t\t\tif (rendererCommit && myCommit) {\n\t\t\t\t\t// Running in the built version where commits are defined\n\t\t\t\t\tif (rendererCommit !== myCommit) {\n\t\t\t\t\t\treturn rejectWebSocketConnection(`Client refused: version mismatch`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet valid = false;\n\t\t\t\tif (!validator) {\n\t\t\t\t\tvalid = true;\n\t\t\t\t} else if (this._connectionToken.validate(msg2.signedData)) {\n\t\t\t\t\t// web client\n\t\t\t\t\tvalid = true;\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvalid = validator.validate(msg2.signedData) === 'ok';\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!valid) {\n\t\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\t\treturn rejectWebSocketConnection(`Unauthorized client refused`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logService.error(`${logPrefix} Unauthorized client handshake failed but we proceed because of dev mode.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We have received a new connection.\n\t\t\t\t// This indicates that the server owner has connectivity.\n\t\t\t\t// Therefore we will shorten the reconnection grace period for disconnected connections!\n\t\t\t\tfor (const key in this._managementConnections) {\n\t\t\t\t\tconst managementConnection = this._managementConnections[key];\n\t\t\t\t\tmanagementConnection.shortenReconnectionGraceTimeIfNecessary();\n\t\t\t\t}\n\t\t\t\tfor (const key in this._extHostConnections) {\n\t\t\t\t\tconst extHostConnection = this._extHostConnections[key];\n\t\t\t\t\textHostConnection.shortenReconnectionGraceTimeIfNecessary();\n\t\t\t\t}\n\n\t\t\t\tstate = State.Done;\n\t\t\t\tlistener.dispose();\n\t\t\t\tthis._handleConnectionType(remoteAddress, logPrefix, protocol, socket, isReconnection, reconnectionToken, msg2);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _handleConnectionType(remoteAddress: string, _logPrefix: string, protocol: PersistentProtocol, socket: NodeSocket | WebSocketNodeSocket, isReconnection: boolean, reconnectionToken: string, msg: ConnectionTypeRequest): Promise<void> {\n\t\tconst logPrefix = (\n\t\t\tmsg.desiredConnectionType === ConnectionType.Management\n\t\t\t\t? `${_logPrefix}[ManagementConnection]`\n\t\t\t\t: msg.desiredConnectionType === ConnectionType.ExtensionHost\n\t\t\t\t\t? `${_logPrefix}[ExtensionHostConnection]`\n\t\t\t\t\t: _logPrefix\n\t\t);\n\n\t\tif (msg.desiredConnectionType === ConnectionType.Management) {\n\t\t\t// This should become a management connection\n\n\t\t\tif (isReconnection) {\n\t\t\t\t// This is a reconnection\n\t\t\t\tif (!this._managementConnections[reconnectionToken]) {\n\t\t\t\t\tif (!this._allReconnectionTokens.has(reconnectionToken)) {\n\t\t\t\t\t\t// This is an unknown reconnection token\n\t\t\t\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Unknown reconnection token (never seen)`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is a connection that was seen in the past, but is no longer valid\n\t\t\t\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Unknown reconnection token (seen before)`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprotocol.sendControl(VSBuffer.fromString(JSON.stringify({ type: 'ok' })));\n\t\t\t\tconst dataChunk = protocol.readEntireBuffer();\n\t\t\t\tprotocol.dispose();\n\t\t\t\tthis._managementConnections[reconnectionToken].acceptReconnection(remoteAddress, socket, dataChunk);\n\n\t\t\t} else {\n\t\t\t\t// This is a fresh connection\n\t\t\t\tif (this._managementConnections[reconnectionToken]) {\n\t\t\t\t\t// Cannot have two concurrent connections using the same reconnection token\n\t\t\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Duplicate reconnection token`);\n\t\t\t\t}\n\n\t\t\t\tprotocol.sendControl(VSBuffer.fromString(JSON.stringify({ type: 'ok' })));\n\t\t\t\tconst con = new ManagementConnection(this._logService, reconnectionToken, remoteAddress, protocol);\n\t\t\t\tthis._socketServer.acceptConnection(con.protocol, con.onClose);\n\t\t\t\tthis._managementConnections[reconnectionToken] = con;\n\t\t\t\tthis._allReconnectionTokens.add(reconnectionToken);\n\t\t\t\tcon.onClose(() => {\n\t\t\t\t\tdelete this._managementConnections[reconnectionToken];\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t} else if (msg.desiredConnectionType === ConnectionType.ExtensionHost) {\n\n\t\t\t// This should become an extension host connection\n\t\t\tconst startParams0 = <IRemoteExtensionHostStartParams>msg.args || { language: 'en' };\n\t\t\tconst startParams = await this._updateWithFreeDebugPort(startParams0);\n\n\t\t\tif (startParams.port) {\n\t\t\t\tthis._logService.trace(`${logPrefix} - startParams debug port ${startParams.port}`);\n\t\t\t}\n\t\t\tthis._logService.trace(`${logPrefix} - startParams language: ${startParams.language}`);\n\t\t\tthis._logService.trace(`${logPrefix} - startParams env: ${JSON.stringify(startParams.env)}`);\n\n\t\t\tif (isReconnection) {\n\t\t\t\t// This is a reconnection\n\t\t\t\tif (!this._extHostConnections[reconnectionToken]) {\n\t\t\t\t\tif (!this._allReconnectionTokens.has(reconnectionToken)) {\n\t\t\t\t\t\t// This is an unknown reconnection token\n\t\t\t\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Unknown reconnection token (never seen)`);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// This is a connection that was seen in the past, but is no longer valid\n\t\t\t\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Unknown reconnection token (seen before)`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tprotocol.sendPause();\n\t\t\t\tprotocol.sendControl(VSBuffer.fromString(JSON.stringify(startParams.port ? { debugPort: startParams.port } : {})));\n\t\t\t\tconst dataChunk = protocol.readEntireBuffer();\n\t\t\t\tprotocol.dispose();\n\t\t\t\tthis._extHostConnections[reconnectionToken].acceptReconnection(remoteAddress, socket, dataChunk);\n\n\t\t\t} else {\n\t\t\t\t// This is a fresh connection\n\t\t\t\tif (this._extHostConnections[reconnectionToken]) {\n\t\t\t\t\t// Cannot have two concurrent connections using the same reconnection token\n\t\t\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Duplicate reconnection token`);\n\t\t\t\t}\n\n\t\t\t\tprotocol.sendPause();\n\t\t\t\tprotocol.sendControl(VSBuffer.fromString(JSON.stringify(startParams.port ? { debugPort: startParams.port } : {})));\n\t\t\t\tconst dataChunk = protocol.readEntireBuffer();\n\t\t\t\tprotocol.dispose();\n\t\t\t\tconst con = this._instantiationService.createInstance(ExtensionHostConnection, reconnectionToken, remoteAddress, socket, dataChunk);\n\t\t\t\tthis._extHostConnections[reconnectionToken] = con;\n\t\t\t\tthis._allReconnectionTokens.add(reconnectionToken);\n\t\t\t\tcon.onClose(() => {\n\t\t\t\t\tcon.dispose();\n\t\t\t\t\tdelete this._extHostConnections[reconnectionToken];\n\t\t\t\t\tthis._onDidCloseExtHostConnection();\n\t\t\t\t});\n\t\t\t\tcon.start(startParams);\n\t\t\t}\n\n\t\t} else if (msg.desiredConnectionType === ConnectionType.Tunnel) {\n\n\t\t\tconst tunnelStartParams = <ITunnelConnectionStartParams>msg.args;\n\t\t\tthis._createTunnel(protocol, tunnelStartParams);\n\n\t\t} else {\n\n\t\t\treturn this._rejectWebSocketConnection(logPrefix, protocol, `Unknown initial data received`);\n\n\t\t}\n\t}\n\n\tprivate async _createTunnel(protocol: PersistentProtocol, tunnelStartParams: ITunnelConnectionStartParams): Promise<void> {\n\t\tconst remoteSocket = (<NodeSocket>protocol.getSocket()).socket;\n\t\tconst dataChunk = protocol.readEntireBuffer();\n\t\tprotocol.dispose();\n\n\t\tremoteSocket.pause();\n\t\tconst localSocket = await this._connectTunnelSocket(tunnelStartParams.host, tunnelStartParams.port);\n\n\t\tif (dataChunk.byteLength > 0) {\n\t\t\tlocalSocket.write(dataChunk.buffer);\n\t\t}\n\n\t\tlocalSocket.on('end', () => remoteSocket.end());\n\t\tlocalSocket.on('close', () => remoteSocket.end());\n\t\tlocalSocket.on('error', () => remoteSocket.destroy());\n\t\tremoteSocket.on('end', () => localSocket.end());\n\t\tremoteSocket.on('close', () => localSocket.end());\n\t\tremoteSocket.on('error', () => localSocket.destroy());\n\n\t\tlocalSocket.pipe(remoteSocket);\n\t\tremoteSocket.pipe(localSocket);\n\t}\n\n\tprivate _connectTunnelSocket(host: string, port: number): Promise<net.Socket> {\n\t\treturn new Promise<net.Socket>((c, e) => {\n\t\t\tconst socket = net.createConnection(\n\t\t\t\t{\n\t\t\t\t\thost: host,\n\t\t\t\t\tport: port,\n\t\t\t\t\tautoSelectFamily: true\n\t\t\t\t}, () => {\n\t\t\t\t\tsocket.removeListener('error', e);\n\t\t\t\t\tsocket.pause();\n\t\t\t\t\tc(socket);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tsocket.once('error', e);\n\t\t});\n\t}\n\n\tprivate _updateWithFreeDebugPort(startParams: IRemoteExtensionHostStartParams): Thenable<IRemoteExtensionHostStartParams> {\n\t\tif (typeof startParams.port === 'number') {\n\t\t\treturn findFreePort(startParams.port, 10 /* try 10 ports */, 5000 /* try up to 5 seconds */).then(freePort => {\n\t\t\t\tstartParams.port = freePort;\n\t\t\t\treturn startParams;\n\t\t\t});\n\t\t}\n\t\t// No port clear debug configuration.\n\t\tstartParams.debugId = undefined;\n\t\tstartParams.port = undefined;\n\t\tstartParams.break = undefined;\n\t\treturn Promise.resolve(startParams);\n\t}\n\n\tprivate async _onDidCloseExtHostConnection(): Promise<void> {\n\t\tif (!this._environmentService.args['enable-remote-auto-shutdown']) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._cancelShutdown();\n\n\t\tconst hasActiveExtHosts = !!Object.keys(this._extHostConnections).length;\n\t\tif (!hasActiveExtHosts) {\n\t\t\tconsole.log('Last EH closed, waiting before shutting down');\n\t\t\tthis._logService.info('Last EH closed, waiting before shutting down');\n\t\t\tthis._waitThenShutdown();\n\t\t}\n\t}\n\n\tprivate _waitThenShutdown(initial = false): void {\n\t\tif (!this._environmentService.args['enable-remote-auto-shutdown']) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._environmentService.args['remote-auto-shutdown-without-delay'] && !initial) {\n\t\t\tthis._shutdown();\n\t\t} else {\n\t\t\tthis.shutdownTimer = setTimeout(() => {\n\t\t\t\tthis.shutdownTimer = undefined;\n\n\t\t\t\tthis._shutdown();\n\t\t\t}, SHUTDOWN_TIMEOUT);\n\t\t}\n\t}\n\n\tprivate _shutdown(): void {\n\t\tconst hasActiveExtHosts = !!Object.keys(this._extHostConnections).length;\n\t\tif (hasActiveExtHosts) {\n\t\t\tconsole.log('New EH opened, aborting shutdown');\n\t\t\tthis._logService.info('New EH opened, aborting shutdown');\n\t\t\treturn;\n\t\t} else {\n\t\t\tconsole.log('Last EH closed, shutting down');\n\t\t\tthis._logService.info('Last EH closed, shutting down');\n\t\t\tthis.dispose();\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\t/**\n\t * If the server is in a shutdown timeout, cancel it and start over\n\t */\n\tprivate _delayShutdown(): void {\n\t\tif (this.shutdownTimer) {\n\t\t\tconsole.log('Got delay-shutdown request while in shutdown timeout, delaying');\n\t\t\tthis._logService.info('Got delay-shutdown request while in shutdown timeout, delaying');\n\t\t\tthis._cancelShutdown();\n\t\t\tthis._waitThenShutdown();\n\t\t}\n\t}\n\n\tprivate _cancelShutdown(): void {\n\t\tif (this.shutdownTimer) {\n\t\t\tconsole.log('Cancelling previous shutdown timeout');\n\t\t\tthis._logService.info('Cancelling previous shutdown timeout');\n\t\t\tclearTimeout(this.shutdownTimer);\n\t\t\tthis.shutdownTimer = undefined;\n\t\t}\n\t}\n}\n\nexport interface IServerAPI {\n\t/**\n\t * Do not remove!!. Called from server-main.js\n\t */\n\thandleRequest(req: http.IncomingMessage, res: http.ServerResponse): Promise<void>;\n\t/**\n\t * Do not remove!!. Called from server-main.js\n\t */\n\thandleUpgrade(req: http.IncomingMessage, socket: net.Socket): void;\n\t/**\n\t * Do not remove!!. Called from server-main.js\n\t */\n\thandleServerError(err: Error): void;\n\t/**\n\t * Do not remove!!. Called from server-main.js\n\t */\n\tdispose(): void;\n}\n\nexport async function createServer(address: string | net.AddressInfo | null, args: ServerParsedArgs, REMOTE_DATA_FOLDER: string): Promise<IServerAPI> {\n\n\tconst connectionToken = await determineServerConnectionToken(args);\n\tif (connectionToken instanceof ServerConnectionTokenParseError) {\n\t\tconsole.warn(connectionToken.message);\n\t\tprocess.exit(1);\n\t}\n\n\t// setting up error handlers, first with console.error, then, once available, using the log service\n\n\tfunction initUnexpectedErrorHandler(handler: (err: any) => void) {\n\t\tsetUnexpectedErrorHandler(err => {\n\t\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6481\n\t\t\t// In some circumstances, console.error will throw an asynchronous error. This asynchronous error\n\t\t\t// will end up here, and then it will be logged again, thus creating an endless asynchronous loop.\n\t\t\t// Here we try to break the loop by ignoring EPIPE errors that include our own unexpected error handler in the stack.\n\t\t\tif (isSigPipeError(err) && err.stack && /unexpectedErrorHandler/.test(err.stack)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\thandler(err);\n\t\t});\n\t}\n\n\tconst unloggedErrors: any[] = [];\n\tinitUnexpectedErrorHandler((error: any) => {\n\t\tunloggedErrors.push(error);\n\t\tconsole.error(error);\n\t});\n\tlet didLogAboutSIGPIPE = false;\n\tprocess.on('SIGPIPE', () => {\n\t\t// See https://github.com/microsoft/vscode-remote-release/issues/6543\n\t\t// We would normally install a SIGPIPE listener in bootstrap-node.js\n\t\t// But in certain situations, the console itself can be in a broken pipe state\n\t\t// so logging SIGPIPE to the console will cause an infinite async loop\n\t\tif (!didLogAboutSIGPIPE) {\n\t\t\tdidLogAboutSIGPIPE = true;\n\t\t\tonUnexpectedError(new Error(`Unexpected SIGPIPE`));\n\t\t}\n\t});\n\n\tconst disposables = new DisposableStore();\n\tconst { socketServer, instantiationService } = await setupServerServices(connectionToken, args, REMOTE_DATA_FOLDER, disposables);\n\n\t// Set the unexpected error handler after the services have been initialized, to avoid having\n\t// the telemetry service overwrite our handler\n\tinstantiationService.invokeFunction((accessor) => {\n\t\tconst logService = accessor.get(ILogService);\n\t\tunloggedErrors.forEach(error => logService.error(error));\n\t\tunloggedErrors.length = 0;\n\n\t\tinitUnexpectedErrorHandler((error: any) => logService.error(error));\n\t});\n\n\t// On Windows, configure the UNC allow list based on settings\n\tinstantiationService.invokeFunction((accessor) => {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tif (platform.isWindows) {\n\t\t\tif (configurationService.getValue('security.restrictUNCAccess') === false) {\n\t\t\t\tdisableUNCAccessRestrictions();\n\t\t\t} else {\n\t\t\t\taddUNCHostToAllowlist(configurationService.getValue('security.allowedUNCHosts'));\n\t\t\t}\n\t\t}\n\t});\n\n\t//\n\t// On Windows, exit early with warning message to users about potential security issue\n\t// if there is node_modules folder under home drive or Users folder.\n\t//\n\tinstantiationService.invokeFunction((accessor) => {\n\t\tconst logService = accessor.get(ILogService);\n\n\t\tif (platform.isWindows && process.env.HOMEDRIVE && process.env.HOMEPATH) {\n\t\t\tconst homeDirModulesPath = join(process.env.HOMEDRIVE, 'node_modules');\n\t\t\tconst userDir = dirname(join(process.env.HOMEDRIVE, process.env.HOMEPATH));\n\t\t\tconst userDirModulesPath = join(userDir, 'node_modules');\n\t\t\tif (fs.existsSync(homeDirModulesPath) || fs.existsSync(userDirModulesPath)) {\n\t\t\t\tconst message = `\n\n*\n* !!!! Server terminated due to presence of CVE-2020-1416 !!!!\n*\n* Please remove the following directories and re-try\n* ${homeDirModulesPath}\n* ${userDirModulesPath}\n*\n* For more information on the vulnerability https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1416\n*\n\n`;\n\t\t\t\tlogService.warn(message);\n\t\t\t\tconsole.warn(message);\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\t\t}\n\t});\n\n\tconst vsdaMod = instantiationService.invokeFunction((accessor) => {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst hasVSDA = fs.existsSync(join(FileAccess.asFileUri('').fsPath, '../node_modules/vsda'));\n\t\tif (hasVSDA) {\n\t\t\ttry {\n\t\t\t\treturn require('vsda');\n\t\t\t} catch (err) {\n\t\t\t\tlogService.error(err);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t});\n\n\tlet serverBasePath = args['server-base-path'];\n\tif (serverBasePath && !serverBasePath.startsWith('/')) {\n\t\tserverBasePath = `/${serverBasePath}`;\n\t}\n\n\tconst hasWebClient = fs.existsSync(FileAccess.asFileUri(`vs/code/browser/workbench/workbench.${isESM ? 'esm.' : ''}html`).fsPath);\n\n\tif (hasWebClient && address && typeof address !== 'string') {\n\t\t// ships the web ui!\n\t\tconst queryPart = (connectionToken.type !== ServerConnectionTokenType.None ? `?${connectionTokenQueryName}=${connectionToken.value}` : '');\n\t\tconsole.log(`Web UI available at http://localhost${address.port === 80 ? '' : `:${address.port}`}${serverBasePath ?? ''}${queryPart}`);\n\t}\n\n\tconst remoteExtensionHostAgentServer = instantiationService.createInstance(RemoteExtensionHostAgentServer, socketServer, connectionToken, vsdaMod, hasWebClient, serverBasePath);\n\n\tperf.mark('code/server/ready');\n\tconst currentTime = performance.now();\n\tconst vscodeServerStartTime: number = (<any>global).vscodeServerStartTime;\n\tconst vscodeServerListenTime: number = (<any>global).vscodeServerListenTime;\n\tconst vscodeServerCodeLoadedTime: number = (<any>global).vscodeServerCodeLoadedTime;\n\n\tinstantiationService.invokeFunction(async (accessor) => {\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\n\t\ttype ServerStartClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'The server has started up';\n\t\t\tstartTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time the server started at.' };\n\t\t\tstartedTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time the server began listening for connections.' };\n\t\t\tcodeLoadedTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time which the code loaded on the server' };\n\t\t\treadyTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time when the server was completely ready' };\n\t\t};\n\t\ttype ServerStartEvent = {\n\t\t\tstartTime: number;\n\t\t\tstartedTime: number;\n\t\t\tcodeLoadedTime: number;\n\t\t\treadyTime: number;\n\t\t};\n\t\ttelemetryService.publicLog2<ServerStartEvent, ServerStartClassification>('serverStart', {\n\t\t\tstartTime: vscodeServerStartTime,\n\t\t\tstartedTime: vscodeServerListenTime,\n\t\t\tcodeLoadedTime: vscodeServerCodeLoadedTime,\n\t\t\treadyTime: currentTime\n\t\t});\n\n\t\tif (platform.isLinux) {\n\t\t\tconst logService = accessor.get(ILogService);\n\t\t\tconst releaseInfo = await getOSReleaseInfo(logService.error.bind(logService));\n\t\t\tif (releaseInfo) {\n\t\t\t\ttype ServerPlatformInfoClassification = {\n\t\t\t\t\tplatformId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the operating system without any version information.' };\n\t\t\t\t\tplatformVersionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the operating system version excluding any name information or release code.' };\n\t\t\t\t\tplatformIdLike: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'A string identifying the operating system the current OS derivate is closely related to.' };\n\t\t\t\t\towner: 'deepak1556';\n\t\t\t\t\tcomment: 'Provides insight into the distro information on Linux.';\n\t\t\t\t};\n\t\t\t\ttype ServerPlatformInfoEvent = {\n\t\t\t\t\tplatformId: string;\n\t\t\t\t\tplatformVersionId: string | undefined;\n\t\t\t\t\tplatformIdLike: string | undefined;\n\t\t\t\t};\n\t\t\t\ttelemetryService.publicLog2<ServerPlatformInfoEvent, ServerPlatformInfoClassification>('serverPlatformInfo', {\n\t\t\t\t\tplatformId: releaseInfo.id,\n\t\t\t\t\tplatformVersionId: releaseInfo.version_id,\n\t\t\t\t\tplatformIdLike: releaseInfo.id_like\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\tif (args['print-startup-performance']) {\n\t\tconst stats = LoaderStats.get();\n\t\tlet output = '';\n\t\toutput += '\\n\\n### Load AMD-module\\n';\n\t\toutput += LoaderStats.toMarkdownTable(['Module', 'Duration'], stats.amdLoad);\n\t\toutput += '\\n\\n### Load commonjs-module\\n';\n\t\toutput += LoaderStats.toMarkdownTable(['Module', 'Duration'], stats.nodeRequire);\n\t\toutput += '\\n\\n### Invoke AMD-module factory\\n';\n\t\toutput += LoaderStats.toMarkdownTable(['Module', 'Duration'], stats.amdInvoke);\n\t\toutput += '\\n\\n### Invoke commonjs-module\\n';\n\t\toutput += LoaderStats.toMarkdownTable(['Module', 'Duration'], stats.nodeEval);\n\t\toutput += `Start-up time: ${vscodeServerListenTime - vscodeServerStartTime}\\n`;\n\t\toutput += `Code loading time: ${vscodeServerCodeLoadedTime - vscodeServerStartTime}\\n`;\n\t\toutput += `Initialized time: ${currentTime - vscodeServerStartTime}\\n`;\n\t\toutput += `\\n`;\n\t\tconsole.log(output);\n\t}\n\treturn remoteExtensionHostAgentServer;\n}\n\nclass WebEndpointOriginChecker {\n\n\tpublic static create(productService: IProductService): WebEndpointOriginChecker {\n\t\tconst webEndpointUrlTemplate = productService.webEndpointUrlTemplate;\n\t\tconst commit = productService.commit;\n\t\tconst quality = productService.quality;\n\t\tif (!webEndpointUrlTemplate || !commit || !quality) {\n\t\t\treturn new WebEndpointOriginChecker(null);\n\t\t}\n\n\t\tconst uuid = generateUuid();\n\t\tconst exampleUrl = new URL(\n\t\t\twebEndpointUrlTemplate\n\t\t\t\t.replace('{{uuid}}', uuid)\n\t\t\t\t.replace('{{commit}}', commit)\n\t\t\t\t.replace('{{quality}}', quality)\n\t\t);\n\t\tconst exampleOrigin = exampleUrl.origin;\n\t\tconst originRegExpSource = (\n\t\t\tescapeRegExpCharacters(exampleOrigin)\n\t\t\t\t.replace(uuid, '[a-zA-Z0-9\\\\-]+')\n\t\t);\n\t\ttry {\n\t\t\tconst originRegExp = createRegExp(`^${originRegExpSource}$`, true, { matchCase: false });\n\t\t\treturn new WebEndpointOriginChecker(originRegExp);\n\t\t} catch (err) {\n\t\t\treturn new WebEndpointOriginChecker(null);\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly _originRegExp: RegExp | null\n\t) { }\n\n\tpublic matches(origin: string): boolean {\n\t\tif (!this._originRegExp) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._originRegExp.test(origin);\n\t}\n}\n"],
  "mappings": "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",
  "names": ["require", "State"]
}
