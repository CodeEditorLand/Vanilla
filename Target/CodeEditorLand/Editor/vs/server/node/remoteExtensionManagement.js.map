{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteExtensionManagement.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { PersistentProtocol, ProtocolConstants, ISocket } from '../../base/parts/ipc/common/ipc.net.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { Emitter, Event } from '../../base/common/event.js';\nimport { VSBuffer } from '../../base/common/buffer.js';\nimport { ProcessTimeRunOnceScheduler } from '../../base/common/async.js';\n\nfunction printTime(ms: number): string {\n\tlet h = 0;\n\tlet m = 0;\n\tlet s = 0;\n\tif (ms >= 1000) {\n\t\ts = Math.floor(ms / 1000);\n\t\tms -= s * 1000;\n\t}\n\tif (s >= 60) {\n\t\tm = Math.floor(s / 60);\n\t\ts -= m * 60;\n\t}\n\tif (m >= 60) {\n\t\th = Math.floor(m / 60);\n\t\tm -= h * 60;\n\t}\n\tconst _h = h ? `${h}h` : ``;\n\tconst _m = m ? `${m}m` : ``;\n\tconst _s = s ? `${s}s` : ``;\n\tconst _ms = ms ? `${ms}ms` : ``;\n\treturn `${_h}${_m}${_s}${_ms}`;\n}\n\nexport class ManagementConnection {\n\n\tprivate _onClose = new Emitter<void>();\n\tpublic readonly onClose: Event<void> = this._onClose.event;\n\n\tprivate readonly _reconnectionGraceTime: number;\n\tprivate readonly _reconnectionShortGraceTime: number;\n\tprivate _remoteAddress: string;\n\n\tpublic readonly protocol: PersistentProtocol;\n\tprivate _disposed: boolean;\n\tprivate _disconnectRunner1: ProcessTimeRunOnceScheduler;\n\tprivate _disconnectRunner2: ProcessTimeRunOnceScheduler;\n\n\tconstructor(\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _reconnectionToken: string,\n\t\tremoteAddress: string,\n\t\tprotocol: PersistentProtocol\n\t) {\n\t\tthis._reconnectionGraceTime = ProtocolConstants.ReconnectionGraceTime;\n\t\tthis._reconnectionShortGraceTime = ProtocolConstants.ReconnectionShortGraceTime;\n\t\tthis._remoteAddress = remoteAddress;\n\n\t\tthis.protocol = protocol;\n\t\tthis._disposed = false;\n\t\tthis._disconnectRunner1 = new ProcessTimeRunOnceScheduler(() => {\n\t\t\tthis._log(`The reconnection grace time of ${printTime(this._reconnectionGraceTime)} has expired, so the connection will be disposed.`);\n\t\t\tthis._cleanResources();\n\t\t}, this._reconnectionGraceTime);\n\t\tthis._disconnectRunner2 = new ProcessTimeRunOnceScheduler(() => {\n\t\t\tthis._log(`The reconnection short grace time of ${printTime(this._reconnectionShortGraceTime)} has expired, so the connection will be disposed.`);\n\t\t\tthis._cleanResources();\n\t\t}, this._reconnectionShortGraceTime);\n\n\t\tthis.protocol.onDidDispose(() => {\n\t\t\tthis._log(`The client has disconnected gracefully, so the connection will be disposed.`);\n\t\t\tthis._cleanResources();\n\t\t});\n\t\tthis.protocol.onSocketClose(() => {\n\t\t\tthis._log(`The client has disconnected, will wait for reconnection ${printTime(this._reconnectionGraceTime)} before disposing...`);\n\t\t\t// The socket has closed, let's give the renderer a certain amount of time to reconnect\n\t\t\tthis._disconnectRunner1.schedule();\n\t\t});\n\n\t\tthis._log(`New connection established.`);\n\t}\n\n\tprivate _log(_str: string): void {\n\t\tthis._logService.info(`[${this._remoteAddress}][${this._reconnectionToken.substr(0, 8)}][ManagementConnection] ${_str}`);\n\t}\n\n\tpublic shortenReconnectionGraceTimeIfNecessary(): void {\n\t\tif (this._disconnectRunner2.isScheduled()) {\n\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\treturn;\n\t\t}\n\t\tif (this._disconnectRunner1.isScheduled()) {\n\t\t\tthis._log(`Another client has connected, will shorten the wait for reconnection ${printTime(this._reconnectionShortGraceTime)} before disposing...`);\n\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\tthis._disconnectRunner2.schedule();\n\t\t}\n\t}\n\n\tprivate _cleanResources(): void {\n\t\tif (this._disposed) {\n\t\t\t// already called\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\t\tthis._disconnectRunner1.dispose();\n\t\tthis._disconnectRunner2.dispose();\n\t\tconst socket = this.protocol.getSocket();\n\t\tthis.protocol.sendDisconnect();\n\t\tthis.protocol.dispose();\n\t\tsocket.end();\n\t\tthis._onClose.fire(undefined);\n\t}\n\n\tpublic acceptReconnection(remoteAddress: string, socket: ISocket, initialDataChunk: VSBuffer): void {\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._log(`The client has reconnected.`);\n\t\tthis._disconnectRunner1.cancel();\n\t\tthis._disconnectRunner2.cancel();\n\t\tthis.protocol.beginAcceptReconnection(socket, initialDataChunk);\n\t\tthis.protocol.endAcceptReconnection();\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
