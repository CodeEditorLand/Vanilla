var H=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var g=(i,r,t,e)=>{for(var o=e>1?void 0:e?b(r,t):r,s=i.length-1,c;s>=0;s--)(c=i[s])&&(o=(e?c(r,t,o):c(o))||o);return e&&o&&H(r,t,o),o},f=(i,r)=>(t,e)=>r(t,e,i);import*as C from"child_process";import*as y from"net";import{VSBuffer as S}from"../../base/common/buffer.js";import{Emitter as I,Event as p}from"../../base/common/event.js";import{Disposable as w,DisposableStore as D,toDisposable as N}from"../../base/common/lifecycle.js";import{FileAccess as R}from"../../base/common/network.js";import{delimiter as T,join as h}from"../../base/common/path.js";import{isWindows as E}from"../../base/common/platform.js";import{removeDangerousEnvVariables as O}from"../../base/common/processes.js";import{NodeSocket as k,createRandomIPCHandle as A}from"../../base/parts/ipc/node/ipc.net.js";import{IConfigurationService as $}from"../../platform/configuration/common/configuration.js";import{ILogService as L}from"../../platform/log/common/log.js";import{getResolvedShellEnv as B}from"../../platform/shell/node/shellEnv.js";import{IPCExtHostConnection as V,SocketExtHostConnection as M,writeExtHostConnection as x}from"../../workbench/services/extensions/common/extensionHostEnv.js";import{IExtensionHostStatusService as W}from"./extensionHostStatusService.js";import{getNLSConfiguration as F}from"./remoteLanguagePacks.js";import{IServerEnvironmentService as U}from"./serverEnvironmentService.js";async function G(i={},r,t,e,o,s){const c=await F(t,e.userDataPath);let d={};if(r)try{d=await B(s,o,e.args,process.env)}catch(l){o.error("ExtensionHostConnection#buildUserEnvironment resolving shell environment failed",l)}const a={...process.env,...d,VSCODE_AMD_ENTRYPOINT:"vs/workbench/api/node/extensionHostProcess",VSCODE_HANDLES_UNCAUGHT_ERRORS:"true",VSCODE_NLS_CONFIG:JSON.stringify(c),...i},m=e.isBuilt?h(e.appRoot,"bin"):h(e.appRoot,"resources","server","bin-dev"),v=h(m,"remote-cli");let n=j(a,"PATH");return n?n=v+T+n:n=v,K(a,"PATH",n),e.args["without-browser-env-var"]||(a.BROWSER=h(m,"helpers",E?"browser.cmd":"browser.sh")),X(a),a}class P{constructor(r,t){this.socket=r;this.initialDataChunk=t}socketDrain(){return this.socket.drain()}toIExtHostSocketMessage(){let r,t,e;return this.socket instanceof k?(r=!0,t=!1,e=S.alloc(0)):(r=!1,t=this.socket.permessageDeflate,e=this.socket.recordedInflateBytes),{type:"VSCODE_EXTHOST_IPC_SOCKET",initialDataChunk:this.initialDataChunk.buffer.toString("base64"),skipWebSocketFrames:r,permessageDeflate:t,inflateBytes:e.buffer.toString("base64")}}}let u=class extends w{constructor(t,e,o,s,c,d,_,a){super();this._reconnectionToken=t;this._environmentService=c;this._logService=d;this._extensionHostStatusService=_;this._configurationService=a;this._canSendSocket=!E||!this._environmentService.args["socket-path"],this._disposed=!1,this._remoteAddress=e,this._extensionHostProcess=null,this._connectionData=new P(o,s),this._log("New connection established.")}_onClose=new I;onClose=this._onClose.event;_canSendSocket;_disposed;_remoteAddress;_extensionHostProcess;_connectionData;dispose(){this._cleanResources(),super.dispose()}get _logPrefix(){return`[${this._remoteAddress}][${this._reconnectionToken.substr(0,8)}][ExtensionHostConnection] `}_log(t){this._logService.info(`${this._logPrefix}${t}`)}_logError(t){this._logService.error(`${this._logPrefix}${t}`)}async _pipeSockets(t,e){const o=new D;o.add(e.socket),o.add(N(()=>{t.destroy()}));const s=()=>{o.dispose()};o.add(e.socket.onEnd(s)),o.add(e.socket.onClose(s)),o.add(p.fromNodeEventEmitter(t,"end")(s)),o.add(p.fromNodeEventEmitter(t,"close")(s)),o.add(p.fromNodeEventEmitter(t,"error")(s)),o.add(e.socket.onData(c=>t.write(c.buffer))),o.add(p.fromNodeEventEmitter(t,"data")(c=>{e.socket.write(S.wrap(c))})),e.initialDataChunk.byteLength>0&&t.write(e.initialDataChunk.buffer)}async _sendSocketToExtensionHost(t,e){await e.socketDrain();const o=e.toIExtHostSocketMessage();let s;e.socket instanceof k?s=e.socket.socket:s=e.socket.socket.socket,t.send(o,s)}shortenReconnectionGraceTimeIfNecessary(){if(!this._extensionHostProcess)return;const t={type:"VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME"};this._extensionHostProcess.send(t)}acceptReconnection(t,e,o){this._remoteAddress=t,this._log("The client has reconnected.");const s=new P(e,o);if(!this._extensionHostProcess){this._connectionData=s;return}this._sendSocketToExtensionHost(this._extensionHostProcess,s)}_cleanResources(){this._disposed||(this._disposed=!0,this._connectionData&&(this._connectionData.socket.end(),this._connectionData=null),this._extensionHostProcess&&(this._extensionHostProcess.kill(),this._extensionHostProcess=null),this._onClose.fire(void 0))}async start(t){try{let e=process.execArgv?process.execArgv.filter(n=>!/^--inspect(-brk)?=/.test(n)):[];t.port&&!process.pkg&&(e=[`--inspect${t.break?"-brk":""}=${t.port}`]);const o=await G(t.env,!0,t.language,this._environmentService,this._logService,this._configurationService);O(o);let s;if(this._canSendSocket)x(new M,o),s=null;else{const{namedPipeServer:n,pipeName:l}=await this._listenOnPipe();x(new V(l),o),s=n}const c={env:o,execArgv:e,silent:!0};c.execArgv.unshift("--dns-result-order=ipv4first");const d=["--type=extensionHost","--transformURIs"],_=this._environmentService.args["use-host-proxy"];d.push(`--useHostProxy=${_?"true":"false"}`),this._extensionHostProcess=C.fork(R.asFileUri("bootstrap-fork").fsPath,d,c);const a=this._extensionHostProcess.pid;this._log(`<${a}> Launched Extension Host Process.`),this._extensionHostProcess.stdout.setEncoding("utf8"),this._extensionHostProcess.stderr.setEncoding("utf8");const m=p.fromNodeEventEmitter(this._extensionHostProcess.stdout,"data"),v=p.fromNodeEventEmitter(this._extensionHostProcess.stderr,"data");if(this._register(m(n=>this._log(`<${a}> ${n}`))),this._register(v(n=>this._log(`<${a}><stderr> ${n}`))),this._extensionHostProcess.on("error",n=>{this._logError(`<${a}> Extension Host Process had an error`),this._logService.error(n),this._cleanResources()}),this._extensionHostProcess.on("exit",(n,l)=>{this._extensionHostStatusService.setExitInfo(this._reconnectionToken,{code:n,signal:l}),this._log(`<${a}> Extension Host Process exited with code: ${n}, signal: ${l}.`),this._cleanResources()}),s)s.on("connection",n=>{s.close(),this._pipeSockets(n,this._connectionData)});else{const n=l=>{l.type==="VSCODE_EXTHOST_IPC_READY"&&(this._extensionHostProcess.removeListener("message",n),this._sendSocketToExtensionHost(this._extensionHostProcess,this._connectionData),this._connectionData=null)};this._extensionHostProcess.on("message",n)}}catch(e){}}_listenOnPipe(){return new Promise((t,e)=>{const o=A(),s=y.createServer();s.on("error",e),s.listen(o,()=>{s?.removeListener("error",e),t({pipeName:o,namedPipeServer:s})})})}};u=g([f(4,U),f(5,L),f(6,W),f(7,$)],u);function j(i,r){const t=Object.keys(i).filter(o=>o.toLowerCase()===r.toLowerCase()),e=t.length>0?t[0]:r;return i[e]}function K(i,r,t){const e=Object.keys(i).filter(s=>s.toLowerCase()===r.toLowerCase()),o=e.length>0?e[0]:r;i[o]=t}function X(i){for(const r of Object.keys(i))i[r]===null&&delete i[r]}export{u as ExtensionHostConnection,G as buildUserEnvironment};
