{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/serverConnectionToken.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cookie from 'cookie';\nimport * as fs from 'fs';\nimport * as http from 'http';\nimport * as url from 'url';\nimport * as path from '../../base/common/path.js';\nimport { generateUuid } from '../../base/common/uuid.js';\nimport { connectionTokenCookieName, connectionTokenQueryName } from '../../base/common/network.js';\nimport { ServerParsedArgs } from './serverEnvironmentService.js';\nimport { Promises } from '../../base/node/pfs.js';\n\nconst connectionTokenRegex = /^[0-9A-Za-z_-]+$/;\n\nexport const enum ServerConnectionTokenType {\n\tNone,\n\tOptional,// TODO: Remove this soon\n\tMandatory\n}\n\nexport class NoneServerConnectionToken {\n\tpublic readonly type = ServerConnectionTokenType.None;\n\n\tpublic validate(connectionToken: any): boolean {\n\t\treturn true;\n\t}\n}\n\nexport class MandatoryServerConnectionToken {\n\tpublic readonly type = ServerConnectionTokenType.Mandatory;\n\n\tconstructor(public readonly value: string) {\n\t}\n\n\tpublic validate(connectionToken: any): boolean {\n\t\treturn (connectionToken === this.value);\n\t}\n}\n\nexport type ServerConnectionToken = NoneServerConnectionToken | MandatoryServerConnectionToken;\n\nexport class ServerConnectionTokenParseError {\n\tconstructor(\n\t\tpublic readonly message: string\n\t) { }\n}\n\nexport async function parseServerConnectionToken(args: ServerParsedArgs, defaultValue: () => Promise<string>): Promise<ServerConnectionToken | ServerConnectionTokenParseError> {\n\tconst withoutConnectionToken = args['without-connection-token'];\n\tconst connectionToken = args['connection-token'];\n\tconst connectionTokenFile = args['connection-token-file'];\n\n\tif (withoutConnectionToken) {\n\t\tif (typeof connectionToken !== 'undefined' || typeof connectionTokenFile !== 'undefined') {\n\t\t\treturn new ServerConnectionTokenParseError(`Please do not use the argument '--connection-token' or '--connection-token-file' at the same time as '--without-connection-token'.`);\n\t\t}\n\t\treturn new NoneServerConnectionToken();\n\t}\n\n\tif (typeof connectionTokenFile !== 'undefined') {\n\t\tif (typeof connectionToken !== 'undefined') {\n\t\t\treturn new ServerConnectionTokenParseError(`Please do not use the argument '--connection-token' at the same time as '--connection-token-file'.`);\n\t\t}\n\n\t\tlet rawConnectionToken: string;\n\t\ttry {\n\t\t\trawConnectionToken = fs.readFileSync(connectionTokenFile).toString().replace(/\\r?\\n$/, '');\n\t\t} catch (e) {\n\t\t\treturn new ServerConnectionTokenParseError(`Unable to read the connection token file at '${connectionTokenFile}'.`);\n\t\t}\n\n\t\tif (!connectionTokenRegex.test(rawConnectionToken)) {\n\t\t\treturn new ServerConnectionTokenParseError(`The connection token defined in '${connectionTokenFile} does not adhere to the characters 0-9, a-z, A-Z, _, or -.`);\n\t\t}\n\n\t\treturn new MandatoryServerConnectionToken(rawConnectionToken);\n\t}\n\n\tif (typeof connectionToken !== 'undefined') {\n\t\tif (!connectionTokenRegex.test(connectionToken)) {\n\t\t\treturn new ServerConnectionTokenParseError(`The connection token '${connectionToken} does not adhere to the characters 0-9, a-z, A-Z or -.`);\n\t\t}\n\n\t\treturn new MandatoryServerConnectionToken(connectionToken);\n\t}\n\n\treturn new MandatoryServerConnectionToken(await defaultValue());\n}\n\nexport async function determineServerConnectionToken(args: ServerParsedArgs): Promise<ServerConnectionToken | ServerConnectionTokenParseError> {\n\tconst readOrGenerateConnectionToken = async () => {\n\t\tif (!args['user-data-dir']) {\n\t\t\t// No place to store it!\n\t\t\treturn generateUuid();\n\t\t}\n\t\tconst storageLocation = path.join(args['user-data-dir'], 'token');\n\n\t\t// First try to find a connection token\n\t\ttry {\n\t\t\tconst fileContents = await fs.promises.readFile(storageLocation);\n\t\t\tconst connectionToken = fileContents.toString().replace(/\\r?\\n$/, '');\n\t\t\tif (connectionTokenRegex.test(connectionToken)) {\n\t\t\t\treturn connectionToken;\n\t\t\t}\n\t\t} catch (err) { }\n\n\t\t// No connection token found, generate one\n\t\tconst connectionToken = generateUuid();\n\n\t\ttry {\n\t\t\t// Try to store it\n\t\t\tawait Promises.writeFile(storageLocation, connectionToken, { mode: 0o600 });\n\t\t} catch (err) { }\n\n\t\treturn connectionToken;\n\t};\n\treturn parseServerConnectionToken(args, readOrGenerateConnectionToken);\n}\n\nexport function requestHasValidConnectionToken(connectionToken: ServerConnectionToken, req: http.IncomingMessage, parsedUrl: url.UrlWithParsedQuery) {\n\t// First check if there is a valid query parameter\n\tif (connectionToken.validate(parsedUrl.query[connectionTokenQueryName])) {\n\t\treturn true;\n\t}\n\n\t// Otherwise, check if there is a valid cookie\n\tconst cookies = cookie.parse(req.headers.cookie || '');\n\treturn connectionToken.validate(cookies[connectionTokenCookieName]);\n}\n"],
  "mappings": "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",
  "names": ["ServerConnectionTokenType", "connectionToken"]
}
