import*as b from"fs";import*as _ from"url";import*as x from"child_process";import*as k from"http";import{cwd as I}from"../../base/common/process.js";import{dirname as T,extname as F,resolve as M,join as V}from"../../base/common/path.js";import{parseArgs as L,OPTIONS as N}from"../../platform/environment/node/argv.js";import"../../platform/environment/common/argv.js";import{createWaitMarkerFileSync as U}from"../../platform/environment/node/wait.js";import"../../workbench/api/node/extHostCLIServer.js";import{hasStdinWithoutTty as W,getStdinFilePath as j,readFromStdin as q}from"../../platform/environment/node/stdin.js";import{DeferredPromise as H}from"../../base/common/async.js";const J=o=>{switch(o){case"user-data-dir":case"extensions-dir":case"export-default-configuration":case"install-source":case"enable-smoke-test-driver":case"extensions-download-dir":case"builtin-extensions-dir":case"telemetry":return!1;default:return!0}},z=o=>{switch(o){case"version":case"help":case"folder-uri":case"file-uri":case"add":case"diff":case"merge":case"wait":case"goto":case"reuse-window":case"new-window":case"status":case"install-extension":case"uninstall-extension":case"update-extensions":case"list-extensions":case"force":case"show-versions":case"category":case"verbose":case"remote":case"locate-shell-integration-path":return!0;default:return!1}},y=process.env.VSCODE_IPC_HOOK_CLI,g=process.env.VSCODE_CLIENT_COMMAND,B=process.env.VSCODE_CLIENT_COMMAND_CWD,C=process.env.VSCODE_CLI_AUTHORITY,K=process.env.VSCODE_STDIN_FILE_PATH;async function X(o,a){if(!y&&!g)return;const l={...N,gitCredential:{type:"string"},openExternal:{type:"boolean"}},c=g?J:z;for(const n in N){const r=n;c(r)||delete l[r]}y&&(l.openExternal={type:"boolean"});const e=L(a,l,{onMultipleValues:(n,r)=>{},onEmptyValue:n=>{},onUnknownOption:n=>{},onDeprecatedOption:(n,r)=>{}}),s=C?ee:n=>n,t=!!e.verbose;if(e.help||e.version)return;if(e["locate-shell-integration-path"]){let n;switch(e["locate-shell-integration-path"]){case"bash":n="shellIntegration-bash.sh";break;case"pwsh":n="shellIntegration.ps1";break;case"zsh":n="shellIntegration-rc.zsh";break;case"fish":n="fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish";break;default:throw new Error("Error using --locate-shell-integration-path: Invalid shell type")}return}if(y&&e.openExternal){G(e._,t);return}let f=e.remote;(f==="local"||f==="false"||f==="")&&(f=null);const p=(e["folder-uri"]||[]).map(s);e["folder-uri"]=p;const m=(e["file-uri"]||[]).map(s);e["file-uri"]=m;const $=e._;let S=!1;for(const n of $)n==="-"?S=!0:A(n,s,p,m);e._=[];let E;if(S&&W())try{let n=K;if(!n){n=j();const r=new H;await q(n,t,()=>r.complete()),e.wait||(E=r.p)}A(n,s,p,m),e["skip-add-to-recently-opened"]=!0}catch{}e.extensionDevelopmentPath&&(e.extensionDevelopmentPath=e.extensionDevelopmentPath.map(n=>s(v(n).href))),e.extensionTestsPath&&(e.extensionTestsPath=s(v(e.extensionTestsPath).href));const O=e["crash-reporter-directory"];if(!(O!==void 0&&!O.match(/^([a-zA-Z]:[\\\/])/)))if(g){if(e["install-extension"]!==void 0||e["uninstall-extension"]!==void 0||e["list-extensions"]||e["update-extensions"]){const i=[];e["install-extension"]?.forEach(d=>i.push("--install-extension",d)),e["uninstall-extension"]?.forEach(d=>i.push("--uninstall-extension",d)),["list-extensions","force","show-versions","category"].forEach(d=>{const h=e[d];h!==void 0&&i.push(`--${d}=${h}`)}),e["update-extensions"]&&i.push("--update-extensions"),x.fork(V(__dirname,"../../../server-main.js"),i,{stdio:"inherit"}).on("error",d=>{});return}const n=[];for(const i in e){const u=e[i];if(typeof u=="boolean")u&&n.push("--"+i);else if(Array.isArray(u))for(const d of u)n.push(`--${i}=${d.toString()}`);else u&&n.push(`--${i}=${u.toString()}`)}f!==null&&n.push(`--remote=${f||C}`);const r=F(g);if(r===".bat"||r===".cmd"){const i=B||I();x.spawn("cmd.exe",["/C",g,...n],{stdio:"inherit",cwd:i})}else{const i=T(g),u={...process.env,ELECTRON_RUN_AS_NODE:"1"};if(n.unshift("resources/app/out/cli.js"),Y()){const d=x.spawn(g,n,{cwd:i,env:u,stdio:["inherit","pipe","pipe"]});d.stdout.on("data",h=>process.stdout.write(h)),d.stderr.on("data",h=>process.stderr.write(h))}else x.spawn(g,n,{cwd:i,env:u,stdio:"inherit"})}}else{if(e.status){P({type:"status"},t).then(r=>{}).catch(r=>{});return}if(e["install-extension"]!==void 0||e["uninstall-extension"]!==void 0||e["list-extensions"]||e["update-extensions"]){P({type:"extensionManagement",list:e["list-extensions"]?{showVersions:e["show-versions"],category:e.category}:void 0,install:D(e["install-extension"]),uninstall:D(e["uninstall-extension"]),force:e.force},t).then(r=>{}).catch(r=>{});return}let n;if(e.wait){if(!m.length)return;n=U(t)}P({type:"open",fileURIs:m,folderURIs:p,diffMode:e.diff,mergeMode:e.merge,addMode:e.add,gotoLineMode:e.goto,forceReuseWindow:e["reuse-window"],forceNewWindow:e["new-window"],waitMarkerFilePath:n,remoteAuthority:f},t).catch(r=>{}),n&&Z(n),E&&await E}}function Y(){if(process.env.WSL_DISTRO_NAME)try{return x.execSync("uname -r",{encoding:"utf8"}).includes("-microsoft-")}catch{}return!1}async function Z(o){for(;b.existsSync(o);)await new Promise(a=>setTimeout(a,1e3))}function G(o,a){const l=[];for(const c of o)try{/^(http|https|file):\/\//.test(c)?l.push(_.parse(c).href):l.push(v(c).href)}catch{}l.length&&P({type:"openExternal",uris:l},a).catch(c=>{})}function P(o,a){return new Promise((l,c)=>{const w=JSON.stringify(o);if(!y){l("");return}const e={socketPath:y,path:"/",method:"POST",headers:{"content-type":"application/json",accept:"application/json"}},s=k.request(e,t=>{if(t.headers["content-type"]!=="application/json"){c("Error in response: Invalid content type: Expected 'application/json', is: "+t.headers["content-type"]);return}const f=[];t.setEncoding("utf8"),t.on("data",p=>{f.push(p)}),t.on("error",p=>R("Error in response.",p)),t.on("end",()=>{const p=f.join("");try{const m=JSON.parse(p);t.statusCode===200?l(m):c(m)}catch{c("Error in response: Unable to parse response as JSON: "+p)}})});s.on("error",t=>R("Error in request.",t)),s.write(w),s.end()})}function D(o){return o?.map(a=>/\.vsix$/i.test(a)?v(a).href:a)}function R(o,a){process.exit(1)}const Q=process.env.PWD||I();function v(o){return o=o.trim(),o=M(Q,o),_.pathToFileURL(o)}function A(o,a,l,c){const w=v(o),e=a(w.href);try{const s=b.lstatSync(b.realpathSync(o));s.isFile()?c.push(e):s.isDirectory()?l.push(e):o==="/dev/null"&&c.push(e)}catch(s){s.code==="ENOENT"&&c.push(e)}}function ee(o){return o.replace(/^file:\/\//,"vscode-remote://"+C)}const[,,ne,oe,te,se,...re]=process.argv;X({productName:ne,version:oe,commit:te,executableName:se},re).then(null,o=>{});export{X as main};
