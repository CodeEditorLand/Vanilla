{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteAgentEnvironmentImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from '../../base/common/event.js';\nimport * as platform from '../../base/common/platform.js';\nimport * as performance from '../../base/common/performance.js';\nimport { URI } from '../../base/common/uri.js';\nimport { createURITransformer } from '../../workbench/api/node/uriTransformer.js';\nimport { IRemoteAgentEnvironmentDTO, IGetEnvironmentDataArguments, IGetExtensionHostExitInfoArguments } from '../../workbench/services/remote/common/remoteAgentEnvironmentChannel.js';\nimport { IServerEnvironmentService } from './serverEnvironmentService.js';\nimport { IServerChannel } from '../../base/parts/ipc/common/ipc.js';\nimport { transformOutgoingURIs } from '../../base/common/uriIpc.js';\nimport { listProcesses } from '../../base/node/ps.js';\nimport { getMachineInfo, collectWorkspaceStats } from '../../platform/diagnostics/node/diagnosticsService.js';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from '../../platform/diagnostics/common/diagnostics.js';\nimport { basename } from '../../base/common/path.js';\nimport { ProcessItem } from '../../base/common/processes.js';\nimport { ServerConnectionToken, ServerConnectionTokenType } from './serverConnectionToken.js';\nimport { IExtensionHostStatusService } from './extensionHostStatusService.js';\nimport { IUserDataProfilesService } from '../../platform/userDataProfile/common/userDataProfile.js';\nimport { joinPath } from '../../base/common/resources.js';\n\nexport class RemoteAgentEnvironmentChannel implements IServerChannel {\n\n\tprivate static _namePool = 1;\n\n\tconstructor(\n\t\tprivate readonly _connectionToken: ServerConnectionToken,\n\t\tprivate readonly _environmentService: IServerEnvironmentService,\n\t\tprivate readonly _userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly _extensionHostStatusService: IExtensionHostStatusService,\n\t) {\n\t}\n\n\tasync call(_: any, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\n\t\t\tcase 'getEnvironmentData': {\n\t\t\t\tconst args = <IGetEnvironmentDataArguments>arg;\n\t\t\t\tconst uriTransformer = createURITransformer(args.remoteAuthority);\n\n\t\t\t\tlet environmentData = await this._getEnvironmentData(args.profile);\n\t\t\t\tenvironmentData = transformOutgoingURIs(environmentData, uriTransformer);\n\n\t\t\t\treturn environmentData;\n\t\t\t}\n\n\t\t\tcase 'getExtensionHostExitInfo': {\n\t\t\t\tconst args = <IGetExtensionHostExitInfoArguments>arg;\n\t\t\t\treturn this._extensionHostStatusService.getExitInfo(args.reconnectionToken);\n\t\t\t}\n\n\t\t\tcase 'getDiagnosticInfo': {\n\t\t\t\tconst options = <IDiagnosticInfoOptions>arg;\n\t\t\t\tconst diagnosticInfo: IDiagnosticInfo = {\n\t\t\t\t\tmachineInfo: getMachineInfo()\n\t\t\t\t};\n\n\t\t\t\tconst processesPromise: Promise<ProcessItem | void> = options.includeProcesses ? listProcesses(process.pid) : Promise.resolve();\n\n\t\t\t\tlet workspaceMetadataPromises: Promise<void>[] = [];\n\t\t\t\tconst workspaceMetadata: { [key: string]: any } = {};\n\t\t\t\tif (options.folders) {\n\t\t\t\t\t// only incoming paths are transformed, so remote authority is unneeded.\n\t\t\t\t\tconst uriTransformer = createURITransformer('');\n\t\t\t\t\tconst folderPaths = options.folders\n\t\t\t\t\t\t.map(folder => URI.revive(uriTransformer.transformIncoming(folder)))\n\t\t\t\t\t\t.filter(uri => uri.scheme === 'file');\n\n\t\t\t\t\tworkspaceMetadataPromises = folderPaths.map(folder => {\n\t\t\t\t\t\treturn collectWorkspaceStats(folder.fsPath, ['node_modules', '.git'])\n\t\t\t\t\t\t\t.then(stats => {\n\t\t\t\t\t\t\t\tworkspaceMetadata[basename(folder.fsPath)] = stats;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all([processesPromise, ...workspaceMetadataPromises]).then(([processes, _]) => {\n\t\t\t\t\tdiagnosticInfo.processes = processes || undefined;\n\t\t\t\t\tdiagnosticInfo.workspaceMetadata = options.folders ? workspaceMetadata : undefined;\n\t\t\t\t\treturn diagnosticInfo;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`IPC Command ${command} not found`);\n\t}\n\n\tlisten(_: any, event: string, arg: any): Event<any> {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tprivate async _getEnvironmentData(profile?: string): Promise<IRemoteAgentEnvironmentDTO> {\n\t\tif (profile && !this._userDataProfilesService.profiles.some(p => p.id === profile)) {\n\t\t\tawait this._userDataProfilesService.createProfile(profile, profile);\n\t\t}\n\t\ttype ProcessWithGlibc = NodeJS.Process & {\n\t\t\tglibcVersion?: string;\n\t\t};\n\t\tlet isUnsupportedGlibc = false;\n\t\tif (process.platform === 'linux') {\n\t\t\tconst glibcVersion = (process as ProcessWithGlibc).glibcVersion;\n\t\t\tconst minorVersion = glibcVersion ? parseInt(glibcVersion.split('.')[1]) : 28;\n\t\t\tisUnsupportedGlibc = (minorVersion <= 27);\n\t\t}\n\t\treturn {\n\t\t\tpid: process.pid,\n\t\t\tconnectionToken: (this._connectionToken.type !== ServerConnectionTokenType.None ? this._connectionToken.value : ''),\n\t\t\tappRoot: URI.file(this._environmentService.appRoot),\n\t\t\tsettingsPath: this._environmentService.machineSettingsResource,\n\t\t\tlogsPath: this._environmentService.logsHome,\n\t\t\textensionHostLogsPath: joinPath(this._environmentService.logsHome, `exthost${RemoteAgentEnvironmentChannel._namePool++}`),\n\t\t\tglobalStorageHome: this._userDataProfilesService.defaultProfile.globalStorageHome,\n\t\t\tworkspaceStorageHome: this._environmentService.workspaceStorageHome,\n\t\t\tlocalHistoryHome: this._environmentService.localHistoryHome,\n\t\t\tuserHome: this._environmentService.userHome,\n\t\t\tos: platform.OS,\n\t\t\tarch: process.arch,\n\t\t\tmarks: performance.getMarks(),\n\t\t\tuseHostProxy: !!this._environmentService.args['use-host-proxy'],\n\t\t\tprofiles: {\n\t\t\t\thome: this._userDataProfilesService.profilesHome,\n\t\t\t\tall: [...this._userDataProfilesService.profiles].map(profile => ({ ...profile }))\n\t\t\t},\n\t\t\tisUnsupportedGlibc\n\t\t};\n\t}\n\n}\n"],
  "mappings": ";;AAKA,SAAS,aAAa;AACtB,YAAY,cAAc;AAC1B,YAAY,iBAAiB;AAC7B,SAAS,WAAW;AACpB,SAAS,4BAA4B;AACrC,SAAS,4BAA4B,8BAA8B,0CAA0C;AAC7G,SAAS,iCAAiC;AAC1C,SAAS,sBAAsB;AAC/B,SAAS,6BAA6B;AACtC,SAAS,qBAAqB;AAC9B,SAAS,gBAAgB,6BAA6B;AACtD,SAAS,wBAAwB,uBAAuB;AACxD,SAAS,gBAAgB;AACzB,SAAS,mBAAmB;AAC5B,SAAS,uBAAuB,iCAAiC;AACjE,SAAS,mCAAmC;AAC5C,SAAS,gCAAgC;AACzC,SAAS,gBAAgB;AAElB,MAAM,8BAAwD;AAAA,EAIpE,YACkB,kBACA,qBACA,0BACA,6BAChB;AAJgB;AACA;AACA;AACA;AAAA,EAElB;AAAA,EAlCD,OAwBqE;AAAA;AAAA;AAAA,EAEpE,OAAe,YAAY;AAAA,EAU3B,MAAM,KAAK,GAAQ,SAAiB,KAAyB;AAC5D,YAAQ,SAAS;AAAA,MAEhB,KAAK,sBAAsB;AAC1B,cAAM,OAAqC;AAC3C,cAAM,iBAAiB,qBAAqB,KAAK,eAAe;AAEhE,YAAI,kBAAkB,MAAM,KAAK,oBAAoB,KAAK,OAAO;AACjE,0BAAkB,sBAAsB,iBAAiB,cAAc;AAEvE,eAAO;AAAA,MACR;AAAA,MAEA,KAAK,4BAA4B;AAChC,cAAM,OAA2C;AACjD,eAAO,KAAK,4BAA4B,YAAY,KAAK,iBAAiB;AAAA,MAC3E;AAAA,MAEA,KAAK,qBAAqB;AACzB,cAAM,UAAkC;AACxC,cAAM,iBAAkC;AAAA,UACvC,aAAa,eAAe;AAAA,QAC7B;AAEA,cAAM,mBAAgD,QAAQ,mBAAmB,cAAc,QAAQ,GAAG,IAAI,QAAQ,QAAQ;AAE9H,YAAI,4BAA6C,CAAC;AAClD,cAAM,oBAA4C,CAAC;AACnD,YAAI,QAAQ,SAAS;AAEpB,gBAAM,iBAAiB,qBAAqB,EAAE;AAC9C,gBAAM,cAAc,QAAQ,QAC1B,IAAI,YAAU,IAAI,OAAO,eAAe,kBAAkB,MAAM,CAAC,CAAC,EAClE,OAAO,SAAO,IAAI,WAAW,MAAM;AAErC,sCAA4B,YAAY,IAAI,YAAU;AACrD,mBAAO,sBAAsB,OAAO,QAAQ,CAAC,gBAAgB,MAAM,CAAC,EAClE,KAAK,WAAS;AACd,gCAAkB,SAAS,OAAO,MAAM,CAAC,IAAI;AAAA,YAC9C,CAAC;AAAA,UACH,CAAC;AAAA,QACF;AAEA,eAAO,QAAQ,IAAI,CAAC,kBAAkB,GAAG,yBAAyB,CAAC,EAAE,KAAK,CAAC,CAAC,WAAWA,EAAC,MAAM;AAC7F,yBAAe,YAAY,aAAa;AACxC,yBAAe,oBAAoB,QAAQ,UAAU,oBAAoB;AACzE,iBAAO;AAAA,QACR,CAAC;AAAA,MACF;AAAA,IACD;AAEA,UAAM,IAAI,MAAM,eAAe,OAAO,YAAY;AAAA,EACnD;AAAA,EAEA,OAAO,GAAQ,OAAe,KAAsB;AACnD,UAAM,IAAI,MAAM,eAAe;AAAA,EAChC;AAAA,EAEA,MAAc,oBAAoB,SAAuD;AACxF,QAAI,WAAW,CAAC,KAAK,yBAAyB,SAAS,KAAK,OAAK,EAAE,OAAO,OAAO,GAAG;AACnF,YAAM,KAAK,yBAAyB,cAAc,SAAS,OAAO;AAAA,IACnE;AAIA,QAAI,qBAAqB;AACzB,QAAI,QAAQ,aAAa,SAAS;AACjC,YAAM,eAAgB,QAA6B;AACnD,YAAM,eAAe,eAAe,SAAS,aAAa,MAAM,GAAG,EAAE,CAAC,CAAC,IAAI;AAC3E,2BAAsB,gBAAgB;AAAA,IACvC;AACA,WAAO;AAAA,MACN,KAAK,QAAQ;AAAA,MACb,iBAAkB,KAAK,iBAAiB,SAAS,0BAA0B,OAAO,KAAK,iBAAiB,QAAQ;AAAA,MAChH,SAAS,IAAI,KAAK,KAAK,oBAAoB,OAAO;AAAA,MAClD,cAAc,KAAK,oBAAoB;AAAA,MACvC,UAAU,KAAK,oBAAoB;AAAA,MACnC,uBAAuB,SAAS,KAAK,oBAAoB,UAAU,UAAU,8BAA8B,WAAW,EAAE;AAAA,MACxH,mBAAmB,KAAK,yBAAyB,eAAe;AAAA,MAChE,sBAAsB,KAAK,oBAAoB;AAAA,MAC/C,kBAAkB,KAAK,oBAAoB;AAAA,MAC3C,UAAU,KAAK,oBAAoB;AAAA,MACnC,IAAI,SAAS;AAAA,MACb,MAAM,QAAQ;AAAA,MACd,OAAO,YAAY,SAAS;AAAA,MAC5B,cAAc,CAAC,CAAC,KAAK,oBAAoB,KAAK,gBAAgB;AAAA,MAC9D,UAAU;AAAA,QACT,MAAM,KAAK,yBAAyB;AAAA,QACpC,KAAK,CAAC,GAAG,KAAK,yBAAyB,QAAQ,EAAE,IAAI,CAAAC,cAAY,EAAE,GAAGA,SAAQ,EAAE;AAAA,MACjF;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAED;",
  "names": ["_", "profile"]
}
