{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteAgentEnvironmentImpl.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Event } from \"../../base/common/event.js\";\nimport { basename } from \"../../base/common/path.js\";\nimport * as performance from \"../../base/common/performance.js\";\nimport * as platform from \"../../base/common/platform.js\";\nimport type { ProcessItem } from \"../../base/common/processes.js\";\nimport { joinPath } from \"../../base/common/resources.js\";\nimport { URI } from \"../../base/common/uri.js\";\nimport { transformOutgoingURIs } from \"../../base/common/uriIpc.js\";\nimport { listProcesses } from \"../../base/node/ps.js\";\nimport type { IServerChannel } from \"../../base/parts/ipc/common/ipc.js\";\nimport type {\n\tIDiagnosticInfo,\n\tIDiagnosticInfoOptions,\n} from \"../../platform/diagnostics/common/diagnostics.js\";\nimport {\n\tcollectWorkspaceStats,\n\tgetMachineInfo,\n} from \"../../platform/diagnostics/node/diagnosticsService.js\";\nimport type { IUserDataProfilesService } from \"../../platform/userDataProfile/common/userDataProfile.js\";\nimport { createURITransformer } from \"../../workbench/api/node/uriTransformer.js\";\nimport type {\n\tIGetEnvironmentDataArguments,\n\tIGetExtensionHostExitInfoArguments,\n\tIRemoteAgentEnvironmentDTO,\n} from \"../../workbench/services/remote/common/remoteAgentEnvironmentChannel.js\";\nimport type { IExtensionHostStatusService } from \"./extensionHostStatusService.js\";\nimport {\n\ttype ServerConnectionToken,\n\tServerConnectionTokenType,\n} from \"./serverConnectionToken.js\";\nimport type { IServerEnvironmentService } from \"./serverEnvironmentService.js\";\n\nexport class RemoteAgentEnvironmentChannel implements IServerChannel {\n\tprivate static _namePool = 1;\n\n\tconstructor(\n\t\tprivate readonly _connectionToken: ServerConnectionToken,\n\t\tprivate readonly _environmentService: IServerEnvironmentService,\n\t\tprivate readonly _userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly _extensionHostStatusService: IExtensionHostStatusService,\n\t) {}\n\n\tasync call(_: any, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase \"getEnvironmentData\": {\n\t\t\t\tconst args = <IGetEnvironmentDataArguments>arg;\n\t\t\t\tconst uriTransformer = createURITransformer(\n\t\t\t\t\targs.remoteAuthority,\n\t\t\t\t);\n\n\t\t\t\tlet environmentData = await this._getEnvironmentData(\n\t\t\t\t\targs.profile,\n\t\t\t\t);\n\t\t\t\tenvironmentData = transformOutgoingURIs(\n\t\t\t\t\tenvironmentData,\n\t\t\t\t\turiTransformer,\n\t\t\t\t);\n\n\t\t\t\treturn environmentData;\n\t\t\t}\n\n\t\t\tcase \"getExtensionHostExitInfo\": {\n\t\t\t\tconst args = <IGetExtensionHostExitInfoArguments>arg;\n\t\t\t\treturn this._extensionHostStatusService.getExitInfo(\n\t\t\t\t\targs.reconnectionToken,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tcase \"getDiagnosticInfo\": {\n\t\t\t\tconst options = <IDiagnosticInfoOptions>arg;\n\t\t\t\tconst diagnosticInfo: IDiagnosticInfo = {\n\t\t\t\t\tmachineInfo: getMachineInfo(),\n\t\t\t\t};\n\n\t\t\t\tconst processesPromise: Promise<ProcessItem | void> =\n\t\t\t\t\toptions.includeProcesses\n\t\t\t\t\t\t? listProcesses(process.pid)\n\t\t\t\t\t\t: Promise.resolve();\n\n\t\t\t\tlet workspaceMetadataPromises: Promise<void>[] = [];\n\t\t\t\tconst workspaceMetadata: { [key: string]: any } = {};\n\t\t\t\tif (options.folders) {\n\t\t\t\t\t// only incoming paths are transformed, so remote authority is unneeded.\n\t\t\t\t\tconst uriTransformer = createURITransformer(\"\");\n\t\t\t\t\tconst folderPaths = options.folders\n\t\t\t\t\t\t.map((folder) =>\n\t\t\t\t\t\t\tURI.revive(\n\t\t\t\t\t\t\t\turiTransformer.transformIncoming(folder),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.filter((uri) => uri.scheme === \"file\");\n\n\t\t\t\t\tworkspaceMetadataPromises = folderPaths.map((folder) => {\n\t\t\t\t\t\treturn collectWorkspaceStats(folder.fsPath, [\n\t\t\t\t\t\t\t\"node_modules\",\n\t\t\t\t\t\t\t\".git\",\n\t\t\t\t\t\t]).then((stats) => {\n\t\t\t\t\t\t\tworkspaceMetadata[basename(folder.fsPath)] = stats;\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all([\n\t\t\t\t\tprocessesPromise,\n\t\t\t\t\t...workspaceMetadataPromises,\n\t\t\t\t]).then(([processes, _]) => {\n\t\t\t\t\tdiagnosticInfo.processes = processes || undefined;\n\t\t\t\t\tdiagnosticInfo.workspaceMetadata = options.folders\n\t\t\t\t\t\t? workspaceMetadata\n\t\t\t\t\t\t: undefined;\n\t\t\t\t\treturn diagnosticInfo;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`IPC Command ${command} not found`);\n\t}\n\n\tlisten(_: any, event: string, arg: any): Event<any> {\n\t\tthrow new Error(\"Not supported\");\n\t}\n\n\tprivate async _getEnvironmentData(\n\t\tprofile?: string,\n\t): Promise<IRemoteAgentEnvironmentDTO> {\n\t\tif (\n\t\t\tprofile &&\n\t\t\t!this._userDataProfilesService.profiles.some(\n\t\t\t\t(p) => p.id === profile,\n\t\t\t)\n\t\t) {\n\t\t\tawait this._userDataProfilesService.createProfile(profile, profile);\n\t\t}\n\t\ttype ProcessWithGlibc = NodeJS.Process & {\n\t\t\tglibcVersion?: string;\n\t\t};\n\t\tlet isUnsupportedGlibc = false;\n\t\tif (process.platform === \"linux\") {\n\t\t\tconst glibcVersion = (process as ProcessWithGlibc).glibcVersion;\n\t\t\tconst minorVersion = glibcVersion\n\t\t\t\t? Number.parseInt(glibcVersion.split(\".\")[1])\n\t\t\t\t: 28;\n\t\t\tisUnsupportedGlibc = minorVersion <= 27;\n\t\t}\n\t\treturn {\n\t\t\tpid: process.pid,\n\t\t\tconnectionToken:\n\t\t\t\tthis._connectionToken.type !== ServerConnectionTokenType.None\n\t\t\t\t\t? this._connectionToken.value\n\t\t\t\t\t: \"\",\n\t\t\tappRoot: URI.file(this._environmentService.appRoot),\n\t\t\tsettingsPath: this._environmentService.machineSettingsResource,\n\t\t\tlogsPath: this._environmentService.logsHome,\n\t\t\textensionHostLogsPath: joinPath(\n\t\t\t\tthis._environmentService.logsHome,\n\t\t\t\t`exthost${RemoteAgentEnvironmentChannel._namePool++}`,\n\t\t\t),\n\t\t\tglobalStorageHome:\n\t\t\t\tthis._userDataProfilesService.defaultProfile.globalStorageHome,\n\t\t\tworkspaceStorageHome: this._environmentService.workspaceStorageHome,\n\t\t\tlocalHistoryHome: this._environmentService.localHistoryHome,\n\t\t\tuserHome: this._environmentService.userHome,\n\t\t\tos: platform.OS,\n\t\t\tarch: process.arch,\n\t\t\tmarks: performance.getMarks(),\n\t\t\tuseHostProxy: !!this._environmentService.args[\"use-host-proxy\"],\n\t\t\tprofiles: {\n\t\t\t\thome: this._userDataProfilesService.profilesHome,\n\t\t\t\tall: [...this._userDataProfilesService.profiles].map(\n\t\t\t\t\t(profile) => ({ ...profile }),\n\t\t\t\t),\n\t\t\t},\n\t\t\tisUnsupportedGlibc,\n\t\t};\n\t}\n}\n"],
  "mappings": "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",
  "names": ["_", "profile"]
}
