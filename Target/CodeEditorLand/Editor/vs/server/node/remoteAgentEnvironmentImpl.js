import"../../base/common/event.js";import*as h from"../../base/common/platform.js";import*as S from"../../base/common/performance.js";import{URI as l}from"../../base/common/uri.js";import{createURITransformer as f}from"../../workbench/api/node/uriTransformer.js";import"../../workbench/services/remote/common/remoteAgentEnvironmentChannel.js";import"./serverEnvironmentService.js";import"../../base/parts/ipc/common/ipc.js";import{transformOutgoingURIs as u}from"../../base/common/uriIpc.js";import{listProcesses as I}from"../../base/node/ps.js";import{getMachineInfo as P,collectWorkspaceStats as d}from"../../platform/diagnostics/node/diagnosticsService.js";import"../../platform/diagnostics/common/diagnostics.js";import{basename as _}from"../../base/common/path.js";import"../../base/common/processes.js";import{ServerConnectionTokenType as y}from"./serverConnectionToken.js";import"./extensionHostStatusService.js";import"../../platform/userDataProfile/common/userDataProfile.js";import{joinPath as E}from"../../base/common/resources.js";class p{constructor(r,t,e,o){this._connectionToken=r;this._environmentService=t;this._userDataProfilesService=e;this._extensionHostStatusService=o}static _namePool=1;async call(r,t,e){switch(t){case"getEnvironmentData":{const o=e,s=f(o.remoteAuthority);let i=await this._getEnvironmentData(o.profile);return i=u(i,s),i}case"getExtensionHostExitInfo":{const o=e;return this._extensionHostStatusService.getExitInfo(o.reconnectionToken)}case"getDiagnosticInfo":{const o=e,s={machineInfo:P()},i=o.includeProcesses?I(process.pid):Promise.resolve();let m=[];const c={};if(o.folders){const a=f("");m=o.folders.map(n=>l.revive(a.transformIncoming(n))).filter(n=>n.scheme==="file").map(n=>d(n.fsPath,["node_modules",".git"]).then(g=>{c[_(n.fsPath)]=g}))}return Promise.all([i,...m]).then(([a,v])=>(s.processes=a||void 0,s.workspaceMetadata=o.folders?c:void 0,s))}}throw new Error(`IPC Command ${t} not found`)}listen(r,t,e){throw new Error("Not supported")}async _getEnvironmentData(r){r&&!this._userDataProfilesService.profiles.some(e=>e.id===r)&&await this._userDataProfilesService.createProfile(r,r);let t=!1;if(process.platform==="linux"){const e=process.glibcVersion;t=(e?parseInt(e.split(".")[1]):28)<=27}return{pid:process.pid,connectionToken:this._connectionToken.type!==y.None?this._connectionToken.value:"",appRoot:l.file(this._environmentService.appRoot),settingsPath:this._environmentService.machineSettingsResource,logsPath:this._environmentService.logsHome,extensionHostLogsPath:E(this._environmentService.logsHome,`exthost${p._namePool++}`),globalStorageHome:this._userDataProfilesService.defaultProfile.globalStorageHome,workspaceStorageHome:this._environmentService.workspaceStorageHome,localHistoryHome:this._environmentService.localHistoryHome,userHome:this._environmentService.userHome,os:h.OS,arch:process.arch,marks:S.getMarks(),useHostProxy:!!this._environmentService.args["use-host-proxy"],profiles:{home:this._userDataProfilesService.profilesHome,all:[...this._userDataProfilesService.profiles].map(e=>({...e}))},isUnsupportedGlibc:t}}}export{p as RemoteAgentEnvironmentChannel};
