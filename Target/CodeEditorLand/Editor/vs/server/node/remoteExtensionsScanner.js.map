{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/remoteExtensionsScanner.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isAbsolute, join, resolve } from '../../base/common/path.js';\nimport * as platform from '../../base/common/platform.js';\nimport { cwd } from '../../base/common/process.js';\nimport { URI } from '../../base/common/uri.js';\nimport * as performance from '../../base/common/performance.js';\nimport { Event } from '../../base/common/event.js';\nimport { IURITransformer, transformOutgoingURIs } from '../../base/common/uriIpc.js';\nimport { IServerChannel } from '../../base/parts/ipc/common/ipc.js';\nimport { ContextKeyDefinedExpr, ContextKeyEqualsExpr, ContextKeyExpr, ContextKeyExpression, ContextKeyGreaterEqualsExpr, ContextKeyGreaterExpr, ContextKeyInExpr, ContextKeyNotEqualsExpr, ContextKeyNotExpr, ContextKeyNotInExpr, ContextKeyRegexExpr, ContextKeySmallerEqualsExpr, ContextKeySmallerExpr, IContextKeyExprMapper } from '../../platform/contextkey/common/contextkey.js';\nimport { IExtensionGalleryService, InstallOptions } from '../../platform/extensionManagement/common/extensionManagement.js';\nimport { ExtensionManagementCLI } from '../../platform/extensionManagement/common/extensionManagementCLI.js';\nimport { IExtensionsScannerService, toExtensionDescription } from '../../platform/extensionManagement/common/extensionsScannerService.js';\nimport { ExtensionType, IExtensionDescription } from '../../platform/extensions/common/extensions.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { IUserDataProfilesService } from '../../platform/userDataProfile/common/userDataProfile.js';\nimport { IServerEnvironmentService } from './serverEnvironmentService.js';\nimport { dedupExtensions } from '../../workbench/services/extensions/common/extensionsUtil.js';\nimport { Schemas } from '../../base/common/network.js';\nimport { IRemoteExtensionsScannerService } from '../../platform/remote/common/remoteExtensionsScanner.js';\nimport { ILanguagePackService } from '../../platform/languagePacks/common/languagePacks.js';\n\nexport class RemoteExtensionsScannerService implements IRemoteExtensionsScannerService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _whenBuiltinExtensionsReady = Promise.resolve();\n\tprivate readonly _whenExtensionsReady = Promise.resolve();\n\n\tconstructor(\n\t\tprivate readonly _extensionManagementCLI: ExtensionManagementCLI,\n\t\tenvironmentService: IServerEnvironmentService,\n\t\tprivate readonly _userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly _extensionsScannerService: IExtensionsScannerService,\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _extensionGalleryService: IExtensionGalleryService,\n\t\tprivate readonly _languagePackService: ILanguagePackService\n\t) {\n\t\tconst builtinExtensionsToInstall = environmentService.args['install-builtin-extension'];\n\t\tif (builtinExtensionsToInstall) {\n\t\t\t_logService.trace('Installing builtin extensions passed via args...');\n\t\t\tconst installOptions: InstallOptions = { isMachineScoped: !!environmentService.args['do-not-sync'], installPreReleaseVersion: !!environmentService.args['pre-release'] };\n\t\t\tperformance.mark('code/server/willInstallBuiltinExtensions');\n\t\t\tthis._whenExtensionsReady = this._whenBuiltinExtensionsReady = _extensionManagementCLI.installExtensions([], this._asExtensionIdOrVSIX(builtinExtensionsToInstall), installOptions, !!environmentService.args['force'])\n\t\t\t\t.then(() => {\n\t\t\t\t\tperformance.mark('code/server/didInstallBuiltinExtensions');\n\t\t\t\t\t_logService.trace('Finished installing builtin extensions');\n\t\t\t\t}, error => {\n\t\t\t\t\t_logService.error(error);\n\t\t\t\t});\n\t\t}\n\n\t\tconst extensionsToInstall = environmentService.args['install-extension'];\n\t\tif (extensionsToInstall) {\n\t\t\t_logService.trace('Installing extensions passed via args...');\n\t\t\tthis._whenExtensionsReady = this._whenBuiltinExtensionsReady\n\t\t\t\t.then(() => _extensionManagementCLI.installExtensions(this._asExtensionIdOrVSIX(extensionsToInstall), [], {\n\t\t\t\t\tisMachineScoped: !!environmentService.args['do-not-sync'],\n\t\t\t\t\tinstallPreReleaseVersion: !!environmentService.args['pre-release'],\n\t\t\t\t\tisApplicationScoped: true // extensions installed during server startup are available to all profiles\n\t\t\t\t}, !!environmentService.args['force']))\n\t\t\t\t.then(() => {\n\t\t\t\t\t_logService.trace('Finished installing extensions');\n\t\t\t\t}, error => {\n\t\t\t\t\t_logService.error(error);\n\t\t\t\t});\n\t\t}\n\t}\n\n\tprivate _asExtensionIdOrVSIX(inputs: string[]): (string | URI)[] {\n\t\treturn inputs.map(input => /\\.vsix$/i.test(input) ? URI.file(isAbsolute(input) ? input : join(cwd(), input)) : input);\n\t}\n\n\twhenExtensionsReady(): Promise<void> {\n\t\treturn this._whenExtensionsReady;\n\t}\n\n\tasync scanExtensions(\n\t\tlanguage?: string,\n\t\tprofileLocation?: URI,\n\t\tworkspaceExtensionLocations?: URI[],\n\t\textensionDevelopmentLocations?: URI[],\n\t\tlanguagePackId?: string\n\t): Promise<IExtensionDescription[]> {\n\t\tperformance.mark('code/server/willScanExtensions');\n\t\tthis._logService.trace(`Scanning extensions using UI language: ${language}`);\n\n\t\tawait this._whenBuiltinExtensionsReady;\n\n\t\tconst extensionDevelopmentPaths = extensionDevelopmentLocations ? extensionDevelopmentLocations.filter(url => url.scheme === Schemas.file).map(url => url.fsPath) : undefined;\n\t\tprofileLocation = profileLocation ?? this._userDataProfilesService.defaultProfile.extensionsResource;\n\n\t\tconst extensions = await this._scanExtensions(profileLocation, language ?? platform.language, workspaceExtensionLocations, extensionDevelopmentPaths, languagePackId);\n\n\t\tthis._logService.trace('Scanned Extensions', extensions);\n\t\tthis._massageWhenConditions(extensions);\n\n\t\tperformance.mark('code/server/didScanExtensions');\n\t\treturn extensions;\n\t}\n\n\tprivate async _scanExtensions(profileLocation: URI, language: string, workspaceInstalledExtensionLocations: URI[] | undefined, extensionDevelopmentPath: string[] | undefined, languagePackId: string | undefined): Promise<IExtensionDescription[]> {\n\t\tawait this._ensureLanguagePackIsInstalled(language, languagePackId);\n\n\t\tconst [builtinExtensions, installedExtensions, workspaceInstalledExtensions, developedExtensions] = await Promise.all([\n\t\t\tthis._scanBuiltinExtensions(language),\n\t\t\tthis._scanInstalledExtensions(profileLocation, language),\n\t\t\tthis._scanWorkspaceInstalledExtensions(language, workspaceInstalledExtensionLocations),\n\t\t\tthis._scanDevelopedExtensions(language, extensionDevelopmentPath)\n\t\t]);\n\n\t\treturn dedupExtensions(builtinExtensions, installedExtensions, workspaceInstalledExtensions, developedExtensions, this._logService);\n\t}\n\n\tprivate async _scanDevelopedExtensions(language: string, extensionDevelopmentPaths?: string[]): Promise<IExtensionDescription[]> {\n\t\tif (extensionDevelopmentPaths) {\n\t\t\treturn (await Promise.all(extensionDevelopmentPaths.map(extensionDevelopmentPath => this._extensionsScannerService.scanOneOrMultipleExtensions(URI.file(resolve(extensionDevelopmentPath)), ExtensionType.User, { language }))))\n\t\t\t\t.flat()\n\t\t\t\t.map(e => toExtensionDescription(e, true));\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async _scanWorkspaceInstalledExtensions(language: string, workspaceInstalledExtensions?: URI[]): Promise<IExtensionDescription[]> {\n\t\tconst result: IExtensionDescription[] = [];\n\t\tif (workspaceInstalledExtensions?.length) {\n\t\t\tconst scannedExtensions = await Promise.all(workspaceInstalledExtensions.map(location => this._extensionsScannerService.scanExistingExtension(location, ExtensionType.User, { language })));\n\t\t\tfor (const scannedExtension of scannedExtensions) {\n\t\t\t\tif (scannedExtension) {\n\t\t\t\t\tresult.push(toExtensionDescription(scannedExtension, false));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _scanBuiltinExtensions(language: string): Promise<IExtensionDescription[]> {\n\t\tconst scannedExtensions = await this._extensionsScannerService.scanSystemExtensions({ language, useCache: true });\n\t\treturn scannedExtensions.map(e => toExtensionDescription(e, false));\n\t}\n\n\tprivate async _scanInstalledExtensions(profileLocation: URI, language: string): Promise<IExtensionDescription[]> {\n\t\tconst scannedExtensions = await this._extensionsScannerService.scanUserExtensions({ profileLocation, language, useCache: true });\n\t\treturn scannedExtensions.map(e => toExtensionDescription(e, false));\n\t}\n\n\tprivate async _ensureLanguagePackIsInstalled(language: string, languagePackId: string | undefined): Promise<void> {\n\t\tif (\n\t\t\t// No need to install language packs for the default language\n\t\t\tlanguage === platform.LANGUAGE_DEFAULT ||\n\t\t\t// The extension gallery service needs to be available\n\t\t\t!this._extensionGalleryService.isEnabled()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst installed = await this._languagePackService.getInstalledLanguages();\n\t\t\tif (installed.find(p => p.id === language)) {\n\t\t\t\tthis._logService.trace(`Language Pack ${language} is already installed. Skipping language pack installation.`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// We tried to see what is installed but failed. We can try installing anyway.\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\tif (!languagePackId) {\n\t\t\tthis._logService.trace(`No language pack id provided for language ${language}. Skipping language pack installation.`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.trace(`Language Pack ${languagePackId} for language ${language} is not installed. It will be installed now.`);\n\t\ttry {\n\t\t\tawait this._extensionManagementCLI.installExtensions([languagePackId], [], { isMachineScoped: true }, true);\n\t\t} catch (err) {\n\t\t\t// We tried to install the language pack but failed. We can continue without it thus using the default language.\n\t\t\tthis._logService.error(err);\n\t\t}\n\t}\n\n\tprivate _massageWhenConditions(extensions: IExtensionDescription[]): void {\n\t\t// Massage \"when\" conditions which mention `resourceScheme`\n\n\t\tinterface WhenUser { when?: string }\n\n\t\tinterface LocWhenUser { [loc: string]: WhenUser[] }\n\n\t\tconst _mapResourceSchemeValue = (value: string, isRegex: boolean): string => {\n\t\t\t// console.log(`_mapResourceSchemeValue: ${value}, ${isRegex}`);\n\t\t\treturn value.replace(/file/g, 'vscode-remote');\n\t\t};\n\n\t\tconst _mapResourceRegExpValue = (value: RegExp): RegExp => {\n\t\t\tlet flags = '';\n\t\t\tflags += value.global ? 'g' : '';\n\t\t\tflags += value.ignoreCase ? 'i' : '';\n\t\t\tflags += value.multiline ? 'm' : '';\n\t\t\treturn new RegExp(_mapResourceSchemeValue(value.source, true), flags);\n\t\t};\n\n\t\tconst _exprKeyMapper = new class implements IContextKeyExprMapper {\n\t\t\tmapDefined(key: string): ContextKeyExpression {\n\t\t\t\treturn ContextKeyDefinedExpr.create(key);\n\t\t\t}\n\t\t\tmapNot(key: string): ContextKeyExpression {\n\t\t\t\treturn ContextKeyNotExpr.create(key);\n\t\t\t}\n\t\t\tmapEquals(key: string, value: any): ContextKeyExpression {\n\t\t\t\tif (key === 'resourceScheme' && typeof value === 'string') {\n\t\t\t\t\treturn ContextKeyEqualsExpr.create(key, _mapResourceSchemeValue(value, false));\n\t\t\t\t} else {\n\t\t\t\t\treturn ContextKeyEqualsExpr.create(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmapNotEquals(key: string, value: any): ContextKeyExpression {\n\t\t\t\tif (key === 'resourceScheme' && typeof value === 'string') {\n\t\t\t\t\treturn ContextKeyNotEqualsExpr.create(key, _mapResourceSchemeValue(value, false));\n\t\t\t\t} else {\n\t\t\t\t\treturn ContextKeyNotEqualsExpr.create(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmapGreater(key: string, value: any): ContextKeyExpression {\n\t\t\t\treturn ContextKeyGreaterExpr.create(key, value);\n\t\t\t}\n\t\t\tmapGreaterEquals(key: string, value: any): ContextKeyExpression {\n\t\t\t\treturn ContextKeyGreaterEqualsExpr.create(key, value);\n\t\t\t}\n\t\t\tmapSmaller(key: string, value: any): ContextKeyExpression {\n\t\t\t\treturn ContextKeySmallerExpr.create(key, value);\n\t\t\t}\n\t\t\tmapSmallerEquals(key: string, value: any): ContextKeyExpression {\n\t\t\t\treturn ContextKeySmallerEqualsExpr.create(key, value);\n\t\t\t}\n\t\t\tmapRegex(key: string, regexp: RegExp | null): ContextKeyRegexExpr {\n\t\t\t\tif (key === 'resourceScheme' && regexp) {\n\t\t\t\t\treturn ContextKeyRegexExpr.create(key, _mapResourceRegExpValue(regexp));\n\t\t\t\t} else {\n\t\t\t\t\treturn ContextKeyRegexExpr.create(key, regexp);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmapIn(key: string, valueKey: string): ContextKeyInExpr {\n\t\t\t\treturn ContextKeyInExpr.create(key, valueKey);\n\t\t\t}\n\t\t\tmapNotIn(key: string, valueKey: string): ContextKeyNotInExpr {\n\t\t\t\treturn ContextKeyNotInExpr.create(key, valueKey);\n\t\t\t}\n\t\t};\n\n\t\tconst _massageWhenUser = (element: WhenUser) => {\n\t\t\tif (!element || !element.when || !/resourceScheme/.test(element.when)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst expr = ContextKeyExpr.deserialize(element.when);\n\t\t\tif (!expr) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst massaged = expr.map(_exprKeyMapper);\n\t\t\telement.when = massaged.serialize();\n\t\t};\n\n\t\tconst _massageWhenUserArr = (elements: WhenUser[] | WhenUser) => {\n\t\t\tif (Array.isArray(elements)) {\n\t\t\t\tfor (const element of elements) {\n\t\t\t\t\t_massageWhenUser(element);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_massageWhenUser(elements);\n\t\t\t}\n\t\t};\n\n\t\tconst _massageLocWhenUser = (target: LocWhenUser) => {\n\t\t\tfor (const loc in target) {\n\t\t\t\t_massageWhenUserArr(target[loc]);\n\t\t\t}\n\t\t};\n\n\t\textensions.forEach((extension) => {\n\t\t\tif (extension.contributes) {\n\t\t\t\tif (extension.contributes.menus) {\n\t\t\t\t\t_massageLocWhenUser(<LocWhenUser>extension.contributes.menus);\n\t\t\t\t}\n\t\t\t\tif (extension.contributes.keybindings) {\n\t\t\t\t\t_massageWhenUserArr(<WhenUser | WhenUser[]>extension.contributes.keybindings);\n\t\t\t\t}\n\t\t\t\tif (extension.contributes.views) {\n\t\t\t\t\t_massageLocWhenUser(<LocWhenUser>extension.contributes.views);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class RemoteExtensionsScannerChannel implements IServerChannel {\n\n\tconstructor(private service: RemoteExtensionsScannerService, private getUriTransformer: (requestContext: any) => IURITransformer) { }\n\n\tlisten(context: any, event: string): Event<any> {\n\t\tthrow new Error('Invalid listen');\n\t}\n\n\tasync call(context: any, command: string, args?: any): Promise<any> {\n\t\tconst uriTransformer = this.getUriTransformer(context);\n\t\tswitch (command) {\n\t\t\tcase 'whenExtensionsReady': return this.service.whenExtensionsReady();\n\t\t\tcase 'scanExtensions': {\n\t\t\t\tconst language = args[0];\n\t\t\t\tconst profileLocation = args[1] ? URI.revive(uriTransformer.transformIncoming(args[1])) : undefined;\n\t\t\t\tconst workspaceExtensionLocations = Array.isArray(args[2]) ? args[2].map(u => URI.revive(uriTransformer.transformIncoming(u))) : undefined;\n\t\t\t\tconst extensionDevelopmentPath = Array.isArray(args[3]) ? args[3].map(u => URI.revive(uriTransformer.transformIncoming(u))) : undefined;\n\t\t\t\tconst languagePackId: string | undefined = args[4];\n\t\t\t\tconst extensions = await this.service.scanExtensions(\n\t\t\t\t\tlanguage,\n\t\t\t\t\tprofileLocation,\n\t\t\t\t\tworkspaceExtensionLocations,\n\t\t\t\t\textensionDevelopmentPath,\n\t\t\t\t\tlanguagePackId\n\t\t\t\t);\n\t\t\t\treturn extensions.map(extension => transformOutgoingURIs(extension, uriTransformer));\n\t\t\t}\n\t\t}\n\t\tthrow new Error('Invalid call');\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
