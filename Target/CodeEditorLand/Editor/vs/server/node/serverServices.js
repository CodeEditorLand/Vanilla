import{hostname as ne,release as oe}from"os";import{Emitter as ie}from"../../base/common/event.js";import{toDisposable as se}from"../../base/common/lifecycle.js";import{Schemas as $}from"../../base/common/network.js";import*as x from"../../base/common/path.js";import"../../base/common/uriIpc.js";import{getMachineId as me,getSqmMachineId as ae,getdevDeviceId as ce}from"../../base/node/id.js";import{Promises as k}from"../../base/node/pfs.js";import{IPCServer as le,StaticRouter as ge}from"../../base/parts/ipc/common/ipc.js";import{ProtocolConstants as M}from"../../base/parts/ipc/common/ipc.net.js";import{IConfigurationService as ve}from"../../platform/configuration/common/configuration.js";import{ConfigurationService as fe}from"../../platform/configuration/common/configurationService.js";import{ExtensionHostDebugBroadcastChannel as H}from"../../platform/debug/common/extensionHostDebugIpc.js";import{IDownloadService as Se}from"../../platform/download/common/download.js";import{DownloadServiceChannelClient as pe}from"../../platform/download/common/downloadIpc.js";import{IEnvironmentService as de,INativeEnvironmentService as Ce}from"../../platform/environment/common/environment.js";import{ExtensionGalleryServiceWithNoStorageService as ue}from"../../platform/extensionManagement/common/extensionGalleryService.js";import{IExtensionGalleryService as U}from"../../platform/extensionManagement/common/extensionManagement.js";import{ExtensionSignatureVerificationService as he,IExtensionSignatureVerificationService as we}from"../../platform/extensionManagement/node/extensionSignatureVerificationService.js";import{ExtensionManagementCLI as Ie}from"../../platform/extensionManagement/common/extensionManagementCLI.js";import{ExtensionManagementChannel as Ee}from"../../platform/extensionManagement/common/extensionManagementIpc.js";import{ExtensionManagementService as xe,INativeServerExtensionManagementService as _}from"../../platform/extensionManagement/node/extensionManagementService.js";import{IFileService as ye}from"../../platform/files/common/files.js";import{FileService as Le}from"../../platform/files/common/fileService.js";import{DiskFileSystemProvider as Te}from"../../platform/files/node/diskFileSystemProvider.js";import{SyncDescriptor as v}from"../../platform/instantiation/common/descriptors.js";import"../../platform/instantiation/common/instantiation.js";import{InstantiationService as Pe}from"../../platform/instantiation/common/instantiationService.js";import{ServiceCollection as Re}from"../../platform/instantiation/common/serviceCollection.js";import{ILanguagePackService as G}from"../../platform/languagePacks/common/languagePacks.js";import{NativeLanguagePackService as Ae}from"../../platform/languagePacks/node/languagePacks.js";import{AbstractLogger as De,DEFAULT_LOG_LEVEL as be,getLogLevel as F,ILoggerService as Ne,ILogService as $e,log as ke,LogLevel as C,LogLevelToString as Me}from"../../platform/log/common/log.js";import He from"../../platform/product/common/product.js";import{IProductService as Ue}from"../../platform/product/common/productService.js";import"../../platform/remote/common/remoteAgentEnvironment.js";import{IRequestService as O}from"../../platform/request/common/request.js";import{RequestChannel as _e}from"../../platform/request/common/requestIpc.js";import{RequestService as Ge}from"../../platform/request/node/requestService.js";import{resolveCommonProperties as Fe}from"../../platform/telemetry/common/commonProperties.js";import{ITelemetryService as q,TelemetryLevel as u}from"../../platform/telemetry/common/telemetry.js";import"../../platform/telemetry/common/telemetryService.js";import{getPiiPathsFromEnvironment as Oe,isInternalTelemetry as qe,isLoggingOnly as je,NullAppender as Ve,supportsTelemetry as Be}from"../../platform/telemetry/common/telemetryUtils.js";import ze from"../../platform/telemetry/node/errorTelemetry.js";import{IPtyService as Ke,TerminalSettingId as We}from"../../platform/terminal/common/terminal.js";import{PtyHostService as Ye}from"../../platform/terminal/node/ptyHostService.js";import{IUriIdentityService as Je}from"../../platform/uriIdentity/common/uriIdentity.js";import{UriIdentityService as Qe}from"../../platform/uriIdentity/common/uriIdentityService.js";import{RemoteAgentEnvironmentChannel as Xe}from"./remoteAgentEnvironmentImpl.js";import{RemoteAgentFileSystemProviderChannel as Ze}from"./remoteFileSystemProviderServer.js";import{ServerTelemetryChannel as er}from"../../platform/telemetry/common/remoteTelemetryChannel.js";import{IServerTelemetryService as y,ServerNullTelemetryService as rr,ServerTelemetryService as tr}from"../../platform/telemetry/common/serverTelemetryService.js";import{RemoteTerminalChannel as nr}from"./remoteTerminalChannel.js";import{createURITransformer as or}from"../../workbench/api/node/uriTransformer.js";import"./serverConnectionToken.js";import{ServerEnvironmentService as ir}from"./serverEnvironmentService.js";import{REMOTE_TERMINAL_CHANNEL_NAME as sr}from"../../workbench/contrib/terminal/common/remote/remoteTerminalChannel.js";import{REMOTE_FILE_SYSTEM_CHANNEL_NAME as mr}from"../../workbench/services/remote/common/remoteFileSystemProviderClient.js";import{ExtensionHostStatusService as ar,IExtensionHostStatusService as cr}from"./extensionHostStatusService.js";import{IExtensionsScannerService as j}from"../../platform/extensionManagement/common/extensionsScannerService.js";import{ExtensionsScannerService as lr}from"./extensionsScannerService.js";import{IExtensionsProfileScannerService as gr}from"../../platform/extensionManagement/common/extensionsProfileScannerService.js";import{IUserDataProfilesService as vr}from"../../platform/userDataProfile/common/userDataProfile.js";import{NullPolicyService as fr}from"../../platform/policy/common/policy.js";import{OneDataSystemAppender as Sr}from"../../platform/telemetry/node/1dsAppender.js";import{LoggerService as pr}from"../../platform/log/node/loggerService.js";import{ServerUserDataProfilesService as dr}from"../../platform/userDataProfile/node/userDataProfile.js";import{ExtensionsProfileScannerService as Cr}from"../../platform/extensionManagement/node/extensionsProfileScannerService.js";import{LogService as ur}from"../../platform/log/common/logService.js";import{LoggerChannel as hr}from"../../platform/log/common/logIpc.js";import{localize as wr}from"../../nls.js";import{RemoteExtensionsScannerChannel as Ir,RemoteExtensionsScannerService as Er}from"./remoteExtensionsScanner.js";import{RemoteExtensionsScannerChannelName as xr}from"../../platform/remote/common/remoteExtensionsScanner.js";import{RemoteUserDataProfilesServiceChannel as yr}from"../../platform/userDataProfile/common/userDataProfileIpc.js";import{NodePtyHostStarter as Lr}from"../../platform/terminal/node/nodePtyHostStarter.js";import{CSSDevelopmentService as Tr,ICSSDevelopmentService as Pr}from"../../platform/cssDev/node/cssDevService.js";const Rr="monacoworkbench";async function ln(o,i,a,f){const e=new Re,s=new Ar,m={_serviceBrand:void 0,...He};e.set(Ue,m);const r=new ir(i,m);e.set(de,r),e.set(Ce,r);const I=new pr(F(r),r.logsHome);e.set(Ne,I),s.registerChannel("logger",new hr(I,n=>h(n.remoteAuthority)));const V=I.createLogger("remoteagent",{name:wr("remoteExtensionLog","Server")}),t=new ur(V,[new Dr(F(r))]);e.set($e,t),setTimeout(()=>br(r.logsHome.with({scheme:$.file}).fsPath).then(null,n=>t.error(n)),1e4),t.onDidChangeLogLevel(n=>ke(t,n,`Log level changed to ${Me(t.getLevel())}`)),t.trace(`Remote configuration data at ${a}`),t.trace("process arguments:",r.args),Array.isArray(m.serverGreeting)&&t.info(`

${m.serverGreeting.join(`
`)}

`),s.registerChannel(H.ChannelName,new H);const B=new ge(n=>n.clientId==="renderer"),p=f.add(new Le(t));e.set(ye,p),p.registerProvider($.file,f.add(new Te(t)));const P=new Qe(p);e.set(Je,P);const l=new fe(r.machineSettingsResource,p,new fr,t);e.set(ve,l);const d=new dr(P,r,p,t);e.set(vr,d),s.registerChannel("userDataProfiles",new yr(d,n=>h(n.remoteAuthority))),e.set(Pr,new v(Tr,void 0,!0));const[,,z,K,W]=await Promise.all([l.initialize(),d.init(),me(t.error.bind(t)),ae(t.error.bind(t)),ce(t.error.bind(t))]),R=new ar;e.set(cr,R);const A=new Ge(l,r,t);e.set(O,A);let w=Ve;const D=qe(m,l);if(Be(m,r)){!je(m,r)&&m.aiConfig?.ariaKey&&(w=new Sr(A,D,Rr,null,m.aiConfig.ariaKey),f.add(se(()=>w?.flush())));const n={appenders:[w],commonProperties:Fe(oe(),ne(),process.arch,m.commit,m.version+"-remote",z,K,W,D,"remoteAgent"),piiPaths:Oe(r)},c=r.args["telemetry-level"];let g=u.USAGE;c==="all"?g=u.USAGE:c==="error"?g=u.ERROR:c==="crash"?g=u.CRASH:c!==void 0&&(g=u.NONE),e.set(y,new v(tr,[n,g]))}else e.set(y,rr);e.set(U,new v(ue));const Y=s.getChannel("download",B);e.set(Se,new pe(Y,()=>h("renderer"))),e.set(gr,new v(Cr)),e.set(j,new v(lr)),e.set(we,new v(he)),e.set(_,new v(xe));const S=new Pe(e);e.set(G,S.createInstance(Ae));const J=S.createInstance(Lr,{graceTime:M.ReconnectionGraceTime,shortGraceTime:M.ReconnectionShortGraceTime,scrollback:l.getValue(We.PersistentSessionScrollback)??100}),b=S.createInstance(Ye,J);return e.set(Ke,b),S.invokeFunction(n=>{const c=n.get(_),g=n.get(j),Q=n.get(U),X=n.get(G),Z=new Xe(o,r,d,R);s.registerChannel("remoteextensionsenvironment",Z);const ee=new er(n.get(y),w);s.registerChannel("telemetry",ee),s.registerChannel(sr,new nr(r,t,b,m,c,l));const N=new Er(S.createInstance(Ie,t),r,d,g,t,Q,X);s.registerChannel(xr,new Ir(N,E=>h(E.remoteAuthority)));const re=f.add(new Ze(t,r,l));s.registerChannel(mr,re),s.registerChannel("request",new _e(n.get(O)));const te=new Ee(c,E=>h(E.remoteAuthority));return s.registerChannel("extensions",te),N.whenExtensionsReady().then(()=>c.cleanUp()),f.add(new ze(n.get(q))),{telemetryService:n.get(q)}}),{socketServer:s,instantiationService:S}}const L=Object.create(null);function h(o){return L[o]||(L[o]=or(o)),L[o]}class Ar extends le{_onDidConnectEmitter;constructor(){const i=new ie;super(i.event),this._onDidConnectEmitter=i}acceptConnection(i,a){this._onDidConnectEmitter.fire({protocol:i,onDidClientDisconnect:a})}}class Dr extends De{useColors;constructor(i=be){super(),this.setLevel(i),this.useColors=!!process.stdout.isTTY}trace(i,...a){this.checkLogLevel(C.Trace)&&this.useColors}debug(i,...a){this.checkLogLevel(C.Debug)&&this.useColors}info(i,...a){this.checkLogLevel(C.Info)&&this.useColors}warn(i,...a){this.checkLogLevel(C.Warning)&&this.useColors}error(i,...a){this.checkLogLevel(C.Error)&&this.useColors}flush(){}}function gn(){const o=new Date;return`${T(o.getHours())}:${T(o.getMinutes())}:${T(o.getSeconds())}`}function T(o){return o<10?`0${o}`:String(o)}async function br(o){const i=x.basename(o),a=x.dirname(o),s=(await k.readdir(a)).filter(r=>/^\d{8}T\d{6}$/.test(r)).sort().filter(r=>r!==i),m=s.slice(0,Math.max(0,s.length-9));await Promise.all(m.map(r=>k.rm(x.join(a,r))))}export{Ar as SocketServer,ln as setupServerServices};
