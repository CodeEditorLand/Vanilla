{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/extensionHostConnection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport * as net from 'net';\nimport { VSBuffer } from '../../base/common/buffer.js';\nimport { Emitter, Event } from '../../base/common/event.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../base/common/lifecycle.js';\nimport { FileAccess } from '../../base/common/network.js';\nimport { delimiter, join } from '../../base/common/path.js';\nimport { IProcessEnvironment, isWindows } from '../../base/common/platform.js';\nimport { removeDangerousEnvVariables } from '../../base/common/processes.js';\nimport { createRandomIPCHandle, NodeSocket, WebSocketNodeSocket } from '../../base/parts/ipc/node/ipc.net.js';\nimport { IConfigurationService } from '../../platform/configuration/common/configuration.js';\nimport { ILogService } from '../../platform/log/common/log.js';\nimport { IRemoteExtensionHostStartParams } from '../../platform/remote/common/remoteAgentConnection.js';\nimport { getResolvedShellEnv } from '../../platform/shell/node/shellEnv.js';\nimport { IExtensionHostStatusService } from './extensionHostStatusService.js';\nimport { getNLSConfiguration } from './remoteLanguagePacks.js';\nimport { IServerEnvironmentService } from './serverEnvironmentService.js';\nimport { IPCExtHostConnection, SocketExtHostConnection, writeExtHostConnection } from '../../workbench/services/extensions/common/extensionHostEnv.js';\nimport { IExtHostReadyMessage, IExtHostReduceGraceTimeMessage, IExtHostSocketMessage } from '../../workbench/services/extensions/common/extensionHostProtocol.js';\n\nexport async function buildUserEnvironment(startParamsEnv: { [key: string]: string | null } = {}, withUserShellEnvironment: boolean, language: string, environmentService: IServerEnvironmentService, logService: ILogService, configurationService: IConfigurationService): Promise<IProcessEnvironment> {\n\tconst nlsConfig = await getNLSConfiguration(language, environmentService.userDataPath);\n\n\tlet userShellEnv: typeof process.env = {};\n\tif (withUserShellEnvironment) {\n\t\ttry {\n\t\t\tuserShellEnv = await getResolvedShellEnv(configurationService, logService, environmentService.args, process.env);\n\t\t} catch (error) {\n\t\t\tlogService.error('ExtensionHostConnection#buildUserEnvironment resolving shell environment failed', error);\n\t\t}\n\t}\n\n\tconst processEnv = process.env;\n\n\tconst env: IProcessEnvironment = {\n\t\t...processEnv,\n\t\t...userShellEnv,\n\t\t...{\n\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/api/node/extensionHostProcess',\n\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: 'true',\n\t\t\tVSCODE_NLS_CONFIG: JSON.stringify(nlsConfig)\n\t\t},\n\t\t...startParamsEnv\n\t};\n\n\tconst binFolder = environmentService.isBuilt ? join(environmentService.appRoot, 'bin') : join(environmentService.appRoot, 'resources', 'server', 'bin-dev');\n\tconst remoteCliBinFolder = join(binFolder, 'remote-cli'); // contains the `code` command that can talk to the remote server\n\n\tlet PATH = readCaseInsensitive(env, 'PATH');\n\tif (PATH) {\n\t\tPATH = remoteCliBinFolder + delimiter + PATH;\n\t} else {\n\t\tPATH = remoteCliBinFolder;\n\t}\n\tsetCaseInsensitive(env, 'PATH', PATH);\n\n\tif (!environmentService.args['without-browser-env-var']) {\n\t\tenv.BROWSER = join(binFolder, 'helpers', isWindows ? 'browser.cmd' : 'browser.sh'); // a command that opens a browser on the local machine\n\t}\n\n\tremoveNulls(env);\n\treturn env;\n}\n\nclass ConnectionData {\n\tconstructor(\n\t\tpublic readonly socket: NodeSocket | WebSocketNodeSocket,\n\t\tpublic readonly initialDataChunk: VSBuffer\n\t) { }\n\n\tpublic socketDrain(): Promise<void> {\n\t\treturn this.socket.drain();\n\t}\n\n\tpublic toIExtHostSocketMessage(): IExtHostSocketMessage {\n\n\t\tlet skipWebSocketFrames: boolean;\n\t\tlet permessageDeflate: boolean;\n\t\tlet inflateBytes: VSBuffer;\n\n\t\tif (this.socket instanceof NodeSocket) {\n\t\t\tskipWebSocketFrames = true;\n\t\t\tpermessageDeflate = false;\n\t\t\tinflateBytes = VSBuffer.alloc(0);\n\t\t} else {\n\t\t\tskipWebSocketFrames = false;\n\t\t\tpermessageDeflate = this.socket.permessageDeflate;\n\t\t\tinflateBytes = this.socket.recordedInflateBytes;\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'VSCODE_EXTHOST_IPC_SOCKET',\n\t\t\tinitialDataChunk: (<Buffer>this.initialDataChunk.buffer).toString('base64'),\n\t\t\tskipWebSocketFrames: skipWebSocketFrames,\n\t\t\tpermessageDeflate: permessageDeflate,\n\t\t\tinflateBytes: (<Buffer>inflateBytes.buffer).toString('base64'),\n\t\t};\n\t}\n}\n\nexport class ExtensionHostConnection extends Disposable {\n\n\tprivate _onClose = new Emitter<void>();\n\treadonly onClose: Event<void> = this._onClose.event;\n\n\tprivate readonly _canSendSocket: boolean;\n\tprivate _disposed: boolean;\n\tprivate _remoteAddress: string;\n\tprivate _extensionHostProcess: cp.ChildProcess | null;\n\tprivate _connectionData: ConnectionData | null;\n\n\tconstructor(\n\t\tprivate readonly _reconnectionToken: string,\n\t\tremoteAddress: string,\n\t\tsocket: NodeSocket | WebSocketNodeSocket,\n\t\tinitialDataChunk: VSBuffer,\n\t\t@IServerEnvironmentService private readonly _environmentService: IServerEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionHostStatusService private readonly _extensionHostStatusService: IExtensionHostStatusService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._canSendSocket = (!isWindows || !this._environmentService.args['socket-path']);\n\t\tthis._disposed = false;\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._connectionData = new ConnectionData(socket, initialDataChunk);\n\n\t\tthis._log(`New connection established.`);\n\t}\n\n\toverride dispose(): void {\n\t\tthis._cleanResources();\n\t\tsuper.dispose();\n\t}\n\n\tprivate get _logPrefix(): string {\n\t\treturn `[${this._remoteAddress}][${this._reconnectionToken.substr(0, 8)}][ExtensionHostConnection] `;\n\t}\n\n\tprivate _log(_str: string): void {\n\t\tthis._logService.info(`${this._logPrefix}${_str}`);\n\t}\n\n\tprivate _logError(_str: string): void {\n\t\tthis._logService.error(`${this._logPrefix}${_str}`);\n\t}\n\n\tprivate async _pipeSockets(extHostSocket: net.Socket, connectionData: ConnectionData): Promise<void> {\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(connectionData.socket);\n\t\tdisposables.add(toDisposable(() => {\n\t\t\textHostSocket.destroy();\n\t\t}));\n\n\t\tconst stopAndCleanup = () => {\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(connectionData.socket.onEnd(stopAndCleanup));\n\t\tdisposables.add(connectionData.socket.onClose(stopAndCleanup));\n\n\t\tdisposables.add(Event.fromNodeEventEmitter<void>(extHostSocket, 'end')(stopAndCleanup));\n\t\tdisposables.add(Event.fromNodeEventEmitter<void>(extHostSocket, 'close')(stopAndCleanup));\n\t\tdisposables.add(Event.fromNodeEventEmitter<void>(extHostSocket, 'error')(stopAndCleanup));\n\n\t\tdisposables.add(connectionData.socket.onData((e) => extHostSocket.write(e.buffer)));\n\t\tdisposables.add(Event.fromNodeEventEmitter<Buffer>(extHostSocket, 'data')((e) => {\n\t\t\tconnectionData.socket.write(VSBuffer.wrap(e));\n\t\t}));\n\n\t\tif (connectionData.initialDataChunk.byteLength > 0) {\n\t\t\textHostSocket.write(connectionData.initialDataChunk.buffer);\n\t\t}\n\t}\n\n\tprivate async _sendSocketToExtensionHost(extensionHostProcess: cp.ChildProcess, connectionData: ConnectionData): Promise<void> {\n\t\t// Make sure all outstanding writes have been drained before sending the socket\n\t\tawait connectionData.socketDrain();\n\t\tconst msg = connectionData.toIExtHostSocketMessage();\n\t\tlet socket: net.Socket;\n\t\tif (connectionData.socket instanceof NodeSocket) {\n\t\t\tsocket = connectionData.socket.socket;\n\t\t} else {\n\t\t\tsocket = connectionData.socket.socket.socket;\n\t\t}\n\t\textensionHostProcess.send(msg, socket);\n\t}\n\n\tpublic shortenReconnectionGraceTimeIfNecessary(): void {\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg: IExtHostReduceGraceTimeMessage = {\n\t\t\ttype: 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME'\n\t\t};\n\t\tthis._extensionHostProcess.send(msg);\n\t}\n\n\tpublic acceptReconnection(remoteAddress: string, _socket: NodeSocket | WebSocketNodeSocket, initialDataChunk: VSBuffer): void {\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._log(`The client has reconnected.`);\n\t\tconst connectionData = new ConnectionData(_socket, initialDataChunk);\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\t// The extension host didn't even start up yet\n\t\t\tthis._connectionData = connectionData;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._sendSocketToExtensionHost(this._extensionHostProcess, connectionData);\n\t}\n\n\tprivate _cleanResources(): void {\n\t\tif (this._disposed) {\n\t\t\t// already called\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\t\tif (this._connectionData) {\n\t\t\tthis._connectionData.socket.end();\n\t\t\tthis._connectionData = null;\n\t\t}\n\t\tif (this._extensionHostProcess) {\n\t\t\tthis._extensionHostProcess.kill();\n\t\t\tthis._extensionHostProcess = null;\n\t\t}\n\t\tthis._onClose.fire(undefined);\n\t}\n\n\tpublic async start(startParams: IRemoteExtensionHostStartParams): Promise<void> {\n\t\ttry {\n\t\t\tlet execArgv: string[] = process.execArgv ? process.execArgv.filter(a => !/^--inspect(-brk)?=/.test(a)) : [];\n\t\t\tif (startParams.port && !(<any>process).pkg) {\n\t\t\t\texecArgv = [`--inspect${startParams.break ? '-brk' : ''}=${startParams.port}`];\n\t\t\t}\n\n\t\t\tconst env = await buildUserEnvironment(startParams.env, true, startParams.language, this._environmentService, this._logService, this._configurationService);\n\t\t\tremoveDangerousEnvVariables(env);\n\n\t\t\tlet extHostNamedPipeServer: net.Server | null;\n\n\t\t\tif (this._canSendSocket) {\n\t\t\t\twriteExtHostConnection(new SocketExtHostConnection(), env);\n\t\t\t\textHostNamedPipeServer = null;\n\t\t\t} else {\n\t\t\t\tconst { namedPipeServer, pipeName } = await this._listenOnPipe();\n\t\t\t\twriteExtHostConnection(new IPCExtHostConnection(pipeName), env);\n\t\t\t\textHostNamedPipeServer = namedPipeServer;\n\t\t\t}\n\n\t\t\tconst opts = {\n\t\t\t\tenv,\n\t\t\t\texecArgv,\n\t\t\t\tsilent: true\n\t\t\t};\n\n\t\t\t// Refs https://github.com/microsoft/vscode/issues/189805\n\t\t\topts.execArgv.unshift('--dns-result-order=ipv4first');\n\n\t\t\t// Run Extension Host as fork of current process\n\t\t\tconst args = ['--type=extensionHost', `--transformURIs`];\n\t\t\tconst useHostProxy = this._environmentService.args['use-host-proxy'];\n\t\t\targs.push(`--useHostProxy=${useHostProxy ? 'true' : 'false'}`);\n\t\t\tthis._extensionHostProcess = cp.fork(FileAccess.asFileUri('bootstrap-fork').fsPath, args, opts);\n\t\t\tconst pid = this._extensionHostProcess.pid;\n\t\t\tthis._log(`<${pid}> Launched Extension Host Process.`);\n\n\t\t\t// Catch all output coming from the extension host process\n\t\t\tthis._extensionHostProcess.stdout!.setEncoding('utf8');\n\t\t\tthis._extensionHostProcess.stderr!.setEncoding('utf8');\n\t\t\tconst onStdout = Event.fromNodeEventEmitter<string>(this._extensionHostProcess.stdout!, 'data');\n\t\t\tconst onStderr = Event.fromNodeEventEmitter<string>(this._extensionHostProcess.stderr!, 'data');\n\t\t\tthis._register(onStdout((e) => this._log(`<${pid}> ${e}`)));\n\t\t\tthis._register(onStderr((e) => this._log(`<${pid}><stderr> ${e}`)));\n\n\t\t\t// Lifecycle\n\t\t\tthis._extensionHostProcess.on('error', (err) => {\n\t\t\t\tthis._logError(`<${pid}> Extension Host Process had an error`);\n\t\t\t\tthis._logService.error(err);\n\t\t\t\tthis._cleanResources();\n\t\t\t});\n\n\t\t\tthis._extensionHostProcess.on('exit', (code: number, signal: string) => {\n\t\t\t\tthis._extensionHostStatusService.setExitInfo(this._reconnectionToken, { code, signal });\n\t\t\t\tthis._log(`<${pid}> Extension Host Process exited with code: ${code}, signal: ${signal}.`);\n\t\t\t\tthis._cleanResources();\n\t\t\t});\n\n\t\t\tif (extHostNamedPipeServer) {\n\t\t\t\textHostNamedPipeServer.on('connection', (socket) => {\n\t\t\t\t\textHostNamedPipeServer.close();\n\t\t\t\t\tthis._pipeSockets(socket, this._connectionData!);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst messageListener = (msg: IExtHostReadyMessage) => {\n\t\t\t\t\tif (msg.type === 'VSCODE_EXTHOST_IPC_READY') {\n\t\t\t\t\t\tthis._extensionHostProcess!.removeListener('message', messageListener);\n\t\t\t\t\t\tthis._sendSocketToExtensionHost(this._extensionHostProcess!, this._connectionData!);\n\t\t\t\t\t\tthis._connectionData = null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis._extensionHostProcess.on('message', messageListener);\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.error('ExtensionHostConnection errored');\n\t\t\tif (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _listenOnPipe(): Promise<{ pipeName: string; namedPipeServer: net.Server }> {\n\t\treturn new Promise<{ pipeName: string; namedPipeServer: net.Server }>((resolve, reject) => {\n\t\t\tconst pipeName = createRandomIPCHandle();\n\n\t\t\tconst namedPipeServer = net.createServer();\n\t\t\tnamedPipeServer.on('error', reject);\n\t\t\tnamedPipeServer.listen(pipeName, () => {\n\t\t\t\tnamedPipeServer?.removeListener('error', reject);\n\t\t\t\tresolve({ pipeName, namedPipeServer });\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction readCaseInsensitive(env: { [key: string]: string | undefined }, key: string): string | undefined {\n\tconst pathKeys = Object.keys(env).filter(k => k.toLowerCase() === key.toLowerCase());\n\tconst pathKey = pathKeys.length > 0 ? pathKeys[0] : key;\n\treturn env[pathKey];\n}\n\nfunction setCaseInsensitive(env: { [key: string]: unknown }, key: string, value: string): void {\n\tconst pathKeys = Object.keys(env).filter(k => k.toLowerCase() === key.toLowerCase());\n\tconst pathKey = pathKeys.length > 0 ? pathKeys[0] : key;\n\tenv[pathKey] = value;\n}\n\nfunction removeNulls(env: { [key: string]: unknown | null }): void {\n\t// Don't delete while iterating the object itself\n\tfor (const key of Object.keys(env)) {\n\t\tif (env[key] === null) {\n\t\t\tdelete env[key];\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
