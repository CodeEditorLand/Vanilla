{
  "version": 3,
  "sources": ["../../../../../../Dependency/CodeEditorLand/Editor/Source/vs/server/node/extensionHostConnection.ts"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from \"child_process\";\nimport * as net from \"net\";\nimport { VSBuffer } from \"../../base/common/buffer.js\";\nimport { Emitter, Event } from \"../../base/common/event.js\";\nimport {\n\tDisposable,\n\tDisposableStore,\n\ttoDisposable,\n} from \"../../base/common/lifecycle.js\";\nimport { FileAccess } from \"../../base/common/network.js\";\nimport { delimiter, join } from \"../../base/common/path.js\";\nimport {\n\ttype IProcessEnvironment,\n\tisWindows,\n} from \"../../base/common/platform.js\";\nimport { removeDangerousEnvVariables } from \"../../base/common/processes.js\";\nimport {\n\tNodeSocket,\n\ttype WebSocketNodeSocket,\n\tcreateRandomIPCHandle,\n} from \"../../base/parts/ipc/node/ipc.net.js\";\nimport { IConfigurationService } from \"../../platform/configuration/common/configuration.js\";\nimport { ILogService } from \"../../platform/log/common/log.js\";\nimport type { IRemoteExtensionHostStartParams } from \"../../platform/remote/common/remoteAgentConnection.js\";\nimport { getResolvedShellEnv } from \"../../platform/shell/node/shellEnv.js\";\nimport {\n\tIPCExtHostConnection,\n\tSocketExtHostConnection,\n\twriteExtHostConnection,\n} from \"../../workbench/services/extensions/common/extensionHostEnv.js\";\nimport type {\n\tIExtHostReadyMessage,\n\tIExtHostReduceGraceTimeMessage,\n\tIExtHostSocketMessage,\n} from \"../../workbench/services/extensions/common/extensionHostProtocol.js\";\nimport { IExtensionHostStatusService } from \"./extensionHostStatusService.js\";\nimport { getNLSConfiguration } from \"./remoteLanguagePacks.js\";\nimport { IServerEnvironmentService } from \"./serverEnvironmentService.js\";\n\nexport async function buildUserEnvironment(\n\tstartParamsEnv: { [key: string]: string | null } = {},\n\twithUserShellEnvironment: boolean,\n\tlanguage: string,\n\tenvironmentService: IServerEnvironmentService,\n\tlogService: ILogService,\n\tconfigurationService: IConfigurationService,\n): Promise<IProcessEnvironment> {\n\tconst nlsConfig = await getNLSConfiguration(\n\t\tlanguage,\n\t\tenvironmentService.userDataPath,\n\t);\n\n\tlet userShellEnv: typeof process.env = {};\n\tif (withUserShellEnvironment) {\n\t\ttry {\n\t\t\tuserShellEnv = await getResolvedShellEnv(\n\t\t\t\tconfigurationService,\n\t\t\t\tlogService,\n\t\t\t\tenvironmentService.args,\n\t\t\t\tprocess.env,\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogService.error(\n\t\t\t\t\"ExtensionHostConnection#buildUserEnvironment resolving shell environment failed\",\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\t}\n\n\tconst processEnv = process.env;\n\n\tconst env: IProcessEnvironment = {\n\t\t...processEnv,\n\t\t...userShellEnv,\n\t\t...{\n\t\t\tVSCODE_AMD_ENTRYPOINT: \"vs/workbench/api/node/extensionHostProcess\",\n\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: \"true\",\n\t\t\tVSCODE_NLS_CONFIG: JSON.stringify(nlsConfig),\n\t\t},\n\t\t...startParamsEnv,\n\t};\n\n\tconst binFolder = environmentService.isBuilt\n\t\t? join(environmentService.appRoot, \"bin\")\n\t\t: join(environmentService.appRoot, \"resources\", \"server\", \"bin-dev\");\n\tconst remoteCliBinFolder = join(binFolder, \"remote-cli\"); // contains the `code` command that can talk to the remote server\n\n\tlet PATH = readCaseInsensitive(env, \"PATH\");\n\tif (PATH) {\n\t\tPATH = remoteCliBinFolder + delimiter + PATH;\n\t} else {\n\t\tPATH = remoteCliBinFolder;\n\t}\n\tsetCaseInsensitive(env, \"PATH\", PATH);\n\n\tif (!environmentService.args[\"without-browser-env-var\"]) {\n\t\tenv.BROWSER = join(\n\t\t\tbinFolder,\n\t\t\t\"helpers\",\n\t\t\tisWindows ? \"browser.cmd\" : \"browser.sh\",\n\t\t); // a command that opens a browser on the local machine\n\t}\n\n\tremoveNulls(env);\n\treturn env;\n}\n\nclass ConnectionData {\n\tconstructor(\n\t\tpublic readonly socket: NodeSocket | WebSocketNodeSocket,\n\t\tpublic readonly initialDataChunk: VSBuffer,\n\t) {}\n\n\tpublic socketDrain(): Promise<void> {\n\t\treturn this.socket.drain();\n\t}\n\n\tpublic toIExtHostSocketMessage(): IExtHostSocketMessage {\n\t\tlet skipWebSocketFrames: boolean;\n\t\tlet permessageDeflate: boolean;\n\t\tlet inflateBytes: VSBuffer;\n\n\t\tif (this.socket instanceof NodeSocket) {\n\t\t\tskipWebSocketFrames = true;\n\t\t\tpermessageDeflate = false;\n\t\t\tinflateBytes = VSBuffer.alloc(0);\n\t\t} else {\n\t\t\tskipWebSocketFrames = false;\n\t\t\tpermessageDeflate = this.socket.permessageDeflate;\n\t\t\tinflateBytes = this.socket.recordedInflateBytes;\n\t\t}\n\n\t\treturn {\n\t\t\ttype: \"VSCODE_EXTHOST_IPC_SOCKET\",\n\t\t\tinitialDataChunk: (<Buffer>this.initialDataChunk.buffer).toString(\n\t\t\t\t\"base64\",\n\t\t\t),\n\t\t\tskipWebSocketFrames: skipWebSocketFrames,\n\t\t\tpermessageDeflate: permessageDeflate,\n\t\t\tinflateBytes: (<Buffer>inflateBytes.buffer).toString(\"base64\"),\n\t\t};\n\t}\n}\n\nexport class ExtensionHostConnection extends Disposable {\n\tprivate _onClose = new Emitter<void>();\n\treadonly onClose: Event<void> = this._onClose.event;\n\n\tprivate readonly _canSendSocket: boolean;\n\tprivate _disposed: boolean;\n\tprivate _remoteAddress: string;\n\tprivate _extensionHostProcess: cp.ChildProcess | null;\n\tprivate _connectionData: ConnectionData | null;\n\n\tconstructor(\n\t\tprivate readonly _reconnectionToken: string,\n\t\tremoteAddress: string,\n\t\tsocket: NodeSocket | WebSocketNodeSocket,\n\t\tinitialDataChunk: VSBuffer,\n\t\t@IServerEnvironmentService private readonly _environmentService: IServerEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionHostStatusService private readonly _extensionHostStatusService: IExtensionHostStatusService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._canSendSocket = (!isWindows || !this._environmentService.args['socket-path']);\n\t\tthis._disposed = false;\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._connectionData = new ConnectionData(socket, initialDataChunk);\n\n\t\tthis._log(`New connection established.`);\n\t}\n\n\toverride dispose(): void {\n\t\tthis._cleanResources();\n\t\tsuper.dispose();\n\t}\n\n\tprivate get _logPrefix(): string {\n\t\treturn `[${this._remoteAddress}][${this._reconnectionToken.substr(0, 8)}][ExtensionHostConnection] `;\n\t}\n\n\tprivate _log(_str: string): void {\n\t\tthis._logService.info(`${this._logPrefix}${_str}`);\n\t}\n\n\tprivate _logError(_str: string): void {\n\t\tthis._logService.error(`${this._logPrefix}${_str}`);\n\t}\n\n\tprivate async _pipeSockets(\n\t\textHostSocket: net.Socket,\n\t\tconnectionData: ConnectionData,\n\t): Promise<void> {\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(connectionData.socket);\n\t\tdisposables.add(\n\t\t\ttoDisposable(() => {\n\t\t\t\textHostSocket.destroy();\n\t\t\t}),\n\t\t);\n\n\t\tconst stopAndCleanup = () => {\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(connectionData.socket.onEnd(stopAndCleanup));\n\t\tdisposables.add(connectionData.socket.onClose(stopAndCleanup));\n\n\t\tdisposables.add(\n\t\t\tEvent.fromNodeEventEmitter<void>(\n\t\t\t\textHostSocket,\n\t\t\t\t\"end\",\n\t\t\t)(stopAndCleanup),\n\t\t);\n\t\tdisposables.add(\n\t\t\tEvent.fromNodeEventEmitter<void>(\n\t\t\t\textHostSocket,\n\t\t\t\t\"close\",\n\t\t\t)(stopAndCleanup),\n\t\t);\n\t\tdisposables.add(\n\t\t\tEvent.fromNodeEventEmitter<void>(\n\t\t\t\textHostSocket,\n\t\t\t\t\"error\",\n\t\t\t)(stopAndCleanup),\n\t\t);\n\n\t\tdisposables.add(\n\t\t\tconnectionData.socket.onData((e) => extHostSocket.write(e.buffer)),\n\t\t);\n\t\tdisposables.add(\n\t\t\tEvent.fromNodeEventEmitter<Buffer>(\n\t\t\t\textHostSocket,\n\t\t\t\t\"data\",\n\t\t\t)((e) => {\n\t\t\t\tconnectionData.socket.write(VSBuffer.wrap(e));\n\t\t\t}),\n\t\t);\n\n\t\tif (connectionData.initialDataChunk.byteLength > 0) {\n\t\t\textHostSocket.write(connectionData.initialDataChunk.buffer);\n\t\t}\n\t}\n\n\tprivate async _sendSocketToExtensionHost(\n\t\textensionHostProcess: cp.ChildProcess,\n\t\tconnectionData: ConnectionData,\n\t): Promise<void> {\n\t\t// Make sure all outstanding writes have been drained before sending the socket\n\t\tawait connectionData.socketDrain();\n\t\tconst msg = connectionData.toIExtHostSocketMessage();\n\t\tlet socket: net.Socket;\n\t\tif (connectionData.socket instanceof NodeSocket) {\n\t\t\tsocket = connectionData.socket.socket;\n\t\t} else {\n\t\t\tsocket = connectionData.socket.socket.socket;\n\t\t}\n\t\textensionHostProcess.send(msg, socket);\n\t}\n\n\tpublic shortenReconnectionGraceTimeIfNecessary(): void {\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg: IExtHostReduceGraceTimeMessage = {\n\t\t\ttype: \"VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME\",\n\t\t};\n\t\tthis._extensionHostProcess.send(msg);\n\t}\n\n\tpublic acceptReconnection(\n\t\tremoteAddress: string,\n\t\t_socket: NodeSocket | WebSocketNodeSocket,\n\t\tinitialDataChunk: VSBuffer,\n\t): void {\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._log(`The client has reconnected.`);\n\t\tconst connectionData = new ConnectionData(_socket, initialDataChunk);\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\t// The extension host didn't even start up yet\n\t\t\tthis._connectionData = connectionData;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._sendSocketToExtensionHost(\n\t\t\tthis._extensionHostProcess,\n\t\t\tconnectionData,\n\t\t);\n\t}\n\n\tprivate _cleanResources(): void {\n\t\tif (this._disposed) {\n\t\t\t// already called\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\t\tif (this._connectionData) {\n\t\t\tthis._connectionData.socket.end();\n\t\t\tthis._connectionData = null;\n\t\t}\n\t\tif (this._extensionHostProcess) {\n\t\t\tthis._extensionHostProcess.kill();\n\t\t\tthis._extensionHostProcess = null;\n\t\t}\n\t\tthis._onClose.fire(undefined);\n\t}\n\n\tpublic async start(\n\t\tstartParams: IRemoteExtensionHostStartParams,\n\t): Promise<void> {\n\t\ttry {\n\t\t\tlet execArgv: string[] = process.execArgv\n\t\t\t\t? process.execArgv.filter((a) => !/^--inspect(-brk)?=/.test(a))\n\t\t\t\t: [];\n\t\t\tif (startParams.port && !(<any>process).pkg) {\n\t\t\t\texecArgv = [\n\t\t\t\t\t`--inspect${startParams.break ? \"-brk\" : \"\"}=${startParams.port}`,\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tconst env = await buildUserEnvironment(\n\t\t\t\tstartParams.env,\n\t\t\t\ttrue,\n\t\t\t\tstartParams.language,\n\t\t\t\tthis._environmentService,\n\t\t\t\tthis._logService,\n\t\t\t\tthis._configurationService,\n\t\t\t);\n\t\t\tremoveDangerousEnvVariables(env);\n\n\t\t\tlet extHostNamedPipeServer: net.Server | null;\n\n\t\t\tif (this._canSendSocket) {\n\t\t\t\twriteExtHostConnection(new SocketExtHostConnection(), env);\n\t\t\t\textHostNamedPipeServer = null;\n\t\t\t} else {\n\t\t\t\tconst { namedPipeServer, pipeName } =\n\t\t\t\t\tawait this._listenOnPipe();\n\t\t\t\twriteExtHostConnection(new IPCExtHostConnection(pipeName), env);\n\t\t\t\textHostNamedPipeServer = namedPipeServer;\n\t\t\t}\n\n\t\t\tconst opts = {\n\t\t\t\tenv,\n\t\t\t\texecArgv,\n\t\t\t\tsilent: true,\n\t\t\t};\n\n\t\t\t// Refs https://github.com/microsoft/vscode/issues/189805\n\t\t\topts.execArgv.unshift(\"--dns-result-order=ipv4first\");\n\n\t\t\t// Run Extension Host as fork of current process\n\t\t\tconst args = [\"--type=extensionHost\", `--transformURIs`];\n\t\t\tconst useHostProxy =\n\t\t\t\tthis._environmentService.args[\"use-host-proxy\"];\n\t\t\targs.push(`--useHostProxy=${useHostProxy ? \"true\" : \"false\"}`);\n\t\t\tthis._extensionHostProcess = cp.fork(\n\t\t\t\tFileAccess.asFileUri(\"bootstrap-fork\").fsPath,\n\t\t\t\targs,\n\t\t\t\topts,\n\t\t\t);\n\t\t\tconst pid = this._extensionHostProcess.pid;\n\t\t\tthis._log(`<${pid}> Launched Extension Host Process.`);\n\n\t\t\t// Catch all output coming from the extension host process\n\t\t\tthis._extensionHostProcess.stdout!.setEncoding(\"utf8\");\n\t\t\tthis._extensionHostProcess.stderr!.setEncoding(\"utf8\");\n\t\t\tconst onStdout = Event.fromNodeEventEmitter<string>(\n\t\t\t\tthis._extensionHostProcess.stdout!,\n\t\t\t\t\"data\",\n\t\t\t);\n\t\t\tconst onStderr = Event.fromNodeEventEmitter<string>(\n\t\t\t\tthis._extensionHostProcess.stderr!,\n\t\t\t\t\"data\",\n\t\t\t);\n\t\t\tthis._register(onStdout((e) => this._log(`<${pid}> ${e}`)));\n\t\t\tthis._register(onStderr((e) => this._log(`<${pid}><stderr> ${e}`)));\n\n\t\t\t// Lifecycle\n\t\t\tthis._extensionHostProcess.on(\"error\", (err) => {\n\t\t\t\tthis._logError(`<${pid}> Extension Host Process had an error`);\n\t\t\t\tthis._logService.error(err);\n\t\t\t\tthis._cleanResources();\n\t\t\t});\n\n\t\t\tthis._extensionHostProcess.on(\n\t\t\t\t\"exit\",\n\t\t\t\t(code: number, signal: string) => {\n\t\t\t\t\tthis._extensionHostStatusService.setExitInfo(\n\t\t\t\t\t\tthis._reconnectionToken,\n\t\t\t\t\t\t{ code, signal },\n\t\t\t\t\t);\n\t\t\t\t\tthis._log(\n\t\t\t\t\t\t`<${pid}> Extension Host Process exited with code: ${code}, signal: ${signal}.`,\n\t\t\t\t\t);\n\t\t\t\t\tthis._cleanResources();\n\t\t\t\t},\n\t\t\t);\n\n\t\t\tif (extHostNamedPipeServer) {\n\t\t\t\textHostNamedPipeServer.on(\"connection\", (socket) => {\n\t\t\t\t\textHostNamedPipeServer.close();\n\t\t\t\t\tthis._pipeSockets(socket, this._connectionData!);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst messageListener = (msg: IExtHostReadyMessage) => {\n\t\t\t\t\tif (msg.type === \"VSCODE_EXTHOST_IPC_READY\") {\n\t\t\t\t\t\tthis._extensionHostProcess!.removeListener(\n\t\t\t\t\t\t\t\"message\",\n\t\t\t\t\t\t\tmessageListener,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._sendSocketToExtensionHost(\n\t\t\t\t\t\t\tthis._extensionHostProcess!,\n\t\t\t\t\t\t\tthis._connectionData!,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._connectionData = null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis._extensionHostProcess.on(\"message\", messageListener);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error(\"ExtensionHostConnection errored\");\n\t\t\tif (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _listenOnPipe(): Promise<{\n\t\tpipeName: string;\n\t\tnamedPipeServer: net.Server;\n\t}> {\n\t\treturn new Promise<{ pipeName: string; namedPipeServer: net.Server }>(\n\t\t\t(resolve, reject) => {\n\t\t\t\tconst pipeName = createRandomIPCHandle();\n\n\t\t\t\tconst namedPipeServer = net.createServer();\n\t\t\t\tnamedPipeServer.on(\"error\", reject);\n\t\t\t\tnamedPipeServer.listen(pipeName, () => {\n\t\t\t\t\tnamedPipeServer?.removeListener(\"error\", reject);\n\t\t\t\t\tresolve({ pipeName, namedPipeServer });\n\t\t\t\t});\n\t\t\t},\n\t\t);\n\t}\n}\n\nfunction readCaseInsensitive(\n\tenv: { [key: string]: string | undefined },\n\tkey: string,\n): string | undefined {\n\tconst pathKeys = Object.keys(env).filter(\n\t\t(k) => k.toLowerCase() === key.toLowerCase(),\n\t);\n\tconst pathKey = pathKeys.length > 0 ? pathKeys[0] : key;\n\treturn env[pathKey];\n}\n\nfunction setCaseInsensitive(\n\tenv: { [key: string]: unknown },\n\tkey: string,\n\tvalue: string,\n): void {\n\tconst pathKeys = Object.keys(env).filter(\n\t\t(k) => k.toLowerCase() === key.toLowerCase(),\n\t);\n\tconst pathKey = pathKeys.length > 0 ? pathKeys[0] : key;\n\tenv[pathKey] = value;\n}\n\nfunction removeNulls(env: { [key: string]: unknown | null }): void {\n\t// Don't delete while iterating the object itself\n\tfor (const key of Object.keys(env)) {\n\t\tif (env[key] === null) {\n\t\t\tdelete env[key];\n\t\t}\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
