import{isESM as c,canASAR as p}from"./base/common/amd.js";import{FileAccess as f,nodeModulesAsarPath as h,nodeModulesPath as m,Schemas as g,VSCODE_AUTHORITY as _}from"./base/common/network.js";import*as y from"./base/common/platform.js";import"./base/common/product.js";import{assertType as P}from"./base/common/types.js";import{URI as T}from"./base/common/uri.js";import{generateUuid as b}from"./base/common/uuid.js";class w{constructor(e,r,t){this.id=e;this.dependencies=r;this.callback=t}}var A=(t=>(t[t.Uninitialized=1]="Uninitialized",t[t.InitializedInternal=2]="InitializedInternal",t[t.InitializedExternal=3]="InitializedExternal",t))(A||{});class u{static INSTANCE=new u;_isWebWorker=typeof self=="object"&&self.constructor&&self.constructor.name==="DedicatedWorkerGlobalScope";_isRenderer=typeof document=="object";_defineCalls=[];_state=1;_amdPolicy;constructor(){}_initialize(){if(this._state===1){if(globalThis.define){console.log("[amdX] AMD loader already present externally"),this._state=3;return}}else return;this._state=2,globalThis.define=(e,r,t)=>{typeof e!="string"&&(t=r,r=e,e=null),(typeof r!="object"||!Array.isArray(r))&&(t=r,r=null),this._defineCalls.push(new w(e,r,t))},globalThis.define.amd=!0,this._isRenderer?this._amdPolicy=globalThis._VSCODE_WEB_PACKAGE_TTP??window.trustedTypes?.createPolicy("amdLoader",{createScriptURL(e){if(e.startsWith(window.location.origin)||e.startsWith(`${g.vscodeFileResource}://${_}`))return e;throw new Error(`[trusted_script_src] Invalid script url: ${e}`)}}):this._isWebWorker&&(this._amdPolicy=globalThis._VSCODE_WEB_PACKAGE_TTP??globalThis.trustedTypes?.createPolicy("amdLoader",{createScriptURL(e){return e}}))}async load(e){if(this._initialize(),this._state===3)return new Promise(o=>{const a=b();console.log(`[amdX] Using external define("${a}", ["${e}"])`),globalThis.define(a,[e],function(s){console.log(`[amdX] Got a result for ${a}: ${!!s}`),o(s)})});const r=await(this._isWebWorker?this._workerLoadScript(e):this._isRenderer?this._rendererLoadScript(e):this._nodeJSLoadScript(e));if(!r){console.warn(`Did not receive a define call from script ${e}`);return}const t={},i=[],n=[];if(Array.isArray(r.dependencies))for(const o of r.dependencies)o==="exports"?i.push(t):n.push(o);if(n.length>0)throw new Error(`Cannot resolve dependencies for script ${e}. The dependencies are: ${n.join(", ")}`);return typeof r.callback=="function"?r.callback(...i)??t:r.callback}_rendererLoadScript(e){return new Promise((r,t)=>{const i=document.createElement("script");i.setAttribute("async","async"),i.setAttribute("type","text/javascript");const n=()=>{i.removeEventListener("load",o),i.removeEventListener("error",a)},o=s=>{n(),r(this._defineCalls.pop())},a=s=>{n(),t(s)};i.addEventListener("load",o),i.addEventListener("error",a),this._amdPolicy&&(e=this._amdPolicy.createScriptURL(e)),i.setAttribute("src",e),window.document.getElementsByTagName("head")[0].appendChild(i)})}async _workerLoadScript(e){return this._amdPolicy&&(e=this._amdPolicy.createScriptURL(e)),c?await import(e):importScripts(e),this._defineCalls.pop()}async _nodeJSLoadScript(e){try{const r=(await import("fs")).default,t=(await import("vm")).default,i=(await import("module")).default,n=T.parse(e).fsPath,o=r.readFileSync(n).toString(),a=i.wrap(o.replace(/^#!.*/,""));return new t.Script(a).runInThisContext().apply(),this._defineCalls.pop()}catch(r){throw r}}}const d=new Map;async function I(l,e,r){if(c){r===void 0&&(r=!!(globalThis._VSCODE_PRODUCT_JSON??globalThis.vscode?.context?.configuration()?.product)?.commit);const t=e?`${l}/${e}`:l;if(d.has(t))return d.get(t);let i;if(/^\w[\w\d+.-]*:\/\//.test(t))i=t;else{const s=`${p&&r&&!y.isWeb?h:m}/${t}`;i=f.asBrowserUri(s).toString(!0)}const n=u.INSTANCE.load(i);return d.set(t,n),n}else return await import(l)}function W(l,e){P(c);const t=!!(globalThis._VSCODE_PRODUCT_JSON??globalThis.vscode?.context?.configuration()?.product)?.commit,i=p&&t&&!y.isWeb,n=`${l}/${e}`,a=`${i?h:m}/${n}`;return f.asBrowserUri(a).toString(!0)}export{I as importAMDNodeModule,W as resolveAmdNodeModulePath};
